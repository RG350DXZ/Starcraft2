//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Tya's Zerg Defense
// 
//==================================================================================================
include "TriggerLibs/NativeLib"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_levelCap = 20;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
int[3] gv_controlRaceButtonLimit;
string[21][3] gv_controlDisable;
int[21][3] gv_controlButtonImage;
text[21][3] gv_controlButtonTooltip;
int[21][3] gv_controlButton;
int[2] gv_controlShow;
int[3] gv_controlDialog;
bool gv_gameOver;
int[16] gv_playerRace;
unit[16] gv_playerWorker;
point[16] gv_playerPoint;
point[16] gv_playerTarget;
fixed[16] gv_playerFacing;
unitgroup[16] gv_playerWave;
unitgroup[16] gv_playerSpawners;
int gv_levelupAnimation;
int gv_avatarExperienceText;
int gv_avatarExperienceLevel;
int gv_avatarBar;
int gv_avatarLevelDialog;
int[16] gv_avatarExperienceCurrent;
int[16] gv_avatarExperienceCurrentLevel;
int[gv_levelCap + 1] gv_databaseExperienceNeeded;
int gv_experienceCap;
int[16] gv_experienceGained;
bank[16] gv_sTATBank;
int[16] gv_sTATExperience;
int[30] gv_talentsButton;
int[2] gv_talentsShow;
int[30] gv_talentsIcon;
int gv_talentsDialog;
string[30] gv_talentsBehavior;
int[30] gv_talentsRequirement;
int gv_talentsHighlight;
int[16] gv_talentsCurrent;
int gv_wave;
fixed gv_difficulty;
int[2] gv_gameOverButton;
int[2] gv_gameOverDialog;
unitgroup[3] gv_overseerGroup;
unitgroup gv_reinforcementGroup;

void InitGlobals () {
    int init_i;
    int init_j;

    for (init_i = 0; init_i <= 20; init_i += 1) {
        for (init_j = 0; init_j <= 2; init_j += 1) {
            gv_controlDisable[init_i][init_j] = "NeosteelFrame";
        }
    }
    for (init_i = 0; init_i <= 20; init_i += 1) {
        for (init_j = 0; init_j <= 2; init_j += 1) {
            gv_controlButtonImage[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 20; init_i += 1) {
        for (init_j = 0; init_j <= 2; init_j += 1) {
            gv_controlButton[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 1; init_i += 1) {
        gv_controlShow[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_controlDialog[init_i] = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_playerFacing[init_i] = 225.0;
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_playerWave[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_playerSpawners[init_i] = UnitGroupEmpty();
    }
    gv_avatarExperienceText = c_invalidDialogControlId;
    gv_avatarExperienceLevel = c_invalidDialogControlId;
    gv_avatarBar = c_invalidDialogControlId;
    gv_avatarLevelDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_avatarExperienceCurrentLevel[init_i] = 1;
    }
    for (init_i = 0; init_i <= gv_levelCap; init_i += 1) {
        gv_databaseExperienceNeeded[init_i] = 1000;
    }
    for (init_i = 0; init_i <= 29; init_i += 1) {
        gv_talentsButton[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 1; init_i += 1) {
        gv_talentsShow[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 29; init_i += 1) {
        gv_talentsIcon[init_i] = c_invalidDialogControlId;
    }
    gv_talentsDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 29; init_i += 1) {
        gv_talentsBehavior[init_i] = "TalentNone";
    }
    gv_talentsHighlight = c_invalidDialogControlId;
    gv_difficulty = 0.75;
    for (init_i = 0; init_i <= 1; init_i += 1) {
        gv_gameOverButton[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 1; init_i += 1) {
        gv_gameOverDialog[init_i] = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_overseerGroup[init_i] = UnitGroupEmpty();
    }
    gv_reinforcementGroup = UnitGroupEmpty();
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_SpawnProtoss (int lp_player);
void gf_SpawnTerran (int lp_player);
void gf_SpawnZerg (int lp_player);
void gf_CreateStartingUnits (int lp_player, point lp_point);
void gf_UpdateStatUI (int lp_p);
void gf_UpdateExperience (int lp_p, int lp_xp);
void gf_UpdateTalents (int lp_player);
void gf_GameOver (playergroup lp_winners, playergroup lp_losers);
void gf_SpawnZergBasic (point lp_point, fixed lp_cost, point lp_target1, point lp_target2, point lp_target3, int lp_player, fixed lp_size, fixed lp_angle);
void gf_SpawnZergOverseer (point lp_point, point lp_target2, point lp_target3, int lp_player, fixed lp_angle, int lp_lane);
void gf_WaveUpgrades (int lp_player);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Library;
trigger gt_ControlCreate;
trigger gt_ControlShow;
trigger gt_ControlSelect;
trigger gt_OrderMorph;
trigger gt_OrderIdle;
trigger gt_OrderNeuralParasiteOn;
trigger gt_OrderNeuralParasiteOff;
trigger gt_OrderUnitCreatedBehavior;
trigger gt_OrderUnitCreatedEffect;
trigger gt_Sell;
trigger gt_Upgrade;
trigger gt_Reposition;
trigger gt_CreateUnit;
trigger gt_MorphTarget;
trigger gt_MorphInstant;
trigger gt_SwitchHellbat;
trigger gt_SwitchHellion;
trigger gt_SwitchVikingAssault;
trigger gt_SwitchVikingFighter;
trigger gt_SwitchThorNormal;
trigger gt_SwitchThorSpecial;
trigger gt_PlayerAvatar;
trigger gt_LevelupAnimation;
trigger gt_TalentsCreate;
trigger gt_TalentsShow;
trigger gt_TalentsUse;
trigger gt_GameOverButton;
trigger gt_PickupMinerals;
trigger gt_StructureDeath;
trigger gt_HeroSet;
trigger gt_Spawn;
trigger gt_Start;
trigger gt_Magthera;
trigger gt_Leaver;
trigger gt_DefenderRevivePolymorph;
trigger gt_DefenderReviveCharm;
trigger gt_DefenderRevive;
trigger gt_ReviveHero;
trigger gt_GameOver;

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_SpawnProtoss (int lp_player) {
    string autoFCC1D39F_val;

    // Variable Declarations
    string lv_u;
    unitgroup lv_wave;
    point lv_target;

    // Variable Initialization
    lv_wave = UnitGroupEmpty();

    // Implementation
    UnitGroupLoopBegin(UnitGroupFilter(null, c_playerAny, gv_playerSpawners[lp_player], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitBehaviorRemove(UnitGroupLoopCurrent(), "Sell100", 1);
        lv_u = UnitGetType(UnitGroupLoopCurrent());
        autoFCC1D39F_val = lv_u;
        if (autoFCC1D39F_val == "ZealotSpawner") {
            UnitCreate(1, "Zealot", c_unitCreateIgnorePlacement, lp_player, PointWithOffsetPolar(gv_playerPoint[lp_player], DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), gv_playerPoint[lp_player]), (AngleBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), gv_playerPoint[lp_player]) + 180.0)), gv_playerFacing[lp_player]);
            if ((UnitCheckAbilCmdState(UnitGroupLoopCurrent(), AbilityCommand("Charge", 0), c_cmdStateIsAutoCast) == false)) {
                UnitIssueOrder(UnitLastCreated(), OrderSetAutoCast(AbilityCommand("Charge", 0), false), c_orderQueueReplace);
            }
            else {
            }
        }
        else if (autoFCC1D39F_val == "StalkerSpawner") {
            UnitCreate(1, "Stalker", c_unitCreateIgnorePlacement, lp_player, PointWithOffsetPolar(gv_playerPoint[lp_player], DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), gv_playerPoint[lp_player]), (AngleBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), gv_playerPoint[lp_player]) + 180.0)), gv_playerFacing[lp_player]);
            if ((UnitCheckAbilCmdState(UnitGroupLoopCurrent(), AbilityCommand("Blink", 0), c_cmdStateIsAutoCast) == false)) {
                UnitIssueOrder(UnitLastCreated(), OrderSetAutoCast(AbilityCommand("Blink", 0), false), c_orderQueueReplace);
            }
            else {
            }
        }
        else if (autoFCC1D39F_val == "SentrySpawner") {
            UnitCreate(1, "Sentry", c_unitCreateIgnorePlacement, lp_player, PointWithOffsetPolar(gv_playerPoint[lp_player], DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), gv_playerPoint[lp_player]), (AngleBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), gv_playerPoint[lp_player]) + 180.0)), gv_playerFacing[lp_player]);
            if ((UnitCheckAbilCmdState(UnitGroupLoopCurrent(), AbilityCommand("GuardianShield", 0), c_cmdStateIsAutoCast) == false)) {
                UnitIssueOrder(UnitLastCreated(), OrderSetAutoCast(AbilityCommand("GuardianShield", 0), false), c_orderQueueReplace);
            }
            else {
            }
            if ((UnitCheckAbilCmdState(UnitGroupLoopCurrent(), AbilityCommand("HallucinationArchon", 0), c_cmdStateIsAutoCast) == false)) {
                UnitIssueOrder(UnitLastCreated(), OrderSetAutoCast(AbilityCommand("HallucinationArchon", 0), false), c_orderQueueReplace);
            }
            else {
            }
            if ((UnitCheckAbilCmdState(UnitGroupLoopCurrent(), AbilityCommand("HallucinationColossus", 0), c_cmdStateIsAutoCast) == true)) {
                UnitIssueOrder(UnitLastCreated(), OrderSetAutoCast(AbilityCommand("HallucinationColossus", 0), true), c_orderQueueReplace);
            }
            else {
            }
            if ((UnitCheckAbilCmdState(UnitGroupLoopCurrent(), AbilityCommand("HallucinationHighTemplar", 0), c_cmdStateIsAutoCast) == true)) {
                UnitIssueOrder(UnitLastCreated(), OrderSetAutoCast(AbilityCommand("HallucinationHighTemplar", 0), true), c_orderQueueReplace);
            }
            else {
            }
            if ((UnitCheckAbilCmdState(UnitGroupLoopCurrent(), AbilityCommand("HallucinationImmortal", 0), c_cmdStateIsAutoCast) == true)) {
                UnitIssueOrder(UnitLastCreated(), OrderSetAutoCast(AbilityCommand("HallucinationImmortal", 0), true), c_orderQueueReplace);
            }
            else {
            }
            if ((UnitCheckAbilCmdState(UnitGroupLoopCurrent(), AbilityCommand("HallucinationPhoenix", 0), c_cmdStateIsAutoCast) == true)) {
                UnitIssueOrder(UnitLastCreated(), OrderSetAutoCast(AbilityCommand("HallucinationPhoenix", 0), true), c_orderQueueReplace);
            }
            else {
            }
            if ((UnitCheckAbilCmdState(UnitGroupLoopCurrent(), AbilityCommand("HallucinationProbe", 0), c_cmdStateIsAutoCast) == true)) {
                UnitIssueOrder(UnitLastCreated(), OrderSetAutoCast(AbilityCommand("HallucinationProbe", 0), true), c_orderQueueReplace);
            }
            else {
            }
            if ((UnitCheckAbilCmdState(UnitGroupLoopCurrent(), AbilityCommand("HallucinationStalker", 0), c_cmdStateIsAutoCast) == true)) {
                UnitIssueOrder(UnitLastCreated(), OrderSetAutoCast(AbilityCommand("HallucinationStalker", 0), true), c_orderQueueReplace);
            }
            else {
            }
            if ((UnitCheckAbilCmdState(UnitGroupLoopCurrent(), AbilityCommand("HallucinationVoidRay", 0), c_cmdStateIsAutoCast) == true)) {
                UnitIssueOrder(UnitLastCreated(), OrderSetAutoCast(AbilityCommand("HallucinationVoidRay", 0), true), c_orderQueueReplace);
            }
            else {
            }
            if ((UnitCheckAbilCmdState(UnitGroupLoopCurrent(), AbilityCommand("HallucinationWarpPrism", 0), c_cmdStateIsAutoCast) == true)) {
                UnitIssueOrder(UnitLastCreated(), OrderSetAutoCast(AbilityCommand("HallucinationWarpPrism", 0), true), c_orderQueueReplace);
            }
            else {
            }
            if ((UnitCheckAbilCmdState(UnitGroupLoopCurrent(), AbilityCommand("HallucinationZealot", 0), c_cmdStateIsAutoCast) == true)) {
                UnitIssueOrder(UnitLastCreated(), OrderSetAutoCast(AbilityCommand("HallucinationZealot", 0), true), c_orderQueueReplace);
            }
            else {
            }
            if ((UnitCheckAbilCmdState(UnitGroupLoopCurrent(), AbilityCommand("HallucinationOracle", 0), c_cmdStateIsAutoCast) == true)) {
                UnitIssueOrder(UnitLastCreated(), OrderSetAutoCast(AbilityCommand("HallucinationOracle", 0), true), c_orderQueueReplace);
            }
            else {
            }
        }
        else if (autoFCC1D39F_val == "ObserverSpawner") {
            UnitCreate(1, "Observer", c_unitCreateIgnorePlacement, lp_player, PointWithOffsetPolar(gv_playerPoint[lp_player], DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), gv_playerPoint[lp_player]), (AngleBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), gv_playerPoint[lp_player]) + 180.0)), gv_playerFacing[lp_player]);
            UnitCreateEffectUnit(UnitLastCreated(), "WarpInEffect15", UnitLastCreated());
        }
        else if (autoFCC1D39F_val == "ImmortalSpawner") {
            UnitCreate(1, "Immortal", c_unitCreateIgnorePlacement, lp_player, PointWithOffsetPolar(gv_playerPoint[lp_player], DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), gv_playerPoint[lp_player]), (AngleBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), gv_playerPoint[lp_player]) + 180.0)), gv_playerFacing[lp_player]);
        }
        else if (autoFCC1D39F_val == "DarkTemplarSpawner") {
            UnitCreate(1, "DarkTemplar", c_unitCreateIgnorePlacement, lp_player, PointWithOffsetPolar(gv_playerPoint[lp_player], DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), gv_playerPoint[lp_player]), (AngleBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), gv_playerPoint[lp_player]) + 180.0)), gv_playerFacing[lp_player]);
        }
        else if (autoFCC1D39F_val == "HighTemplarSpawner") {
            UnitCreate(1, "HighTemplar", c_unitCreateIgnorePlacement, lp_player, PointWithOffsetPolar(gv_playerPoint[lp_player], DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), gv_playerPoint[lp_player]), (AngleBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), gv_playerPoint[lp_player]) + 180.0)), gv_playerFacing[lp_player]);
            if ((UnitCheckAbilCmdState(UnitGroupLoopCurrent(), AbilityCommand("Feedback", 0), c_cmdStateIsAutoCast) == false)) {
                UnitIssueOrder(UnitLastCreated(), OrderSetAutoCast(AbilityCommand("Feedback", 0), false), c_orderQueueReplace);
            }
            else {
            }
            if ((UnitCheckAbilCmdState(UnitGroupLoopCurrent(), AbilityCommand("PsiStorm", 0), c_cmdStateIsAutoCast) == false)) {
                UnitIssueOrder(UnitLastCreated(), OrderSetAutoCast(AbilityCommand("PsiStorm", 0), false), c_orderQueueReplace);
            }
            else {
            }
        }
        else if (autoFCC1D39F_val == "ArchonSpawner") {
            UnitCreate(1, "Archon", c_unitCreateIgnorePlacement, lp_player, PointWithOffsetPolar(gv_playerPoint[lp_player], DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), gv_playerPoint[lp_player]), (AngleBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), gv_playerPoint[lp_player]) + 180.0)), gv_playerFacing[lp_player]);
        }
        else if (autoFCC1D39F_val == "PhoenixSpawner") {
            UnitCreate(1, "Phoenix", c_unitCreateIgnorePlacement, lp_player, PointWithOffsetPolar(gv_playerPoint[lp_player], DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), gv_playerPoint[lp_player]), (AngleBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), gv_playerPoint[lp_player]) + 180.0)), gv_playerFacing[lp_player]);
            UnitCreateEffectUnit(UnitLastCreated(), "WarpInEffect15", UnitLastCreated());
            UnitBehaviorAdd(UnitLastCreated(), "NonCombatantRange3", UnitLastCreated(), 1);
            if ((UnitCheckAbilCmdState(UnitGroupLoopCurrent(), AbilityCommand("GravitonBeam", 0), c_cmdStateIsAutoCast) == false)) {
                UnitIssueOrder(UnitLastCreated(), OrderSetAutoCast(AbilityCommand("GravitonBeam", 0), false), c_orderQueueReplace);
            }
            else {
            }
        }
        else if (autoFCC1D39F_val == "VoidRaySpawner") {
            UnitCreate(1, "VoidRay", c_unitCreateIgnorePlacement, lp_player, PointWithOffsetPolar(gv_playerPoint[lp_player], DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), gv_playerPoint[lp_player]), (AngleBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), gv_playerPoint[lp_player]) + 180.0)), gv_playerFacing[lp_player]);
            UnitCreateEffectUnit(UnitLastCreated(), "WarpInEffect", UnitLastCreated());
            if ((UnitCheckAbilCmdState(UnitGroupLoopCurrent(), AbilityCommand("VoidRaySwarmDamageBoost", 0), c_cmdStateIsAutoCast) == false)) {
                UnitIssueOrder(UnitLastCreated(), OrderSetAutoCast(AbilityCommand("VoidRaySwarmDamageBoost", 0), false), c_orderQueueReplace);
            }
            else {
            }
        }
        else if (autoFCC1D39F_val == "ColossusSpawner") {
            UnitCreate(1, "Colossus", c_unitCreateIgnorePlacement, lp_player, PointWithOffsetPolar(gv_playerPoint[lp_player], DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), gv_playerPoint[lp_player]), (AngleBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), gv_playerPoint[lp_player]) + 180.0)), gv_playerFacing[lp_player]);
        }
        else if (autoFCC1D39F_val == "CarrierSpawner") {
            UnitCreate(1, "Carrier", c_unitCreateIgnorePlacement, lp_player, PointWithOffsetPolar(gv_playerPoint[lp_player], DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), gv_playerPoint[lp_player]), (AngleBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), gv_playerPoint[lp_player]) + 180.0)), gv_playerFacing[lp_player]);
            UnitCreateEffectUnit(UnitLastCreated(), "WarpInEffect", UnitLastCreated());
            UnitIssueOrder(UnitLastCreated(), OrderSetAutoCast(AbilityCommand("CarrierHangar", 0), true), c_orderQueueReplace);
        }
        else if (autoFCC1D39F_val == "TempestSpawner") {
            UnitCreate(1, "Tempest", c_unitCreateIgnorePlacement, lp_player, PointWithOffsetPolar(gv_playerPoint[lp_player], DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), gv_playerPoint[lp_player]), (AngleBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), gv_playerPoint[lp_player]) + 180.0)), gv_playerFacing[lp_player]);
            UnitCreateEffectUnit(UnitLastCreated(), "WarpInEffect", UnitLastCreated());
        }
        else if (autoFCC1D39F_val == "MothershipCoreSpawner") {
            UnitCreate(1, "MothershipCore", c_unitCreateIgnorePlacement, lp_player, PointWithOffsetPolar(gv_playerPoint[lp_player], DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), gv_playerPoint[lp_player]), (AngleBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), gv_playerPoint[lp_player]) + 180.0)), gv_playerFacing[lp_player]);
            if ((UnitCheckAbilCmdState(UnitGroupLoopCurrent(), AbilityCommand("TemporalField", 0), c_cmdStateIsAutoCast) == false)) {
                UnitIssueOrder(UnitLastCreated(), OrderSetAutoCast(AbilityCommand("TemporalField", 0), false), c_orderQueueReplace);
            }
            else {
            }
        }
        else if (autoFCC1D39F_val == "MothershipSpawner") {
            UnitCreate(1, "Mothership", c_unitCreateIgnorePlacement, lp_player, PointWithOffsetPolar(gv_playerPoint[lp_player], DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), gv_playerPoint[lp_player]), (AngleBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), gv_playerPoint[lp_player]) + 180.0)), gv_playerFacing[lp_player]);
            if ((UnitCheckAbilCmdState(UnitGroupLoopCurrent(), AbilityCommand("TemporalField", 0), c_cmdStateIsAutoCast) == false)) {
                UnitIssueOrder(UnitLastCreated(), OrderSetAutoCast(AbilityCommand("TemporalField", 0), false), c_orderQueueReplace);
            }
            else {
            }
        }
        else {
        }
        UnitBehaviorAdd(UnitLastCreated(), "WaveUnit", UnitGroupLoopCurrent(), 1);
        UnitGroupAdd(lv_wave, UnitLastCreated());
        lv_target = PointWithOffsetPolar(UnitGetPosition(UnitLastCreated()), 95.0, UnitGetFacing(UnitGroupLoopCurrent()));
        UnitSetCustomValue(UnitLastCreated(), 0, PointGetX(lv_target));
        UnitSetCustomValue(UnitLastCreated(), 1, PointGetY(lv_target));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), lv_target), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1407)), c_orderQueueAddToEnd);
    }
    UnitGroupLoopEnd();
    UnitGroupAddUnitGroup(gv_playerWave[lp_player], lv_wave);
}

void gf_SpawnTerran (int lp_player) {
    string auto54AEFA79_val;

    // Variable Declarations
    string lv_u;
    unitgroup lv_wave;
    point lv_target;

    // Variable Initialization
    lv_wave = UnitGroupEmpty();

    // Implementation
    UnitGroupLoopBegin(UnitGroupFilter(null, c_playerAny, gv_playerSpawners[lp_player], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitBehaviorRemove(UnitGroupLoopCurrent(), "Sell100", 1);
        lv_u = UnitGetType(UnitGroupLoopCurrent());
        auto54AEFA79_val = lv_u;
        if (auto54AEFA79_val == "MarineSpawner") {
            UnitCreate(1, "Marine", c_unitCreateIgnorePlacement, lp_player, PointWithOffsetPolar(gv_playerPoint[lp_player], DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), gv_playerPoint[lp_player]), (AngleBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), gv_playerPoint[lp_player]) + 180.0)), gv_playerFacing[lp_player]);
            if ((UnitCheckAbilCmdState(UnitGroupLoopCurrent(), AbilityCommand("Stimpack", 0), c_cmdStateIsAutoCast) == false)) {
                UnitIssueOrder(UnitLastCreated(), OrderSetAutoCast(AbilityCommand("Stimpack", 0), false), c_orderQueueReplace);
            }
            else {
            }
        }
        else if (auto54AEFA79_val == "MarauderSpawner") {
            UnitCreate(1, "Marauder", c_unitCreateIgnorePlacement, lp_player, PointWithOffsetPolar(gv_playerPoint[lp_player], DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), gv_playerPoint[lp_player]), (AngleBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), gv_playerPoint[lp_player]) + 180.0)), gv_playerFacing[lp_player]);
            if ((UnitCheckAbilCmdState(UnitGroupLoopCurrent(), AbilityCommand("StimpackMarauder", 0), c_cmdStateIsAutoCast) == false)) {
                UnitIssueOrder(UnitLastCreated(), OrderSetAutoCast(AbilityCommand("StimpackMarauder", 0), false), c_orderQueueReplace);
            }
            else {
            }
        }
        else if (auto54AEFA79_val == "ReaperSpawner") {
            UnitCreate(1, "Reaper", c_unitCreateIgnorePlacement, lp_player, PointWithOffsetPolar(gv_playerPoint[lp_player], DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), gv_playerPoint[lp_player]), (AngleBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), gv_playerPoint[lp_player]) + 180.0)), gv_playerFacing[lp_player]);
        }
        else if (auto54AEFA79_val == "GhostSpawner") {
            UnitCreate(1, "Ghost", c_unitCreateIgnorePlacement, lp_player, PointWithOffsetPolar(gv_playerPoint[lp_player], DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), gv_playerPoint[lp_player]), (AngleBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), gv_playerPoint[lp_player]) + 180.0)), gv_playerFacing[lp_player]);
            if ((UnitCheckAbilCmdState(UnitGroupLoopCurrent(), AbilityCommand("Snipe", 0), c_cmdStateIsAutoCast) == false)) {
                UnitIssueOrder(UnitLastCreated(), OrderSetAutoCast(AbilityCommand("Snipe", 0), false), c_orderQueueReplace);
            }
            else {
            }
            if ((UnitCheckAbilCmdState(UnitGroupLoopCurrent(), AbilityCommand("EMP", 0), c_cmdStateIsAutoCast) == false)) {
                UnitIssueOrder(UnitLastCreated(), OrderSetAutoCast(AbilityCommand("EMP", 0), false), c_orderQueueReplace);
            }
            else {
            }
            if ((UnitCheckAbilCmdState(UnitGroupLoopCurrent(), AbilityCommand("GhostCloak", 0), c_cmdStateIsAutoCast) == false)) {
                UnitIssueOrder(UnitLastCreated(), OrderSetAutoCast(AbilityCommand("GhostCloak", 0), false), c_orderQueueReplace);
            }
            else {
            }
        }
        else if (auto54AEFA79_val == "HellionSpawner") {
            UnitCreate(1, "Hellion", c_unitCreateIgnorePlacement, lp_player, PointWithOffsetPolar(gv_playerPoint[lp_player], DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), gv_playerPoint[lp_player]), (AngleBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), gv_playerPoint[lp_player]) + 180.0)), gv_playerFacing[lp_player]);
        }
        else if (auto54AEFA79_val == "HellbatSpawner") {
            UnitCreate(1, "HellionTank", c_unitCreateIgnorePlacement, lp_player, PointWithOffsetPolar(gv_playerPoint[lp_player], DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), gv_playerPoint[lp_player]), (AngleBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), gv_playerPoint[lp_player]) + 180.0)), gv_playerFacing[lp_player]);
        }
        else if (auto54AEFA79_val == "MedivacSpawner") {
            UnitCreate(1, "Medivac", c_unitCreateIgnorePlacement, lp_player, PointWithOffsetPolar(gv_playerPoint[lp_player], DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), gv_playerPoint[lp_player]), (AngleBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), gv_playerPoint[lp_player]) + 180.0)), gv_playerFacing[lp_player]);
        }
        else if (auto54AEFA79_val == "VikingFighterSpawner") {
            UnitCreate(1, "VikingFighter", c_unitCreateIgnorePlacement, lp_player, PointWithOffsetPolar(gv_playerPoint[lp_player], DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), gv_playerPoint[lp_player]), (AngleBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), gv_playerPoint[lp_player]) + 180.0)), gv_playerFacing[lp_player]);
            if ((UnitCheckAbilCmdState(UnitGroupLoopCurrent(), AbilityCommand("MorphtoVikingGround", 0), c_cmdStateIsAutoCast) == false)) {
                UnitIssueOrder(UnitLastCreated(), OrderSetAutoCast(AbilityCommand("AssaultMode", 0), false), c_orderQueueReplace);
            }
            else {
            }
        }
        else if (auto54AEFA79_val == "VikingAssaultSpawner") {
            UnitCreate(1, "VikingAssault", c_unitCreateIgnorePlacement, lp_player, PointWithOffsetPolar(gv_playerPoint[lp_player], DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), gv_playerPoint[lp_player]), (AngleBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), gv_playerPoint[lp_player]) + 180.0)), gv_playerFacing[lp_player]);
            if ((UnitCheckAbilCmdState(UnitGroupLoopCurrent(), AbilityCommand("MorphtoVikingAir", 0), c_cmdStateIsAutoCast) == false)) {
                UnitIssueOrder(UnitLastCreated(), OrderSetAutoCast(AbilityCommand("FighterMode", 0), false), c_orderQueueReplace);
            }
            else {
            }
        }
        else if (auto54AEFA79_val == "BansheeSpawner") {
            UnitCreate(1, "Banshee", c_unitCreateIgnorePlacement, lp_player, PointWithOffsetPolar(gv_playerPoint[lp_player], DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), gv_playerPoint[lp_player]), (AngleBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), gv_playerPoint[lp_player]) + 180.0)), gv_playerFacing[lp_player]);
            if ((UnitCheckAbilCmdState(UnitGroupLoopCurrent(), AbilityCommand("BansheeCloak", 0), c_cmdStateIsAutoCast) == false)) {
                UnitIssueOrder(UnitLastCreated(), OrderSetAutoCast(AbilityCommand("BansheeCloak", 0), false), c_orderQueueReplace);
            }
            else {
            }
        }
        else if (auto54AEFA79_val == "RavenSpawner") {
            UnitCreate(1, "Raven", c_unitCreateIgnorePlacement, lp_player, PointWithOffsetPolar(gv_playerPoint[lp_player], DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), gv_playerPoint[lp_player]), (AngleBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), gv_playerPoint[lp_player]) + 180.0)), gv_playerFacing[lp_player]);
            if ((UnitCheckAbilCmdState(UnitGroupLoopCurrent(), AbilityCommand("BuildAutoTurret", 0), c_cmdStateIsAutoCast) == false)) {
                UnitIssueOrder(UnitLastCreated(), OrderSetAutoCast(AbilityCommand("BuildAutoTurret", 0), false), c_orderQueueReplace);
            }
            else {
            }
            if ((UnitCheckAbilCmdState(UnitGroupLoopCurrent(), AbilityCommand("PlacePointDefenseDrone", 0), c_cmdStateIsAutoCast) == false)) {
                UnitIssueOrder(UnitLastCreated(), OrderSetAutoCast(AbilityCommand("PlacePointDefenseDrone", 0), false), c_orderQueueReplace);
            }
            else {
            }
            if ((UnitCheckAbilCmdState(UnitGroupLoopCurrent(), AbilityCommand("SeekerMissile", 0), c_cmdStateIsAutoCast) == false)) {
                UnitIssueOrder(UnitLastCreated(), OrderSetAutoCast(AbilityCommand("SeekerMissile", 0), false), c_orderQueueReplace);
            }
            else {
            }
        }
        else if (auto54AEFA79_val == "SiegeTankSpawner") {
            UnitCreate(1, "SiegeTank", c_unitCreateIgnorePlacement, lp_player, PointWithOffsetPolar(gv_playerPoint[lp_player], DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), gv_playerPoint[lp_player]), (AngleBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), gv_playerPoint[lp_player]) + 180.0)), gv_playerFacing[lp_player]);
            if ((UnitCheckAbilCmdState(UnitGroupLoopCurrent(), AbilityCommand("SiegeDummy", 0), c_cmdStateIsAutoCast) == false)) {
                UnitIssueOrder(UnitLastCreated(), OrderSetAutoCast(AbilityCommand("SiegeMode", 0), false), c_orderQueueReplace);
            }
            else {
            }
        }
        else if (auto54AEFA79_val == "BattlecruiserSpawner") {
            UnitCreate(1, "Battlecruiser", c_unitCreateIgnorePlacement, lp_player, PointWithOffsetPolar(gv_playerPoint[lp_player], DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), gv_playerPoint[lp_player]), (AngleBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), gv_playerPoint[lp_player]) + 180.0)), gv_playerFacing[lp_player]);
            if ((UnitCheckAbilCmdState(UnitGroupLoopCurrent(), AbilityCommand("Yamato", 0), c_cmdStateIsAutoCast) == false)) {
                UnitIssueOrder(UnitLastCreated(), OrderSetAutoCast(AbilityCommand("Yamato", 0), false), c_orderQueueReplace);
            }
            else {
            }
        }
        else if (auto54AEFA79_val == "ThorSpawner") {
            if ((UnitHasBehavior(UnitGroupLoopCurrent(), "ThorSpecialMode") == false)) {
                UnitCreate(1, "Thor", c_unitCreateIgnorePlacement, lp_player, PointWithOffsetPolar(gv_playerPoint[lp_player], DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), gv_playerPoint[lp_player]), (AngleBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), gv_playerPoint[lp_player]) + 180.0)), gv_playerFacing[lp_player]);
            }
            else {
                UnitCreate(1, "ThorAP", c_unitCreateIgnorePlacement, lp_player, PointWithOffsetPolar(gv_playerPoint[lp_player], DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), gv_playerPoint[lp_player]), (AngleBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), gv_playerPoint[lp_player]) + 180.0)), gv_playerFacing[lp_player]);
            }
        }
        else if (auto54AEFA79_val == "WidowMineSpawner") {
            UnitCreate(1, "WidowMine", c_unitCreateIgnorePlacement, lp_player, PointWithOffsetPolar(gv_playerPoint[lp_player], DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), gv_playerPoint[lp_player]), (AngleBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), gv_playerPoint[lp_player]) + 180.0)), gv_playerFacing[lp_player]);
        }
        else {
        }
        UnitBehaviorAdd(UnitLastCreated(), "WaveUnit", UnitGroupLoopCurrent(), 1);
        UnitGroupAdd(lv_wave, UnitLastCreated());
        lv_target = PointWithOffsetPolar(UnitGetPosition(UnitLastCreated()), 95.0, UnitGetFacing(UnitGroupLoopCurrent()));
        UnitSetCustomValue(UnitLastCreated(), 0, PointGetX(lv_target));
        UnitSetCustomValue(UnitLastCreated(), 1, PointGetY(lv_target));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), lv_target), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1407)), c_orderQueueAddToEnd);
    }
    UnitGroupLoopEnd();
    UnitGroupAddUnitGroup(gv_playerWave[lp_player], lv_wave);
}

void gf_SpawnZerg (int lp_player) {
    string auto28E5AA0F_val;

    // Variable Declarations
    string lv_u;
    unitgroup lv_wave;
    point lv_target;

    // Variable Initialization
    lv_wave = UnitGroupEmpty();

    // Implementation
    UnitGroupLoopBegin(UnitGroupFilter(null, c_playerAny, gv_playerSpawners[lp_player], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitBehaviorRemove(UnitGroupLoopCurrent(), "Sell100", 1);
        lv_u = UnitGetType(UnitGroupLoopCurrent());
        auto28E5AA0F_val = lv_u;
        if (auto28E5AA0F_val == "ZerglingSpawner") {
            UnitCreate(1, "Zergling", c_unitCreateIgnorePlacement, lp_player, PointWithOffsetPolar(gv_playerPoint[lp_player], DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), gv_playerPoint[lp_player]), (AngleBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), gv_playerPoint[lp_player]) + 180.0)), gv_playerFacing[lp_player]);
        }
        else if (auto28E5AA0F_val == "BanelingSpawner") {
            UnitCreate(1, "Baneling", c_unitCreateIgnorePlacement, lp_player, PointWithOffsetPolar(gv_playerPoint[lp_player], DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), gv_playerPoint[lp_player]), (AngleBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), gv_playerPoint[lp_player]) + 180.0)), gv_playerFacing[lp_player]);
            if ((UnitHasBehavior(UnitGroupLoopCurrent(), "VolatileBurstBuilding") == true)) {
                UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("VolatileBurstBuilding", 0)), c_orderQueueReplace);
            }
            else {
            }
        }
        else if (auto28E5AA0F_val == "RoachSpawner") {
            if ((TechTreeUpgradeCount(lp_player, "DisableBurrowRoach", c_techCountCompleteOnly) == 0) && (UnitCheckAbilCmdState(UnitGroupLoopCurrent(), AbilityCommand("BurrowRoachDown", 0), c_cmdStateIsAutoCast) == true) && (TechTreeUpgradeCount(lp_player, "TunnelingClaws", c_techCountCompleteOnly) == 1)) {
                UnitCreate(1, "RoachBurrowed", c_unitCreateIgnorePlacement, lp_player, PointWithOffsetPolar(gv_playerPoint[lp_player], DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), gv_playerPoint[lp_player]), (AngleBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), gv_playerPoint[lp_player]) + 180.0)), gv_playerFacing[lp_player]);
            }
            else {
            }
            if ((TechTreeUpgradeCount(lp_player, "DisableBurrowRoach", c_techCountCompleteOnly) == 0) && (UnitCheckAbilCmdState(UnitGroupLoopCurrent(), AbilityCommand("BurrowRoachDown", 0), c_cmdStateIsAutoCast) == true) && (TechTreeUpgradeCount(lp_player, "TunnelingClaws", c_techCountCompleteOnly) == 0)) {
                UnitCreate(1, "Roach", c_unitCreateIgnorePlacement, lp_player, PointWithOffsetPolar(gv_playerPoint[lp_player], DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), gv_playerPoint[lp_player]), (AngleBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), gv_playerPoint[lp_player]) + 180.0)), gv_playerFacing[lp_player]);
            }
            else {
            }
            if ((TechTreeUpgradeCount(lp_player, "DisableBurrowRoach", c_techCountCompleteOnly) == 1) && (UnitCheckAbilCmdState(UnitGroupLoopCurrent(), AbilityCommand("BurrowRoachDown", 0), c_cmdStateIsAutoCast) == true)) {
                UnitCreate(1, "Roach", c_unitCreateIgnorePlacement, lp_player, PointWithOffsetPolar(gv_playerPoint[lp_player], DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), gv_playerPoint[lp_player]), (AngleBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), gv_playerPoint[lp_player]) + 180.0)), gv_playerFacing[lp_player]);
            }
            else {
            }
            if ((UnitCheckAbilCmdState(UnitGroupLoopCurrent(), AbilityCommand("BurrowRoachDown", 0), c_cmdStateIsAutoCast) == false)) {
                UnitCreate(1, "Roach", c_unitCreateIgnorePlacement, lp_player, PointWithOffsetPolar(gv_playerPoint[lp_player], DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), gv_playerPoint[lp_player]), (AngleBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), gv_playerPoint[lp_player]) + 180.0)), gv_playerFacing[lp_player]);
                UnitIssueOrder(UnitLastCreated(), OrderSetAutoCast(AbilityCommand("BurrowRoachDown", 0), false), c_orderQueueReplace);
            }
            else {
            }
        }
        else if (auto28E5AA0F_val == "QueenSpawner") {
            UnitCreate(1, "Queen", c_unitCreateIgnorePlacement, lp_player, PointWithOffsetPolar(gv_playerPoint[lp_player], DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), gv_playerPoint[lp_player]), (AngleBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), gv_playerPoint[lp_player]) + 180.0)), gv_playerFacing[lp_player]);
            if ((UnitCheckAbilCmdState(UnitGroupLoopCurrent(), AbilityCommand("Transfusion", 0), c_cmdStateIsAutoCast) == false)) {
                UnitIssueOrder(UnitLastCreated(), OrderSetAutoCast(AbilityCommand("Transfusion", 0), false), c_orderQueueReplace);
            }
            else {
            }
        }
        else if (auto28E5AA0F_val == "HydraliskSpawner") {
            UnitCreate(1, "Hydralisk", c_unitCreateIgnorePlacement, lp_player, PointWithOffsetPolar(gv_playerPoint[lp_player], DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), gv_playerPoint[lp_player]), (AngleBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), gv_playerPoint[lp_player]) + 180.0)), gv_playerFacing[lp_player]);
        }
        else if (auto28E5AA0F_val == "OverseerSpawner") {
            UnitCreate(1, "Overseer", c_unitCreateIgnorePlacement, lp_player, PointWithOffsetPolar(gv_playerPoint[lp_player], DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), gv_playerPoint[lp_player]), (AngleBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), gv_playerPoint[lp_player]) + 180.0)), gv_playerFacing[lp_player]);
        }
        else if (auto28E5AA0F_val == "MutaliskSpawner") {
            UnitCreate(1, "Mutalisk", c_unitCreateIgnorePlacement, lp_player, PointWithOffsetPolar(gv_playerPoint[lp_player], DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), gv_playerPoint[lp_player]), (AngleBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), gv_playerPoint[lp_player]) + 180.0)), gv_playerFacing[lp_player]);
        }
        else if (auto28E5AA0F_val == "CorruptorSpawner") {
            UnitCreate(1, "Corruptor", c_unitCreateIgnorePlacement, lp_player, PointWithOffsetPolar(gv_playerPoint[lp_player], DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), gv_playerPoint[lp_player]), (AngleBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), gv_playerPoint[lp_player]) + 180.0)), gv_playerFacing[lp_player]);
            if ((UnitCheckAbilCmdState(UnitGroupLoopCurrent(), AbilityCommand("Corruption", 0), c_cmdStateIsAutoCast) == false)) {
                UnitIssueOrder(UnitLastCreated(), OrderSetAutoCast(AbilityCommand("Corruption", 0), false), c_orderQueueReplace);
            }
            else {
            }
        }
        else if (auto28E5AA0F_val == "InfestorSpawner") {
            UnitCreate(1, "Infestor", c_unitCreateIgnorePlacement, lp_player, PointWithOffsetPolar(gv_playerPoint[lp_player], DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), gv_playerPoint[lp_player]), (AngleBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), gv_playerPoint[lp_player]) + 180.0)), gv_playerFacing[lp_player]);
            if ((UnitCheckAbilCmdState(UnitGroupLoopCurrent(), AbilityCommand("FungalGrowth", 0), c_cmdStateIsAutoCast) == false)) {
                UnitIssueOrder(UnitLastCreated(), OrderSetAutoCast(AbilityCommand("FungalGrowth", 0), false), c_orderQueueReplace);
            }
            else {
            }
            if ((UnitCheckAbilCmdState(UnitGroupLoopCurrent(), AbilityCommand("NeuralParasite", 0), c_cmdStateIsAutoCast) == false)) {
                UnitIssueOrder(UnitLastCreated(), OrderSetAutoCast(AbilityCommand("NeuralParasite", 0), false), c_orderQueueReplace);
            }
            else {
            }
            if ((UnitCheckAbilCmdState(UnitGroupLoopCurrent(), AbilityCommand("InfestedTerrans", 0), c_cmdStateIsAutoCast) == false)) {
                UnitIssueOrder(UnitLastCreated(), OrderSetAutoCast(AbilityCommand("InfestedTerrans", 0), false), c_orderQueueReplace);
            }
            else {
            }
        }
        else if (auto28E5AA0F_val == "BroodLordSpawner") {
            UnitCreate(1, "BroodLord", c_unitCreateIgnorePlacement, lp_player, PointWithOffsetPolar(gv_playerPoint[lp_player], DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), gv_playerPoint[lp_player]), (AngleBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), gv_playerPoint[lp_player]) + 180.0)), gv_playerFacing[lp_player]);
        }
        else if (auto28E5AA0F_val == "UltraliskSpawner") {
            UnitCreate(1, "Ultralisk", c_unitCreateIgnorePlacement, lp_player, PointWithOffsetPolar(gv_playerPoint[lp_player], DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), gv_playerPoint[lp_player]), (AngleBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), gv_playerPoint[lp_player]) + 180.0)), gv_playerFacing[lp_player]);
        }
        else if (auto28E5AA0F_val == "ViperSpawner") {
            UnitCreate(1, "Viper", c_unitCreateIgnorePlacement, lp_player, PointWithOffsetPolar(gv_playerPoint[lp_player], DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), gv_playerPoint[lp_player]), (AngleBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), gv_playerPoint[lp_player]) + 180.0)), gv_playerFacing[lp_player]);
            if ((UnitCheckAbilCmdState(UnitGroupLoopCurrent(), AbilityCommand("Yoink", 0), c_cmdStateIsAutoCast) == false)) {
                UnitIssueOrder(UnitLastCreated(), OrderSetAutoCast(AbilityCommand("Yoink", 0), false), c_orderQueueReplace);
            }
            else {
            }
            if ((UnitCheckAbilCmdState(UnitGroupLoopCurrent(), AbilityCommand("BlindingCloud", 0), c_cmdStateIsAutoCast) == false)) {
                UnitIssueOrder(UnitLastCreated(), OrderSetAutoCast(AbilityCommand("BlindingCloud", 0), false), c_orderQueueReplace);
            }
            else {
            }
        }
        else if (auto28E5AA0F_val == "SwarmHostSpawner") {
            UnitCreate(1, "SwarmHostMP", c_unitCreateIgnorePlacement, lp_player, PointWithOffsetPolar(gv_playerPoint[lp_player], DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), gv_playerPoint[lp_player]), (AngleBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), gv_playerPoint[lp_player]) + 180.0)), gv_playerFacing[lp_player]);
        }
        else {
        }
        UnitBehaviorAdd(UnitLastCreated(), "WaveUnit", UnitGroupLoopCurrent(), 1);
        UnitGroupAdd(lv_wave, UnitLastCreated());
        lv_target = PointWithOffsetPolar(UnitGetPosition(UnitLastCreated()), 95.0, UnitGetFacing(UnitGroupLoopCurrent()));
        UnitSetCustomValue(UnitLastCreated(), 0, PointGetX(lv_target));
        UnitSetCustomValue(UnitLastCreated(), 1, PointGetY(lv_target));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), lv_target), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1407)), c_orderQueueAddToEnd);
    }
    UnitGroupLoopEnd();
    UnitGroupAddUnitGroup(gv_playerWave[lp_player], lv_wave);
}

void gf_CreateStartingUnits (int lp_player, point lp_point) {
    playergroup autoAB186F21_g;
    int autoAB186F21_p;
    int autoEDD4FC9D_val;

    // Variable Declarations
    int lv_p;

    // Variable Initialization

    // Implementation
    PlayerModifyPropertyInt(lp_player, c_playerPropMinerals, c_playerPropOperSetTo, 400);
    if ((GameIsTestMap(false) == true)) {
        PlayerModifyPropertyInt(lp_player, c_playerPropMinerals, c_playerPropOperSetTo, 12000);
        CatalogFieldValueSet(c_gameCatalogEffect, "PassiveIncome", "Resources[" + IntToString(0) + "]", lp_player, "0");
        VisRevealArea(lp_player, RegionEntireMap(), 0.0, false);
    }
    else {
    }
    autoAB186F21_g = PlayerGroupAlliance(c_playerGroupAlly, lp_player); 
    autoAB186F21_p = 1;
    for ( ; autoAB186F21_p <= PlayerGroupCount(autoAB186F21_g) ; autoAB186F21_p += BoolToInt(lv_p == PlayerGroupPlayer(autoAB186F21_g, autoAB186F21_p)) ) {
        lv_p = PlayerGroupPlayer(autoAB186F21_g, autoAB186F21_p);
        PlayerSetAlliance(lp_player, c_allianceIdTrade, lv_p, false);
    }
    CameraPan(lp_player, PointWithOffset(lp_point, 0.0, -1.63), 0.0, -1, 10.0, false);
    UnitSelect(UnitGroupClosestToPoint(UnitGroupFilterPlayer(gv_reinforcementGroup, lp_player, 0), lp_point), lp_player, true);
    autoEDD4FC9D_val = gv_playerRace[lp_player];
    if (autoEDD4FC9D_val == 0) {
        UnitCreate(1, "HeroSelectionProtoss", c_unitCreateIgnorePlacement, lp_player, lp_point, gv_playerFacing[lp_player]);
    }
    else if (autoEDD4FC9D_val == 1) {
        UnitCreate(1, "HeroSelectionTerran", c_unitCreateIgnorePlacement, lp_player, lp_point, gv_playerFacing[lp_player]);
    }
    else if (autoEDD4FC9D_val == 2) {
        UnitCreate(1, "HeroSelectionZerg", c_unitCreateIgnorePlacement, lp_player, lp_point, gv_playerFacing[lp_player]);
    }
    else {
    }
    UnitControlGroupAddUnit(lp_player, 1, UnitLastCreated());
}

void gf_UpdateStatUI (int lp_p) {
    // Implementation
    if ((gv_avatarExperienceCurrentLevel[lp_p] < gv_levelCap)) {
        libNtve_gf_SetDialogItemText(gv_avatarExperienceText, (StringExternal("Param/Value/2EC628B2") + IntToText(gv_avatarExperienceCurrent[lp_p]) + StringExternal("Param/Value/F9AF6156") + IntToText(gv_databaseExperienceNeeded[gv_avatarExperienceCurrentLevel[lp_p]])), PlayerGroupSingle(lp_p));
        DialogControlSetSize(gv_avatarBar, PlayerGroupSingle(lp_p), libNtve_gf_ArithmeticIntClamp(FixedToInt((276.0 * (IntToFixed((gv_avatarExperienceCurrent[lp_p] / 100)) / IntToFixed((gv_databaseExperienceNeeded[gv_avatarExperienceCurrentLevel[lp_p]] / 100))))), 1, 276), 28);
    }
    else {
        gv_sTATExperience[lp_p] = libNtve_gf_ArithmeticIntClamp(gv_sTATExperience[lp_p], 0, gv_experienceCap);
        libNtve_gf_SetDialogItemText(gv_avatarExperienceText, StringExternal("Param/Value/F3C4D2C8"), PlayerGroupSingle(lp_p));
        DialogControlSetSize(gv_avatarBar, PlayerGroupSingle(lp_p), 276, 28);
        libNtve_gf_SetDialogItemText(gv_avatarExperienceLevel, (StringExternal("Param/Value/42BE3FDF") + IntToText(gv_avatarExperienceCurrentLevel[lp_p])), PlayerGroupSingle(lp_p));
    }
    if ((gv_avatarExperienceCurrentLevel[lp_p] < gv_levelCap) && (gv_avatarExperienceCurrent[lp_p] >= gv_databaseExperienceNeeded[gv_avatarExperienceCurrentLevel[lp_p]])) {
        gv_avatarExperienceCurrent[lp_p] -= gv_databaseExperienceNeeded[gv_avatarExperienceCurrentLevel[lp_p]];
        gv_avatarExperienceCurrentLevel[lp_p] += 1;
        libNtve_gf_SetDialogItemText(gv_avatarExperienceLevel, (StringExternal("Param/Value/B34B586B") + IntToText(gv_avatarExperienceCurrentLevel[lp_p])), PlayerGroupSingle(lp_p));
        gf_UpdateStatUI(lp_p);
        if ((GameGetMissionTime() > 1.0)) {
            gf_UpdateTalents(lp_p);
            gv_levelupAnimation = lp_p;
            TriggerExecute(gt_LevelupAnimation, true, false);
        }
        else {
        }
    }
    else {
    }
}

void gf_UpdateExperience (int lp_p, int lp_xp) {
    // Implementation
    gv_avatarExperienceCurrent[lp_p] += lp_xp;
    gv_experienceGained[lp_p] += lp_xp;
    gv_sTATExperience[lp_p] = libNtve_gf_ArithmeticIntClamp((gv_sTATExperience[lp_p] + gv_experienceGained[lp_p]), 0, gv_experienceCap);
    gv_experienceGained[lp_p] = 0;
    BankValueSetFromInt(gv_sTATBank[lp_p], "IIlIlIIlllIIII", "IllIIIIIlIIIII", gv_sTATExperience[lp_p]);
    BankSave(gv_sTATBank[lp_p]);
    if ((gv_avatarExperienceCurrentLevel[lp_p] < gv_levelCap)) {
        libNtve_gf_SetDialogItemText(gv_avatarExperienceText, (StringExternal("Param/Value/A4DAD5A5") + IntToText(gv_avatarExperienceCurrent[lp_p]) + StringExternal("Param/Value/97261302") + IntToText(gv_databaseExperienceNeeded[gv_avatarExperienceCurrentLevel[lp_p]])), PlayerGroupSingle(lp_p));
        DialogControlSetSize(gv_avatarBar, PlayerGroupSingle(lp_p), libNtve_gf_ArithmeticIntClamp(FixedToInt((276.0 * (IntToFixed((gv_avatarExperienceCurrent[lp_p] / 100)) / IntToFixed((gv_databaseExperienceNeeded[gv_avatarExperienceCurrentLevel[lp_p]] / 100))))), 1, 276), 28);
    }
    else {
        gv_sTATExperience[lp_p] = libNtve_gf_ArithmeticIntClamp(gv_sTATExperience[lp_p], 0, gv_experienceCap);
        libNtve_gf_SetDialogItemText(gv_avatarExperienceText, StringExternal("Param/Value/76315209"), PlayerGroupSingle(lp_p));
        DialogControlSetSize(gv_avatarBar, PlayerGroupSingle(lp_p), 276, 28);
        libNtve_gf_SetDialogItemText(gv_avatarExperienceLevel, (StringExternal("Param/Value/00E6D733") + IntToText(gv_avatarExperienceCurrentLevel[lp_p])), PlayerGroupSingle(lp_p));
    }
    if ((gv_avatarExperienceCurrentLevel[lp_p] < gv_levelCap) && (gv_avatarExperienceCurrent[lp_p] >= gv_databaseExperienceNeeded[gv_avatarExperienceCurrentLevel[lp_p]])) {
        gf_UpdateStatUI(lp_p);
    }
    else {
    }
}

void gf_UpdateTalents (int lp_player) {
    int autoDF13C000_ae;
    int autoDF13C000_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    autoDF13C000_ae = 9;
    autoDF13C000_ai = 1;
    lv_i = 1;
    for ( ; ( (autoDF13C000_ai >= 0 && lv_i <= autoDF13C000_ae) || (autoDF13C000_ai <= 0 && lv_i >= autoDF13C000_ae) ) ; lv_i += autoDF13C000_ai ) {
        if ((gv_avatarExperienceCurrentLevel[lp_player] >= gv_talentsRequirement[lv_i])) {
            DialogControlSetEnabled(gv_talentsIcon[lv_i], PlayerGroupSingle(lp_player), true);
            DialogControlSetEnabled(gv_talentsButton[lv_i], PlayerGroupSingle(lp_player), true);
        }
        else {
            DialogControlSetEnabled(gv_talentsIcon[lv_i], PlayerGroupSingle(lp_player), false);
            DialogControlSetEnabled(gv_talentsButton[lv_i], PlayerGroupSingle(lp_player), false);
        }
    }
}

void gf_GameOver (playergroup lp_winners, playergroup lp_losers) {
    int init_i;

    int auto975BE2CA_ae;
    int auto975BE2CA_ai;
    string auto3D351B1C_val;
    string auto9B8756AC_val;
    int auto5ED60708_ae;
    int auto5ED60708_ai;
    int auto95BCF95F_ae;
    int auto95BCF95F_ai;
    string auto5EB0CD14_val;
    string autoA44B516C_val;
    int auto041EAE3A_ae;
    int auto041EAE3A_ai;
    int auto0BACCF4D_ae;
    int auto0BACCF4D_ai;
    int autoCB8EE1E7_ae;
    int autoCB8EE1E7_ai;

    // Variable Declarations
    int lv_i;
    int lv_x;
    int lv_y;
    int[5] lv_dialogItemSet1;
    int[5] lv_dialogItemSet2;

    // Variable Initialization
    lv_x = 300;
    lv_y = 100;
    for (init_i = 0; init_i <= 4; init_i += 1) {
        lv_dialogItemSet1[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        lv_dialogItemSet2[init_i] = c_invalidDialogControlId;
    }

    // Implementation
    gv_gameOver = true;
    PingDestroyAll();
    GameSetMissionTimePaused(true);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_MakeUnitUncommandable(UnitGroupLoopCurrent(), true);
        libNtve_gf_SendActorMessageToUnit(UnitGroupLoopCurrent(), "AnimSetPausedAll");
    }
    UnitGroupLoopEnd();
    GameSetGlobalTimeScale(0.0);
    UnitPauseAll(true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeControlGroupPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeInventoryPanel, false);
    SoundPlay(SoundLink("UI_MissionComplete", -1), lp_winners, 100.0, 0.0);
    SoundPlay(SoundLink("UI_MissionFailed", -1), lp_losers, 100.0, 0.0);
    PlayerGroupLoopBegin(PlayerGroupActive());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        UIAlertClear(PlayerGroupLoopCurrent());
        gf_UpdateExperience(PlayerGroupLoopCurrent(), FixedToInt(GameGetMissionTime()));
        CameraPan(PlayerGroupLoopCurrent(), EventPlayerEffectUsedPoint(c_effectLocationSourceUnit), 0.5, -1, 10.0, false);
        TechTreeAbilityAllow(PlayerGroupLoopCurrent(), AbilityCommand("Reviving", 0), false);
        TechTreeAbilityAllow(PlayerGroupLoopCurrent(), AbilityCommand("Sell100", 0), false);
        TechTreeAbilityAllow(PlayerGroupLoopCurrent(), AbilityCommand("Sell70", 0), false);
        TechTreeAbilityAllow(PlayerGroupLoopCurrent(), AbilityCommand("Sell60", 0), false);
        TechTreeAbilityAllow(PlayerGroupLoopCurrent(), AbilityCommand("Sell50", 0), false);
        TechTreeAbilityAllow(PlayerGroupLoopCurrent(), AbilityCommand("BurrowRoachDown", 1), false);
    }
    PlayerGroupLoopEnd();
    Wait(1.5, c_timeGame);
    DialogCreate(600, 600, c_anchorBottom, 0, 25, true);
    gv_gameOverDialog[0] = DialogLastCreated();
    auto975BE2CA_ae = 4;
    auto975BE2CA_ai = 1;
    lv_i = 0;
    for ( ; ( (auto975BE2CA_ai >= 0 && lv_i <= auto975BE2CA_ae) || (auto975BE2CA_ai <= 0 && lv_i >= auto975BE2CA_ae) ) ; lv_i += auto975BE2CA_ai ) {
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypePortrait);
        lv_dialogItemSet1[lv_i] = DialogControlLastCreated();
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 0);
        libNtve_gf_SetDialogItemRenderType(DialogControlLastCreated(), c_triggerRenderTypeLDR, PlayerGroupAll());
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 600, 600);
        libNtve_gf_SetDialogItemModel(DialogControlLastCreated(), "ModelVictory", PlayerGroupAll());
        libNtve_gf_SetDialogItemAnimation(DialogControlLastCreated(), "Birth", PlayerGroupAll());
        libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid03", PlayerGroupAll());
        libNtve_gf_SetDialogItemLight(DialogControlLastCreated(), "MarSara", PlayerGroupAll());
        libNtve_gf_SetDialogItemBorderVisible(DialogControlLastCreated(), false, PlayerGroupAll());
        libNtve_gf_SetDialogItemBackgroundVisible(DialogControlLastCreated(), false, PlayerGroupAll());
        libNtve_gf_SetDialogItemUseTransition(DialogControlLastCreated(), false, PlayerGroupAll());
        libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), false, PlayerGroupAll());
    }
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), lp_winners, true);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_x - 10), (lv_y - 10), c_anchorCenter, 0, 0, StringExternal("Param/Value/E2198452"), "Assets\\Textures\\ui_tooltip_frame_protoss.dds", c_triggerImageTypeBorder, true, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.25, 0.0);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_x - 30), (lv_y - 30), c_anchorCenter, 0, 0, StringExternal("Param/Value/60F7A009"), StringExternal("Param/Value/D698216D"), "");
    libNtve_gf_SetDialogItemHotkey(DialogControlLastCreated(), c_hotkeyCinematicSkip, lp_winners);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.25, 0.0);
    gv_gameOverButton[0] = DialogControlLastCreated();
    PlayerGroupLoopBegin(lp_winners);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        auto3D351B1C_val = PlayerRace(PlayerGroupLoopCurrent());
        if (auto3D351B1C_val == "Prot") {
            libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_battlenet_glue_navbuttons_blue_normalpressed.dds", PlayerGroupSingle(PlayerGroupLoopCurrent()));
            libNtve_gf_SetDialogItemImage2(DialogControlLastCreated(), "Assets\\Textures\\ui_battlenet_glue_navbuttons_blue_normaloverpressedover.dds", PlayerGroupSingle(PlayerGroupLoopCurrent()));
            libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeEndCap, PlayerGroupAll());
        }
        else if (auto3D351B1C_val == "Terr") {
            libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_battlenet_glue_navbuttons_green_normalpressed.dds", PlayerGroupSingle(PlayerGroupLoopCurrent()));
            libNtve_gf_SetDialogItemImage2(DialogControlLastCreated(), "Assets\\Textures\\ui_battlenet_glue_navbuttons_green_normaloverpressedover.dds", PlayerGroupSingle(PlayerGroupLoopCurrent()));
            libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeEndCap, PlayerGroupAll());
        }
        else if (auto3D351B1C_val == "Zerg") {
            libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_battlenet_glue_navbuttons_orange_normalpressed.dds", PlayerGroupSingle(PlayerGroupLoopCurrent()));
            libNtve_gf_SetDialogItemImage2(DialogControlLastCreated(), "Assets\\Textures\\ui_battlenet_glue_navbuttons_orange_normaloverpressedover.dds", PlayerGroupSingle(PlayerGroupLoopCurrent()));
            libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeEndCap, PlayerGroupAll());
        }
        else {
        }
    }
    PlayerGroupLoopEnd();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.25, 0.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_x, lv_y, c_anchorCenter, 0, 0, StringExternal("Param/Value/8E846C5E"), "Assets\\Textures\\ui_battlenet_challenge_frame_achievement.dds", c_triggerImageTypeHorizontalBorder, true, Color(100,100,100), c_triggerBlendModeNormal);
    PlayerGroupLoopBegin(lp_winners);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        auto9B8756AC_val = PlayerRace(PlayerGroupLoopCurrent());
        if (auto9B8756AC_val == "Prot") {
            libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_battlenet_challenge_frame_achievement.dds", PlayerGroupSingle(PlayerGroupLoopCurrent()));
        }
        else if (auto9B8756AC_val == "Terr") {
            libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "ui_battlenet_challenge_frame_achievement_terr.dds", PlayerGroupSingle(PlayerGroupLoopCurrent()));
        }
        else if (auto9B8756AC_val == "Zerg") {
            libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "ui_battlenet_challenge_frame_achievement_zerg.dds", PlayerGroupSingle(PlayerGroupLoopCurrent()));
        }
        else {
        }
    }
    PlayerGroupLoopEnd();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.25, 0.0);
    auto5ED60708_ae = 4;
    auto5ED60708_ai = 1;
    lv_i = 0;
    for ( ; ( (auto5ED60708_ai >= 0 && lv_i <= auto5ED60708_ae) || (auto5ED60708_ai <= 0 && lv_i >= auto5ED60708_ae) ) ; lv_i += auto5ED60708_ai ) {
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypePortrait);
        lv_dialogItemSet1[lv_i] = DialogControlLastCreated();
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 0);
        libNtve_gf_SetDialogItemRenderType(DialogControlLastCreated(), c_triggerRenderTypeLDR, PlayerGroupAll());
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 600, 600);
        libNtve_gf_SetDialogItemModel(DialogControlLastCreated(), "ModelVictory", PlayerGroupAll());
        libNtve_gf_SetDialogItemAnimation(DialogControlLastCreated(), "Birth", PlayerGroupAll());
        libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid03", PlayerGroupAll());
        libNtve_gf_SetDialogItemLight(DialogControlLastCreated(), "MarSara", PlayerGroupAll());
        libNtve_gf_SetDialogItemBorderVisible(DialogControlLastCreated(), false, PlayerGroupAll());
        libNtve_gf_SetDialogItemBackgroundVisible(DialogControlLastCreated(), false, PlayerGroupAll());
        libNtve_gf_SetDialogItemUseTransition(DialogControlLastCreated(), false, PlayerGroupAll());
        libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), false, PlayerGroupAll());
    }
    DialogCreate(600, 600, c_anchorBottom, 0, 25, true);
    gv_gameOverDialog[1] = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), lp_losers, true);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_x - 10), (lv_y - 10), c_anchorCenter, 0, 0, StringExternal("Param/Value/226A4147"), "Assets\\Textures\\ui_tooltip_frame_zerg.dds", c_triggerImageTypeBorder, true, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.25, 0.0);
    auto95BCF95F_ae = 4;
    auto95BCF95F_ai = 1;
    lv_i = 0;
    for ( ; ( (auto95BCF95F_ai >= 0 && lv_i <= auto95BCF95F_ae) || (auto95BCF95F_ai <= 0 && lv_i >= auto95BCF95F_ae) ) ; lv_i += auto95BCF95F_ai ) {
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypePortrait);
        lv_dialogItemSet2[lv_i] = DialogControlLastCreated();
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 0);
        libNtve_gf_SetDialogItemRenderType(DialogControlLastCreated(), c_triggerRenderTypeLDR, PlayerGroupAll());
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), (lv_x - 42), (lv_y - 36));
        libNtve_gf_SetDialogItemModel(DialogControlLastCreated(), "ModelDefeat", PlayerGroupAll());
        libNtve_gf_SetDialogItemAnimation(DialogControlLastCreated(), "Birth", PlayerGroupAll());
        libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid03", PlayerGroupAll());
        libNtve_gf_SetDialogItemLight(DialogControlLastCreated(), "MarSara", PlayerGroupAll());
        libNtve_gf_SetDialogItemBorderVisible(DialogControlLastCreated(), false, PlayerGroupAll());
        libNtve_gf_SetDialogItemBackgroundVisible(DialogControlLastCreated(), false, PlayerGroupAll());
        libNtve_gf_SetDialogItemUseTransition(DialogControlLastCreated(), false, PlayerGroupAll());
        libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), false, PlayerGroupAll());
        libNtve_gf_SetDialogItemAnimation(lv_dialogItemSet2[lv_i], "Death", PlayerGroupAll());
    }
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_x - 30), (lv_y - 30), c_anchorCenter, 0, 0, StringExternal("Param/Value/1CEE9672"), StringExternal("Param/Value/9C3071C3"), "");
    libNtve_gf_SetDialogItemHotkey(DialogControlLastCreated(), c_hotkeyCinematicSkip, lp_losers);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 3.0, 0.0);
    gv_gameOverButton[1] = DialogControlLastCreated();
    PlayerGroupLoopBegin(lp_losers);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        auto5EB0CD14_val = PlayerRace(PlayerGroupLoopCurrent());
        if (auto5EB0CD14_val == "Prot") {
            libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_battlenet_glue_navbuttons_blue_normalpressed.dds", PlayerGroupSingle(PlayerGroupLoopCurrent()));
            libNtve_gf_SetDialogItemImage2(DialogControlLastCreated(), "Assets\\Textures\\ui_battlenet_glue_navbuttons_blue_normaloverpressedover.dds", PlayerGroupSingle(PlayerGroupLoopCurrent()));
            libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeEndCap, PlayerGroupAll());
        }
        else if (auto5EB0CD14_val == "Terr") {
            libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_battlenet_glue_navbuttons_green_normalpressed.dds", PlayerGroupSingle(PlayerGroupLoopCurrent()));
            libNtve_gf_SetDialogItemImage2(DialogControlLastCreated(), "Assets\\Textures\\ui_battlenet_glue_navbuttons_green_normaloverpressedover.dds", PlayerGroupSingle(PlayerGroupLoopCurrent()));
            libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeEndCap, PlayerGroupAll());
        }
        else if (auto5EB0CD14_val == "Zerg") {
            libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_battlenet_glue_navbuttons_orange_normalpressed.dds", PlayerGroupSingle(PlayerGroupLoopCurrent()));
            libNtve_gf_SetDialogItemImage2(DialogControlLastCreated(), "Assets\\Textures\\ui_battlenet_glue_navbuttons_orange_normaloverpressedover.dds", PlayerGroupSingle(PlayerGroupLoopCurrent()));
            libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeEndCap, PlayerGroupAll());
        }
        else {
        }
    }
    PlayerGroupLoopEnd();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.25, 0.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_x, lv_y, c_anchorCenter, 0, 0, StringExternal("Param/Value/0BF217A6"), "Assets\\Textures\\ui_battlenet_challenge_frame_achievement.dds", c_triggerImageTypeHorizontalBorder, true, Color(100,100,100), c_triggerBlendModeNormal);
    PlayerGroupLoopBegin(lp_losers);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        autoA44B516C_val = PlayerRace(PlayerGroupLoopCurrent());
        if (autoA44B516C_val == "Prot") {
            libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_battlenet_challenge_frame_achievement.dds", PlayerGroupSingle(PlayerGroupLoopCurrent()));
        }
        else if (autoA44B516C_val == "Terr") {
            libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "ui_battlenet_challenge_frame_achievement_terr.dds", PlayerGroupSingle(PlayerGroupLoopCurrent()));
        }
        else if (autoA44B516C_val == "Zerg") {
            libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "ui_battlenet_challenge_frame_achievement_zerg.dds", PlayerGroupSingle(PlayerGroupLoopCurrent()));
        }
        else {
        }
    }
    PlayerGroupLoopEnd();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.25, 0.0);
    Wait(0.5, c_timeGame);
    auto041EAE3A_ae = 4;
    auto041EAE3A_ai = 1;
    lv_i = 0;
    for ( ; ( (auto041EAE3A_ai >= 0 && lv_i <= auto041EAE3A_ae) || (auto041EAE3A_ai <= 0 && lv_i >= auto041EAE3A_ae) ) ; lv_i += auto041EAE3A_ai ) {
        libNtve_gf_SetDialogItemAnimation(lv_dialogItemSet1[lv_i], "Death", PlayerGroupAll());
    }
    Wait(2.0, c_timeGame);
    auto0BACCF4D_ae = 4;
    auto0BACCF4D_ai = 1;
    lv_i = 0;
    for ( ; ( (auto0BACCF4D_ai >= 0 && lv_i <= auto0BACCF4D_ae) || (auto0BACCF4D_ai <= 0 && lv_i >= auto0BACCF4D_ae) ) ; lv_i += auto0BACCF4D_ai ) {
        DialogControlDestroy(lv_dialogItemSet1[lv_i]);
    }
    Wait(7.5, c_timeGame);
    autoCB8EE1E7_ae = 4;
    autoCB8EE1E7_ai = 1;
    lv_i = 0;
    for ( ; ( (autoCB8EE1E7_ai >= 0 && lv_i <= autoCB8EE1E7_ae) || (autoCB8EE1E7_ai <= 0 && lv_i >= autoCB8EE1E7_ae) ) ; lv_i += autoCB8EE1E7_ai ) {
        DialogControlDestroy(lv_dialogItemSet2[lv_i]);
    }
}

void gf_SpawnZergBasic (point lp_point, fixed lp_cost, point lp_target1, point lp_target2, point lp_target3, int lp_player, fixed lp_size, fixed lp_angle) {
    int auto497BFDE7_n;
    int auto497BFDE7_i;
    int autoBCCDC504_n;
    int autoBCCDC504_i;
    int autoD1D984D2_n;
    int autoD1D984D2_i;
    int autoCAA073F4_n;
    int autoCAA073F4_i;
    int auto2E9A8447_n;
    int auto2E9A8447_i;
    int auto1918E701_n;
    int auto1918E701_i;
    int auto9F1DF4C9_n;
    int auto9F1DF4C9_i;
    int auto0E0347D6_n;
    int auto0E0347D6_i;
    int autoD590FDA8_n;
    int autoD590FDA8_i;
    int autoA0E9C373_n;
    int autoA0E9C373_i;

    // Variable Declarations
    int lv_waveCost;
    point lv_target;
    bool lv_switch;

    // Variable Initialization
    lv_waveCost = FixedToInt(lp_cost);

    // Implementation
    auto497BFDE7_n = 6;
    for (auto497BFDE7_i = 1; auto497BFDE7_i <= auto497BFDE7_n; auto497BFDE7_i += 1) {
        if ((lv_switch == false) && (lv_waveCost >= UnitTypeGetCost("ZerglingSpawner", c_unitCostMinerals))) {
            lv_waveCost -= UnitTypeGetCost("ZerglingSpawner", c_unitCostMinerals);
            UnitCreate(1, "Zergling", c_unitCreateIgnorePlacement, lp_player, RegionRandomPoint(RegionCircle(lp_point, lp_size)), lp_angle);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), lp_target3), c_orderQueueAddToEnd);
            lv_target = PointWithOffsetPolar(lp_target2, DistanceBetweenPoints(UnitGetPosition(UnitLastCreated()), lp_point), (AngleBetweenPoints(UnitGetPosition(UnitLastCreated()), lp_point) + 180.0));
            UnitBehaviorAdd(UnitLastCreated(), "WaveUnitSpeed", UnitLastCreated(), 1);
            UnitBehaviorAdd(UnitLastCreated(), "AIUnit", UnitLastCreated(), 1);
            UnitSetCustomValue(UnitLastCreated(), 0, PointGetX(lv_target));
            UnitSetCustomValue(UnitLastCreated(), 1, PointGetY(lv_target));
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), lp_target1), c_orderQueueReplace);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), lv_target), c_orderQueueAddToEnd);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), lp_target3), c_orderQueueAddToEnd);
        }
        else {
            lv_switch = true;
            break;
        }
    }
    autoBCCDC504_n = 3;
    for (autoBCCDC504_i = 1; autoBCCDC504_i <= autoBCCDC504_n; autoBCCDC504_i += 1) {
        if ((lv_switch == false) && (lv_waveCost >= UnitTypeGetCost("RoachSpawner", c_unitCostMinerals))) {
            lv_waveCost -= UnitTypeGetCost("RoachSpawner", c_unitCostMinerals);
            UnitCreate(1, "Roach", c_unitCreateIgnorePlacement, lp_player, RegionRandomPoint(RegionCircle(lp_point, lp_size)), lp_angle);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), lp_target3), c_orderQueueAddToEnd);
            lv_target = PointWithOffsetPolar(lp_target2, DistanceBetweenPoints(UnitGetPosition(UnitLastCreated()), lp_point), (AngleBetweenPoints(UnitGetPosition(UnitLastCreated()), lp_point) + 180.0));
            UnitBehaviorAdd(UnitLastCreated(), "WaveUnitSpeed", UnitLastCreated(), 1);
            UnitBehaviorAdd(UnitLastCreated(), "AIUnit", UnitLastCreated(), 1);
            UnitSetCustomValue(UnitLastCreated(), 0, PointGetX(lv_target));
            UnitSetCustomValue(UnitLastCreated(), 1, PointGetY(lv_target));
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), lv_target), c_orderQueueReplace);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), lp_target3), c_orderQueueAddToEnd);
        }
        else {
            lv_switch = true;
            break;
        }
    }
    autoD1D984D2_n = 3;
    for (autoD1D984D2_i = 1; autoD1D984D2_i <= autoD1D984D2_n; autoD1D984D2_i += 1) {
        if ((lv_switch == false) && (lv_waveCost >= UnitTypeGetCost("HydraliskSpawner", c_unitCostMinerals))) {
            lv_waveCost -= UnitTypeGetCost("HydraliskSpawner", c_unitCostMinerals);
            UnitCreate(1, "Hydralisk", c_unitCreateIgnorePlacement, lp_player, RegionRandomPoint(RegionCircle(lp_point, lp_size)), lp_angle);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), lp_target3), c_orderQueueAddToEnd);
            lv_target = PointWithOffsetPolar(lp_target2, DistanceBetweenPoints(UnitGetPosition(UnitLastCreated()), lp_point), (AngleBetweenPoints(UnitGetPosition(UnitLastCreated()), lp_point) + 180.0));
            UnitBehaviorAdd(UnitLastCreated(), "WaveUnitSpeed", UnitLastCreated(), 1);
            UnitBehaviorAdd(UnitLastCreated(), "AIUnit", UnitLastCreated(), 1);
            UnitSetCustomValue(UnitLastCreated(), 0, PointGetX(lv_target));
            UnitSetCustomValue(UnitLastCreated(), 1, PointGetY(lv_target));
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), lv_target), c_orderQueueReplace);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), lp_target3), c_orderQueueAddToEnd);
        }
        else {
            lv_switch = true;
            break;
        }
    }
    autoCAA073F4_n = 1;
    for (autoCAA073F4_i = 1; autoCAA073F4_i <= autoCAA073F4_n; autoCAA073F4_i += 1) {
        if ((lv_switch == false) && (lv_waveCost >= UnitTypeGetCost("InfestorSpawner", c_unitCostMinerals))) {
            lv_waveCost -= UnitTypeGetCost("InfestorSpawner", c_unitCostMinerals);
            UnitCreate(1, "Infestor", c_unitCreateIgnorePlacement, lp_player, RegionRandomPoint(RegionCircle(lp_point, lp_size)), lp_angle);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), lp_target3), c_orderQueueAddToEnd);
            lv_target = PointWithOffsetPolar(lp_target2, DistanceBetweenPoints(UnitGetPosition(UnitLastCreated()), lp_point), (AngleBetweenPoints(UnitGetPosition(UnitLastCreated()), lp_point) + 180.0));
            UnitBehaviorAdd(UnitLastCreated(), "WaveUnitSpeed", UnitLastCreated(), 1);
            UnitBehaviorAdd(UnitLastCreated(), "AIUnit", UnitLastCreated(), 1);
            UnitSetCustomValue(UnitLastCreated(), 0, PointGetX(lv_target));
            UnitSetCustomValue(UnitLastCreated(), 1, PointGetY(lv_target));
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), lv_target), c_orderQueueReplace);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), lp_target3), c_orderQueueAddToEnd);
        }
        else {
            lv_switch = true;
            break;
        }
    }
    auto2E9A8447_n = 1;
    for (auto2E9A8447_i = 1; auto2E9A8447_i <= auto2E9A8447_n; auto2E9A8447_i += 1) {
        if ((lv_switch == false) && (lv_waveCost >= UnitTypeGetCost("UltraliskSpawner", c_unitCostMinerals))) {
            lv_waveCost -= UnitTypeGetCost("UltraliskSpawner", c_unitCostMinerals);
            UnitCreate(1, "Ultralisk", c_unitCreateIgnorePlacement, lp_player, RegionRandomPoint(RegionCircle(lp_point, lp_size)), lp_angle);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), lp_target3), c_orderQueueAddToEnd);
            lv_target = PointWithOffsetPolar(lp_target2, DistanceBetweenPoints(UnitGetPosition(UnitLastCreated()), lp_point), (AngleBetweenPoints(UnitGetPosition(UnitLastCreated()), lp_point) + 180.0));
            UnitBehaviorAdd(UnitLastCreated(), "WaveUnitSpeed", UnitLastCreated(), 1);
            UnitBehaviorAdd(UnitLastCreated(), "AIUnit", UnitLastCreated(), 1);
            UnitSetCustomValue(UnitLastCreated(), 0, PointGetX(lv_target));
            UnitSetCustomValue(UnitLastCreated(), 1, PointGetY(lv_target));
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), lv_target), c_orderQueueReplace);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), lp_target3), c_orderQueueAddToEnd);
        }
        else {
            lv_switch = true;
            break;
        }
    }
    auto1918E701_n = 1;
    for (auto1918E701_i = 1; auto1918E701_i <= auto1918E701_n; auto1918E701_i += 1) {
        if ((lv_switch == false) && (lv_waveCost >= UnitTypeGetCost("RoachSpawner", c_unitCostMinerals))) {
            lv_waveCost -= UnitTypeGetCost("RoachSpawner", c_unitCostMinerals);
            UnitCreate(1, "Roach", c_unitCreateIgnorePlacement, lp_player, RegionRandomPoint(RegionCircle(lp_point, lp_size)), lp_angle);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), lp_target3), c_orderQueueAddToEnd);
            lv_target = PointWithOffsetPolar(lp_target2, DistanceBetweenPoints(UnitGetPosition(UnitLastCreated()), lp_point), (AngleBetweenPoints(UnitGetPosition(UnitLastCreated()), lp_point) + 180.0));
            UnitBehaviorAdd(UnitLastCreated(), "WaveUnitSpeed", UnitLastCreated(), 1);
            UnitBehaviorAdd(UnitLastCreated(), "AIUnit", UnitLastCreated(), 1);
            UnitSetCustomValue(UnitLastCreated(), 0, PointGetX(lv_target));
            UnitSetCustomValue(UnitLastCreated(), 1, PointGetY(lv_target));
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), lv_target), c_orderQueueReplace);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), lp_target3), c_orderQueueAddToEnd);
        }
        else {
            lv_switch = true;
            break;
        }
    }
    auto9F1DF4C9_n = 1;
    for (auto9F1DF4C9_i = 1; auto9F1DF4C9_i <= auto9F1DF4C9_n; auto9F1DF4C9_i += 1) {
        if ((lv_switch == false) && (lv_waveCost >= UnitTypeGetCost("HydraliskSpawner", c_unitCostMinerals))) {
            lv_waveCost -= UnitTypeGetCost("HydraliskSpawner", c_unitCostMinerals);
            UnitCreate(1, "Hydralisk", c_unitCreateIgnorePlacement, lp_player, RegionRandomPoint(RegionCircle(lp_point, lp_size)), lp_angle);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), lp_target3), c_orderQueueAddToEnd);
            lv_target = PointWithOffsetPolar(lp_target2, DistanceBetweenPoints(UnitGetPosition(UnitLastCreated()), lp_point), (AngleBetweenPoints(UnitGetPosition(UnitLastCreated()), lp_point) + 180.0));
            UnitBehaviorAdd(UnitLastCreated(), "WaveUnitSpeed", UnitLastCreated(), 1);
            UnitBehaviorAdd(UnitLastCreated(), "AIUnit", UnitLastCreated(), 1);
            UnitSetCustomValue(UnitLastCreated(), 0, PointGetX(lv_target));
            UnitSetCustomValue(UnitLastCreated(), 1, PointGetY(lv_target));
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), lv_target), c_orderQueueReplace);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), lp_target3), c_orderQueueAddToEnd);
        }
        else {
            lv_switch = true;
            break;
        }
    }
    auto0E0347D6_n = 1;
    for (auto0E0347D6_i = 1; auto0E0347D6_i <= auto0E0347D6_n; auto0E0347D6_i += 1) {
        if ((lv_switch == false) && (lv_waveCost >= UnitTypeGetCost("InfestorSpawner", c_unitCostMinerals))) {
            lv_waveCost -= UnitTypeGetCost("InfestorSpawner", c_unitCostMinerals);
            UnitCreate(1, "Infestor", c_unitCreateIgnorePlacement, lp_player, RegionRandomPoint(RegionCircle(lp_point, lp_size)), lp_angle);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), lp_target3), c_orderQueueAddToEnd);
            lv_target = PointWithOffsetPolar(lp_target2, DistanceBetweenPoints(UnitGetPosition(UnitLastCreated()), lp_point), (AngleBetweenPoints(UnitGetPosition(UnitLastCreated()), lp_point) + 180.0));
            UnitBehaviorAdd(UnitLastCreated(), "WaveUnitSpeed", UnitLastCreated(), 1);
            UnitBehaviorAdd(UnitLastCreated(), "AIUnit", UnitLastCreated(), 1);
            UnitSetCustomValue(UnitLastCreated(), 0, PointGetX(lv_target));
            UnitSetCustomValue(UnitLastCreated(), 1, PointGetY(lv_target));
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), lv_target), c_orderQueueReplace);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), lp_target3), c_orderQueueAddToEnd);
        }
        else {
            lv_switch = true;
            break;
        }
    }
    autoD590FDA8_n = 1;
    for (autoD590FDA8_i = 1; autoD590FDA8_i <= autoD590FDA8_n; autoD590FDA8_i += 1) {
        if ((lv_switch == false) && (lv_waveCost >= UnitTypeGetCost("UltraliskSpawner", c_unitCostMinerals))) {
            lv_waveCost -= UnitTypeGetCost("UltraliskSpawner", c_unitCostMinerals);
            UnitCreate(1, "Ultralisk", c_unitCreateIgnorePlacement, lp_player, RegionRandomPoint(RegionCircle(lp_point, lp_size)), lp_angle);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), lp_target3), c_orderQueueAddToEnd);
            lv_target = PointWithOffsetPolar(lp_target2, DistanceBetweenPoints(UnitGetPosition(UnitLastCreated()), lp_point), (AngleBetweenPoints(UnitGetPosition(UnitLastCreated()), lp_point) + 180.0));
            UnitBehaviorAdd(UnitLastCreated(), "WaveUnitSpeed", UnitLastCreated(), 1);
            UnitBehaviorAdd(UnitLastCreated(), "AIUnit", UnitLastCreated(), 1);
            UnitSetCustomValue(UnitLastCreated(), 0, PointGetX(lv_target));
            UnitSetCustomValue(UnitLastCreated(), 1, PointGetY(lv_target));
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), lv_target), c_orderQueueReplace);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), lp_target3), c_orderQueueAddToEnd);
        }
        else {
            lv_switch = true;
            break;
        }
    }
    autoA0E9C373_n = 1;
    for (autoA0E9C373_i = 1; autoA0E9C373_i <= autoA0E9C373_n; autoA0E9C373_i += 1) {
        if ((lv_switch == false) && (lv_waveCost >= UnitTypeGetCost("QueenSpawner", c_unitCostMinerals))) {
            lv_waveCost -= UnitTypeGetCost("QueenSpawner", c_unitCostMinerals);
            UnitCreate(1, "Queen", c_unitCreateIgnorePlacement, lp_player, RegionRandomPoint(RegionCircle(lp_point, lp_size)), lp_angle);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), lp_target3), c_orderQueueAddToEnd);
            lv_target = PointWithOffsetPolar(lp_target2, DistanceBetweenPoints(UnitGetPosition(UnitLastCreated()), lp_point), (AngleBetweenPoints(UnitGetPosition(UnitLastCreated()), lp_point) + 180.0));
            UnitBehaviorAdd(UnitLastCreated(), "WaveUnitSpeed", UnitLastCreated(), 1);
            UnitBehaviorAdd(UnitLastCreated(), "AIUnit", UnitLastCreated(), 1);
            UnitSetCustomValue(UnitLastCreated(), 0, PointGetX(lv_target));
            UnitSetCustomValue(UnitLastCreated(), 1, PointGetY(lv_target));
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), lv_target), c_orderQueueReplace);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), lp_target3), c_orderQueueAddToEnd);
        }
        else {
            lv_switch = true;
            break;
        }
    }
    while (true) {
        if ((lv_waveCost >= UnitTypeGetCost("ZerglingSpawner", c_unitCostMinerals))) {
            lv_waveCost -= UnitTypeGetCost("ZerglingSpawner", c_unitCostMinerals);
            UnitCreate(1, "Zergling", c_unitCreateIgnorePlacement, lp_player, RegionRandomPoint(RegionCircle(lp_point, lp_size)), lp_angle);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), lp_target3), c_orderQueueAddToEnd);
            lv_target = PointWithOffsetPolar(lp_target2, DistanceBetweenPoints(UnitGetPosition(UnitLastCreated()), lp_point), (AngleBetweenPoints(UnitGetPosition(UnitLastCreated()), lp_point) + 180.0));
            UnitBehaviorAdd(UnitLastCreated(), "WaveUnitSpeed", UnitLastCreated(), 1);
            UnitBehaviorAdd(UnitLastCreated(), "AIUnit", UnitLastCreated(), 1);
            UnitSetCustomValue(UnitLastCreated(), 0, PointGetX(lv_target));
            UnitSetCustomValue(UnitLastCreated(), 1, PointGetY(lv_target));
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), lv_target), c_orderQueueReplace);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), lp_target3), c_orderQueueAddToEnd);
        }
        else {
            break;
        }
    }
}

void gf_SpawnZergOverseer (point lp_point, point lp_target2, point lp_target3, int lp_player, fixed lp_angle, int lp_lane) {
    int auto4BE6A854_n;
    int auto4BE6A854_i;

    // Variable Declarations
    point lv_target;

    // Variable Initialization

    // Implementation
    auto4BE6A854_n = 2;
    for (auto4BE6A854_i = 1; auto4BE6A854_i <= auto4BE6A854_n; auto4BE6A854_i += 1) {
        if ((gv_wave >= 10) && (UnitGroupCount(gv_overseerGroup[lp_lane], c_unitCountAlive) < 4)) {
            UnitCreate(1, "Overseer", c_unitCreateIgnorePlacement, lp_player, lp_point, lp_angle);
            UnitGroupAdd(gv_overseerGroup[lp_lane], UnitLastCreated());
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), lp_target3), c_orderQueueAddToEnd);
            lv_target = PointWithOffsetPolar(lp_target2, DistanceBetweenPoints(UnitGetPosition(UnitLastCreated()), lp_point), (AngleBetweenPoints(UnitGetPosition(UnitLastCreated()), lp_point) + 180.0));
            UnitBehaviorAdd(UnitLastCreated(), "WaveUnitSpeed", UnitLastCreated(), 1);
            UnitBehaviorAdd(UnitLastCreated(), "AIUnit", UnitLastCreated(), 1);
            UnitSetCustomValue(UnitLastCreated(), 0, PointGetX(lv_target));
            UnitSetCustomValue(UnitLastCreated(), 1, PointGetY(lv_target));
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), lv_target), c_orderQueueReplace);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), lp_target3), c_orderQueueAddToEnd);
        }
        else {
        }
    }
}

void gf_WaveUpgrades (int lp_player) {
    int autoBBDC84E9_val;

    // Implementation
    autoBBDC84E9_val = gv_wave;
    if (autoBBDC84E9_val == 4) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "zerglingmovementspeed", 1);
    }
    else if (autoBBDC84E9_val == 6) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "ZergMeleeWeaponsLevel1", 1);
    }
    else if (autoBBDC84E9_val == 8) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "ZergGroundArmorsLevel1", 1);
    }
    else if (autoBBDC84E9_val == 10) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "CentrificalHooks", 1);
    }
    else if (autoBBDC84E9_val == 12) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "GlialReconstitution", 1);
    }
    else if (autoBBDC84E9_val == 14) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "overlordspeed", 1);
    }
    else if (autoBBDC84E9_val == 16) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "ZergMissileWeaponsLevel1", 1);
    }
    else if (autoBBDC84E9_val == 18) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "HydraliskSpeedUpgrade", 1);
    }
    else if (autoBBDC84E9_val == 20) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "ZergMeleeWeaponsLevel2", 1);
    }
    else if (autoBBDC84E9_val == 22) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "ZergGroundArmorsLevel2", 1);
    }
    else if (autoBBDC84E9_val == 24) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "ZergFlyerWeaponsLevel1", 1);
    }
    else if (autoBBDC84E9_val == 26) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "ZergFlyerArmorsLevel1", 1);
    }
    else if (autoBBDC84E9_val == 27) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "hydraliskspeed", 1);
    }
    else if (autoBBDC84E9_val == 28) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "ZergMissileWeaponsLevel2", 1);
    }
    else if (autoBBDC84E9_val == 29) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "zerglingattackspeed", 1);
    }
    else if (autoBBDC84E9_val == 30) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "InfestorEnergyUpgrade", 1);
    }
    else if (autoBBDC84E9_val == 32) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "ZergFlyerWeaponsLevel2", 1);
    }
    else if (autoBBDC84E9_val == 34) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "ZergFlyerWeaponsLevel2", 1);
    }
    else if (autoBBDC84E9_val == 36) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "ZergMeleeWeaponsLevel3", 1);
    }
    else if (autoBBDC84E9_val == 38) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "ZergGroundArmorsLevel3", 1);
    }
    else if (autoBBDC84E9_val == 40) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "LocustLifetimeIncrease", 1);
    }
    else if (autoBBDC84E9_val == 42) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "ZergMissileWeaponsLevel3", 1);
    }
    else if (autoBBDC84E9_val == 44) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "NeuralParasite", 1);
    }
    else if (autoBBDC84E9_val == 46) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "ZergFlyerWeaponsLevel3", 1);
    }
    else if (autoBBDC84E9_val == 48) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "ZergFlyerArmorsLevel3", 1);
    }
    else if (autoBBDC84E9_val == 50) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "ChitinousPlating", 1);
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Trigger: Library
//--------------------------------------------------------------------------------------------------
bool gt_Library_Func (bool testConds, bool runActions) {
    string autoE7E68B1F_val;

    // Actions
    if (!runActions) {
        return true;
    }

    UISetResourceTradingAllowed(c_resourceTypeMinerals, false);
    UISetResourceTradingAllowed(c_resourceTypeVespene, false);
    UISetResourceTradeCountdownTime(0);
    GameSetSpeedValue(c_gameSpeedFaster);
    GameSetSpeedLocked(true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeIdleWorkerButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeArmyButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTechGlossaryPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTechTreePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeHeroPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTeamResourceButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeAllianceButton, false);
    UISetResourceVisible(PlayerGroupAll(), c_resourceTypeVespene, false);
    PlayerGroupLoopBegin(PlayerGroupActive());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        PlayerOptionOverride(PlayerGroupLoopCurrent(), "displayunitstatus", "Damaged");
        PlayerOptionOverride(PlayerGroupLoopCurrent(), "buildgridhint", "1");
        PlayerOptionOverride(PlayerGroupLoopCurrent(), "simplecommandcard", "0");
        PlayerOptionOverride(PlayerGroupLoopCurrent(), "teamcoloredlifestatus", "1");
        PlayerOptionOverride(PlayerGroupLoopCurrent(), "showalerts", "1");
        TechTreeAbilityAllow(PlayerGroupLoopCurrent(), AbilityCommand("move", 0), false);
        TechTreeAbilityAllow(PlayerGroupLoopCurrent(), AbilityCommand("move", 1), false);
        TechTreeAbilityAllow(PlayerGroupLoopCurrent(), AbilityCommand("move", 2), false);
        TechTreeAbilityAllow(PlayerGroupLoopCurrent(), AbilityCommand("stop", 0), false);
        TechTreeAbilityAllow(PlayerGroupLoopCurrent(), AbilityCommand("ArchonWarp", 0), false);
        TechTreeAbilityAllow(PlayerGroupLoopCurrent(), AbilityCommand("ArchonWarp", 1), false);
        TechTreeAbilityAllow(PlayerGroupLoopCurrent(), AbilityCommand("MassRecall", 0), false);
        TechTreeAbilityAllow(PlayerGroupLoopCurrent(), AbilityCommand("ForceField", 0), false);
        TechTreeAbilityAllow(PlayerGroupLoopCurrent(), AbilityCommand("MothershipCoreMassRecall", 0), false);
        TechTreeAbilityAllow(PlayerGroupLoopCurrent(), AbilityCommand("MothershipMassRecall", 0), false);
        TechTreeAbilityAllow(PlayerGroupLoopCurrent(), AbilityCommand("MothershipCorePurifyNexus", 0), false);
        TechTreeAbilityAllow(PlayerGroupLoopCurrent(), AbilityCommand("OracleRevelation", 0), false);
        TechTreeAbilityAllow(PlayerGroupLoopCurrent(), AbilityCommand("MorphToMothership", 0), false);
        CatalogFieldValueSet(c_gameCatalogUnit, "Zealot", "TauntDuration[" + IntToString(0) + "]", PlayerGroupLoopCurrent(), "0");
        CatalogFieldValueSet(c_gameCatalogUnit, "Zealot", "TauntDuration[" + IntToString(1) + "]", PlayerGroupLoopCurrent(), "0");
        CatalogFieldValueSet(c_gameCatalogUnit, "HighTemplar", "TauntDuration[" + IntToString(0) + "]", PlayerGroupLoopCurrent(), "0");
        CatalogFieldValueSet(c_gameCatalogUnit, "HighTemplar", "TauntDuration[" + IntToString(1) + "]", PlayerGroupLoopCurrent(), "0");
        CatalogFieldValueSet(c_gameCatalogUnit, "Colossus", "TauntDuration[" + IntToString(1) + "]", PlayerGroupLoopCurrent(), "0");
        CatalogFieldValueSet(c_gameCatalogUnit, "Oracle", "TauntDuration[" + IntToString(1) + "]", PlayerGroupLoopCurrent(), "0");
        CatalogFieldValueSet(c_gameCatalogUnit, "Stalker", "TauntDuration[" + IntToString(1) + "]", PlayerGroupLoopCurrent(), "0");
        CatalogFieldValueSet(c_gameCatalogUnit, "Immortal", "TauntDuration[" + IntToString(1) + "]", PlayerGroupLoopCurrent(), "0");
        CatalogFieldValueSet(c_gameCatalogUnit, "Interceptor", "CostResource[" + IntToString(0) + "]", PlayerGroupLoopCurrent(), "0");
        CatalogFieldValueSet(c_gameCatalogAbil, "CarrierHangar", "InfoArray[" + IntToString(0) + "].CountStart", PlayerGroupLoopCurrent(), "8");
        CatalogFieldValueSet(c_gameCatalogUnit, "Sentry", "EnergyRegenRate", PlayerGroupLoopCurrent(), "2");
        CatalogFieldValueSet(c_gameCatalogAbil, "GuardianShield", "Cost[" + IntToString(0) + "].Vital[" + IntToString(2) + "]", PlayerGroupLoopCurrent(), "25");
        CatalogFieldValueSet(c_gameCatalogBehavior, "HallucinationTimedLife", "Duration", PlayerGroupLoopCurrent(), "30");
        CatalogFieldValueSet(c_gameCatalogAbil, "HallucinationArchon", "Cost[" + IntToString(0) + "].Vital[" + IntToString(2) + "]", PlayerGroupLoopCurrent(), "75");
        CatalogFieldValueSet(c_gameCatalogAbil, "HallucinationColossus", "Cost[" + IntToString(0) + "].Vital[" + IntToString(2) + "]", PlayerGroupLoopCurrent(), "75");
        CatalogFieldValueSet(c_gameCatalogAbil, "HallucinationHighTemplar", "Cost[" + IntToString(0) + "].Vital[" + IntToString(2) + "]", PlayerGroupLoopCurrent(), "75");
        CatalogFieldValueSet(c_gameCatalogAbil, "HallucinationImmortal", "Cost[" + IntToString(0) + "].Vital[" + IntToString(2) + "]", PlayerGroupLoopCurrent(), "75");
        CatalogFieldValueSet(c_gameCatalogAbil, "HallucinationPhoenix", "Cost[" + IntToString(0) + "].Vital[" + IntToString(2) + "]", PlayerGroupLoopCurrent(), "75");
        CatalogFieldValueSet(c_gameCatalogAbil, "HallucinationProbe", "Cost[" + IntToString(0) + "].Vital[" + IntToString(2) + "]", PlayerGroupLoopCurrent(), "75");
        CatalogFieldValueSet(c_gameCatalogAbil, "HallucinationStalker", "Cost[" + IntToString(0) + "].Vital[" + IntToString(2) + "]", PlayerGroupLoopCurrent(), "75");
        CatalogFieldValueSet(c_gameCatalogAbil, "HallucinationVoidRay", "Cost[" + IntToString(0) + "].Vital[" + IntToString(2) + "]", PlayerGroupLoopCurrent(), "75");
        CatalogFieldValueSet(c_gameCatalogAbil, "HallucinationWarpPrism", "Cost[" + IntToString(0) + "].Vital[" + IntToString(2) + "]", PlayerGroupLoopCurrent(), "75");
        CatalogFieldValueSet(c_gameCatalogAbil, "HallucinationZealot", "Cost[" + IntToString(0) + "].Vital[" + IntToString(2) + "]", PlayerGroupLoopCurrent(), "75");
        CatalogFieldValueSet(c_gameCatalogAbil, "HallucinationOracle", "Cost[" + IntToString(0) + "].Vital[" + IntToString(2) + "]", PlayerGroupLoopCurrent(), "75");
        CatalogFieldValueSet(c_gameCatalogUnit, "MothershipCore", "EnergyRegenRate", PlayerGroupLoopCurrent(), "2");
        CatalogFieldValueSet(c_gameCatalogUnit, "Mothership", "EnergyRegenRate", PlayerGroupLoopCurrent(), "2");
        CatalogFieldValueSet(c_gameCatalogAbil, "TemporalField", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", PlayerGroupLoopCurrent(), "15");
        CatalogFieldValueSet(c_gameCatalogUnit, "Phoenix", "EnergyRegenRate", PlayerGroupLoopCurrent(), "2");
        CatalogFieldValueSet(c_gameCatalogUnit, "HighTemplar", "EnergyRegenRate", PlayerGroupLoopCurrent(), "2");
        CatalogFieldValueSet(c_gameCatalogAbil, "Feedback", "Cost[" + IntToString(0) + "].Vital[" + IntToString(2) + "]", PlayerGroupLoopCurrent(), "25");
        CatalogFieldValueSet(c_gameCatalogAbil, "Feedback", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", PlayerGroupLoopCurrent(), "10");
        CatalogFieldValueSet(c_gameCatalogAbil, "PsiStorm", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", PlayerGroupLoopCurrent(), "10");
        TechTreeAbilityAllow(PlayerGroupLoopCurrent(), AbilityCommand("GhostWeaponsFree", 0), false);
        TechTreeAbilityAllow(PlayerGroupLoopCurrent(), AbilityCommand("GhostHoldFire", 0), false);
        TechTreeAbilityAllow(PlayerGroupLoopCurrent(), AbilityCommand("TacNukeStrike", 0), false);
        TechTreeAbilityAllow(PlayerGroupLoopCurrent(), AbilityCommand("MedivacTransport", 2), false);
        TechTreeAbilityAllow(PlayerGroupLoopCurrent(), AbilityCommand("MedivacTransport", 0), false);
        TechTreeAbilityAllow(PlayerGroupLoopCurrent(), AbilityCommand("MorphToHellionTank", 0), false);
        TechTreeAbilityAllow(PlayerGroupLoopCurrent(), AbilityCommand("MorphToHellion", 0), false);
        CatalogFieldValueSet(c_gameCatalogUnit, "Marine", "TauntDuration[" + IntToString(0) + "]", PlayerGroupLoopCurrent(), "0");
        CatalogFieldValueSet(c_gameCatalogUnit, "Marine", "TauntDuration[" + IntToString(1) + "]", PlayerGroupLoopCurrent(), "0");
        CatalogFieldValueSet(c_gameCatalogUnit, "Marauder", "TauntDuration[" + IntToString(0) + "]", PlayerGroupLoopCurrent(), "0");
        CatalogFieldValueSet(c_gameCatalogUnit, "Marauder", "TauntDuration[" + IntToString(1) + "]", PlayerGroupLoopCurrent(), "0");
        CatalogFieldValueSet(c_gameCatalogUnit, "Thor", "TauntDuration[" + IntToString(0) + "]", PlayerGroupLoopCurrent(), "0");
        CatalogFieldValueSet(c_gameCatalogUnit, "Thor", "TauntDuration[" + IntToString(1) + "]", PlayerGroupLoopCurrent(), "0");
        CatalogFieldValueSet(c_gameCatalogUnit, "ThorAP", "TauntDuration[" + IntToString(0) + "]", PlayerGroupLoopCurrent(), "0");
        CatalogFieldValueSet(c_gameCatalogUnit, "ThorAP", "TauntDuration[" + IntToString(1) + "]", PlayerGroupLoopCurrent(), "0");
        CatalogFieldValueSet(c_gameCatalogUnit, "Ghost", "TauntDuration[" + IntToString(1) + "]", PlayerGroupLoopCurrent(), "0");
        CatalogFieldValueSet(c_gameCatalogUnit, "MULE", "TauntDuration[" + IntToString(1) + "]", PlayerGroupLoopCurrent(), "0");
        CatalogFieldValueSet(c_gameCatalogUnit, "VikingAssault", "TauntDuration[" + IntToString(1) + "]", PlayerGroupLoopCurrent(), "0");
        CatalogFieldValueSet(c_gameCatalogUnit, "VikingFighter", "TauntDuration[" + IntToString(1) + "]", PlayerGroupLoopCurrent(), "0");
        CatalogFieldValueSet(c_gameCatalogUnit, "Raven", "EnergyRegenRate", PlayerGroupLoopCurrent(), "2");
        CatalogFieldValueSet(c_gameCatalogBehavior, "AutoTurretTimedLife", "Duration", PlayerGroupLoopCurrent(), "30");
        CatalogFieldValueSet(c_gameCatalogBehavior, "PointDefenseDroneTimedLife", "Duration", PlayerGroupLoopCurrent(), "30");
        CatalogFieldValueSet(c_gameCatalogAbil, "BuildAutoTurret", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", PlayerGroupLoopCurrent(), "5");
        CatalogFieldValueSet(c_gameCatalogAbil, "PlacePointDefenseDrone", "Cost[" + IntToString(0) + "].Vital[" + IntToString(2) + "]", PlayerGroupLoopCurrent(), "50");
        CatalogFieldValueSet(c_gameCatalogAbil, "PlacePointDefenseDrone", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", PlayerGroupLoopCurrent(), "10");
        CatalogFieldValueSet(c_gameCatalogUnit, "Ghost", "EnergyRegenRate", PlayerGroupLoopCurrent(), "2");
        CatalogFieldValueSet(c_gameCatalogAbil, "GhostCloak", "Cost[" + IntToString(0) + "].Vital[" + IntToString(2) + "]", PlayerGroupLoopCurrent(), "0");
        CatalogFieldValueSet(c_gameCatalogAbil, "GhostCloak", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", PlayerGroupLoopCurrent(), "5");
        CatalogFieldValueSet(c_gameCatalogAbil, "EMP", "Cost[" + IntToString(0) + "].Vital[" + IntToString(2) + "]", PlayerGroupLoopCurrent(), "50");
        CatalogFieldValueSet(c_gameCatalogAbil, "EMP", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", PlayerGroupLoopCurrent(), "15");
        CatalogFieldValueSet(c_gameCatalogEffect, "EMPModifyUnit", "VitalArray[" + IntToString(2) + "].Change", PlayerGroupLoopCurrent(), "-50");
        CatalogFieldValueSet(c_gameCatalogEffect, "EMPDamage", "ShieldBonus", PlayerGroupLoopCurrent(), "50");
        CatalogFieldValueSet(c_gameCatalogBehavior, "GhostCloak", "Modification.VitalRegenArray[" + IntToString(2) + "]", PlayerGroupLoopCurrent(), "-3");
        CatalogFieldValueSet(c_gameCatalogUnit, "Battlecruiser", "EnergyRegenRate", PlayerGroupLoopCurrent(), "2");
        CatalogFieldValueSet(c_gameCatalogUnit, "Banshee", "EnergyRegenRate", PlayerGroupLoopCurrent(), "2");
        CatalogFieldValueSet(c_gameCatalogAbil, "BansheeCloak", "Cost[" + IntToString(0) + "].Vital[" + IntToString(2) + "]", PlayerGroupLoopCurrent(), "0");
        CatalogFieldValueSet(c_gameCatalogAbil, "BansheeCloak", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", PlayerGroupLoopCurrent(), "5");
        TechTreeAbilityAllow(PlayerGroupLoopCurrent(), AbilityCommand("SpawnChangeling", 0), false);
        TechTreeAbilityAllow(PlayerGroupLoopCurrent(), AbilityCommand("Contaminate", 0), false);
        TechTreeAbilityAllow(PlayerGroupLoopCurrent(), AbilityCommand("QueenBuild", 0), false);
        TechTreeAbilityAllow(PlayerGroupLoopCurrent(), AbilityCommand("BurrowQueenDown", 0), false);
        TechTreeAbilityAllow(PlayerGroupLoopCurrent(), AbilityCommand("SpawnLarva", 0), false);
        TechTreeAbilityAllow(PlayerGroupLoopCurrent(), AbilityCommand("BurrowHydraliskDown", 0), false);
        TechTreeAbilityAllow(PlayerGroupLoopCurrent(), AbilityCommand("BurrowInfestorDown", 0), false);
        TechTreeAbilityAllow(PlayerGroupLoopCurrent(), AbilityCommand("burrowedStop", 0), false);
        TechTreeAbilityAllow(PlayerGroupLoopCurrent(), AbilityCommand("BurrowInfestorTerranDown", 0), false);
        TechTreeAbilityAllow(PlayerGroupLoopCurrent(), AbilityCommand("BurrowUltraliskDown", 0), false);
        TechTreeAbilityAllow(PlayerGroupLoopCurrent(), AbilityCommand("BurrowBanelingDown", 0), false);
        TechTreeAbilityAllow(PlayerGroupLoopCurrent(), AbilityCommand("BurrowZerglingDown", 0), false);
        TechTreeAbilityAllow(PlayerGroupLoopCurrent(), AbilityCommand("MorphZerglingToBaneling", 0), false);
        TechTreeAbilityAllow(PlayerGroupLoopCurrent(), AbilityCommand("MorphToBroodLord", 0), false);
        TechTreeAbilityAllow(PlayerGroupLoopCurrent(), AbilityCommand("ViperConsume", 0), false);
        TechTreeAbilityAllow(PlayerGroupLoopCurrent(), AbilityCommand("ViperConsumeMinerals", 0), false);
        TechTreeAbilityAllow(PlayerGroupLoopCurrent(), AbilityCommand("ViperConsumeStructure", 0), false);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "Burrow", 1);
        CatalogFieldValueSet(c_gameCatalogUnit, "Zergling", "TauntDuration[" + IntToString(0) + "]", PlayerGroupLoopCurrent(), "0");
        CatalogFieldValueSet(c_gameCatalogUnit, "Zergling", "TauntDuration[" + IntToString(1) + "]", PlayerGroupLoopCurrent(), "0");
        CatalogFieldValueSet(c_gameCatalogUnit, "Hydralisk", "TauntDuration[" + IntToString(0) + "]", PlayerGroupLoopCurrent(), "0");
        CatalogFieldValueSet(c_gameCatalogUnit, "Hydralisk", "TauntDuration[" + IntToString(1) + "]", PlayerGroupLoopCurrent(), "0");
        CatalogFieldValueSet(c_gameCatalogUnit, "Ultralisk", "TauntDuration[" + IntToString(0) + "]", PlayerGroupLoopCurrent(), "0");
        CatalogFieldValueSet(c_gameCatalogUnit, "Ultralisk", "TauntDuration[" + IntToString(0) + "]", PlayerGroupLoopCurrent(), "1");
        CatalogFieldValueSet(c_gameCatalogUnit, "Roach", "TauntDuration[" + IntToString(1) + "]", PlayerGroupLoopCurrent(), "0");
        CatalogFieldValueSet(c_gameCatalogUnit, "Overlord", "TauntDuration[" + IntToString(1) + "]", PlayerGroupLoopCurrent(), "0");
        CatalogFieldValueSet(c_gameCatalogUnit, "Infestor", "TauntDuration[" + IntToString(1) + "]", PlayerGroupLoopCurrent(), "0");
        CatalogFieldValueSet(c_gameCatalogUnit, "Queen", "TauntDuration[" + IntToString(1) + "]", PlayerGroupLoopCurrent(), "0");
        CatalogFieldValueSet(c_gameCatalogAbil, "Corruption", "Cost[" + IntToString(0) + "].Cooldown.TimeStart", PlayerGroupLoopCurrent(), "0");
        CatalogFieldValueSet(c_gameCatalogAbil, "Corruption", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", PlayerGroupLoopCurrent(), "5");
        CatalogFieldValueSet(c_gameCatalogUnit, "Viper", "EnergyRegenRate", PlayerGroupLoopCurrent(), "2");
        CatalogFieldValueSet(c_gameCatalogAbil, "Yoink", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", PlayerGroupLoopCurrent(), "15");
        CatalogFieldValueSet(c_gameCatalogAbil, "Yoink", "Cost[" + IntToString(0) + "].Vital[" + IntToString(2) + "]", PlayerGroupLoopCurrent(), "0");
        CatalogFieldValueSet(c_gameCatalogUnit, "Infestor", "EnergyRegenRate", PlayerGroupLoopCurrent(), "2");
        CatalogFieldValueSet(c_gameCatalogAbil, "InfestedTerrans", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", PlayerGroupLoopCurrent(), "5");
        CatalogFieldValueSet(c_gameCatalogAbil, "FungalGrowth", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", PlayerGroupLoopCurrent(), "10");
        CatalogFieldValueSet(c_gameCatalogAbil, "FungalGrowth", "Cost[" + IntToString(0) + "].Vital[" + IntToString(2) + "]", PlayerGroupLoopCurrent(), "25");
        CatalogFieldValueSet(c_gameCatalogAbil, "NeuralParasite", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", PlayerGroupLoopCurrent(), "15");
        CatalogFieldValueSet(c_gameCatalogAbil, "NeuralParasite", "Cost[" + IntToString(0) + "].Vital[" + IntToString(2) + "]", PlayerGroupLoopCurrent(), "25");
        CatalogFieldValueSet(c_gameCatalogUnit, "Queen", "EnergyRegenRate", PlayerGroupLoopCurrent(), "2");
        CatalogFieldValueSet(c_gameCatalogAbil, "Transfusion", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", PlayerGroupLoopCurrent(), "5");
        CatalogFieldValueSet(c_gameCatalogUnit, "Overseer", "EnergyMax", PlayerGroupLoopCurrent(), "0");
        CatalogFieldValueSet(c_gameCatalogUnit, "Overseer", "EnergyRegenRate", PlayerGroupLoopCurrent(), "0");
        CatalogFieldValueSet(c_gameCatalogUnit, "Overseer", "EnergyStart", PlayerGroupLoopCurrent(), "0");
        if ((TechTreeUpgradeCount(PlayerGroupLoopCurrent(), "MarineSkin", c_techCountCompleteOnly) > 0)) {
            libNtve_gf_SetUpgradeLevelForPlayer(PlayerGroupLoopCurrent(), "MarineAdd", 1);
        }
        else {
        }
        if ((TechTreeUpgradeCount(PlayerGroupLoopCurrent(), "ThorSkin", c_techCountCompleteOnly) > 0)) {
            libNtve_gf_SetUpgradeLevelForPlayer(PlayerGroupLoopCurrent(), "ThorAdd", 1);
        }
        else {
        }
        if ((TechTreeUpgradeCount(PlayerGroupLoopCurrent(), "ZealotSkin", c_techCountCompleteOnly) > 0)) {
            libNtve_gf_SetUpgradeLevelForPlayer(PlayerGroupLoopCurrent(), "ZealotAdd", 1);
        }
        else {
        }
        if ((TechTreeUpgradeCount(PlayerGroupLoopCurrent(), "ZerglingSkin", c_techCountCompleteOnly) > 0)) {
            libNtve_gf_SetUpgradeLevelForPlayer(PlayerGroupLoopCurrent(), "ZerglingAdd", 1);
        }
        else {
        }
        if ((TechTreeUpgradeCount(PlayerGroupLoopCurrent(), "UltraliskSkin", c_techCountCompleteOnly) > 0)) {
            libNtve_gf_SetUpgradeLevelForPlayer(PlayerGroupLoopCurrent(), "UltraliskAdd", 1);
        }
        else {
        }
        autoE7E68B1F_val = PlayerRace(PlayerGroupLoopCurrent());
        if (autoE7E68B1F_val == "Prot") {
            gv_playerRace[PlayerGroupLoopCurrent()] = 0;
        }
        else if (autoE7E68B1F_val == "Terr") {
            gv_playerRace[PlayerGroupLoopCurrent()] = 1;
        }
        else if (autoE7E68B1F_val == "Zerg") {
            gv_playerRace[PlayerGroupLoopCurrent()] = 2;
        }
        else {
        }
    }
    PlayerGroupLoopEnd();
    TriggerExecute(gt_ControlCreate, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Library_Init () {
    gt_Library = TriggerCreate("gt_Library_Func");
    TriggerAddEventMapInit(gt_Library);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Control Create
//--------------------------------------------------------------------------------------------------
bool gt_ControlCreate_Func (bool testConds, bool runActions) {
    string auto853C5DCA_val;
    int autoBCE1B080_ae;
    int autoBCE1B080_ai;
    int autoA47B7007_ae;
    int autoA47B7007_ai;
    int autoD0CCBB34_ae;
    int autoD0CCBB34_ai;

    // Variable Declarations
    int lv_x2;
    int lv_x3;
    int lv_x5;
    int lv_i;
    int lv_r;
    string[21][3] lv_image;
    int lv_dialogMainButton;

    // Variable Initialization
    lv_x2 = 76;
    lv_x3 = 76;
    lv_x5 = 140;
    lv_dialogMainButton = c_invalidDialogId;

    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(140, 90, c_anchorBottomLeft, 5, 305, true);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    PlayerGroupLoopBegin(PlayerGroupActive());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        auto853C5DCA_val = PlayerRace(PlayerGroupLoopCurrent());
        if (auto853C5DCA_val == "Prot") {
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), DialogGetWidth(DialogLastCreated()), DialogGetHeight(DialogLastCreated()), c_anchorCenter, 0, 0, StringExternal("Param/Value/040032EE"), "Assets\\Textures\\ui_battlenet_challenge_frame_achievement.dds", c_triggerImageTypeHorizontalBorder, true, Color(100,100,100), c_triggerBlendModeNormal);
        }
        else if (auto853C5DCA_val == "Terr") {
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), DialogGetWidth(DialogLastCreated()), DialogGetHeight(DialogLastCreated()), c_anchorCenter, 0, 0, StringExternal("Param/Value/86D7554F"), "ui_battlenet_challenge_frame_achievement_terr.dds", c_triggerImageTypeHorizontalBorder, true, Color(100,100,100), c_triggerBlendModeNormal);
        }
        else if (auto853C5DCA_val == "Zerg") {
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), DialogGetWidth(DialogLastCreated()), DialogGetHeight(DialogLastCreated()), c_anchorCenter, 0, 0, StringExternal("Param/Value/4ED1680B"), "ui_battlenet_challenge_frame_achievement_zerg.dds", c_triggerImageTypeHorizontalBorder, true, Color(100,100,100), c_triggerBlendModeNormal);
        }
        else {
        }
    }
    PlayerGroupLoopEnd();
    lv_i = 0;
    lv_r = 1;
    lv_image[lv_i][lv_r] = "Assets\\Textures\\btn-ability-terran-stimpack-color.dds";
    gv_controlButtonTooltip[lv_i][lv_r] = (StringExternal("Button/Name/Stim") + StringExternal("Param/Value/C42ADE9A") + StringExternal("Unit/Name/Marine") + StringExternal("Param/Value/45D13AD5"));
    gv_controlDisable[lv_i][lv_r] = "DisableStimpack";
    lv_i += 1;
    lv_image[lv_i][lv_r] = "Assets\\Textures\\btn-ability-terran-snipe-color.dds";
    gv_controlButtonTooltip[lv_i][lv_r] = (StringExternal("Button/Name/Snipe") + StringExternal("Param/Value/FC6C7966") + StringExternal("Unit/Name/Ghost") + StringExternal("Param/Value/F59F94F3"));
    gv_controlDisable[lv_i][lv_r] = "DisableSnipe";
    lv_i += 1;
    lv_image[lv_i][lv_r] = "Assets\\Textures\\btn-ability-terran-emp-color.dds";
    gv_controlButtonTooltip[lv_i][lv_r] = (StringExternal("Button/Name/EMP") + StringExternal("Param/Value/81F3D4BD") + StringExternal("Unit/Name/Ghost") + StringExternal("Param/Value/13DFEAF9"));
    gv_controlDisable[lv_i][lv_r] = "DisableEMP";
    lv_i += 1;
    lv_image[lv_i][lv_r] = "Assets\\Textures\\btn-ability-terran-cloak-color.dds";
    gv_controlButtonTooltip[lv_i][lv_r] = (StringExternal("Button/Name/CloakOnGhost") + StringExternal("Param/Value/B06D2161") + StringExternal("Unit/Name/Ghost") + StringExternal("Param/Value/D572681D"));
    gv_controlDisable[lv_i][lv_r] = "DisableCloakGhost";
    lv_i += 1;
    lv_image[lv_i][lv_r] = "Assets\\Textures\\btn-unit-terran-vikingfighter.dds";
    gv_controlButtonTooltip[lv_i][lv_r] = (StringExternal("Button/Name/FighterMode") + StringExternal("Param/Value/10A20B00") + StringExternal("Unit/Name/VikingFighter") + StringExternal("Param/Value/C8794DB7"));
    gv_controlDisable[lv_i][lv_r] = "DisableVikingAir";
    lv_i += 1;
    lv_image[lv_i][lv_r] = "Assets\\Textures\\btn-unit-terran-vikingassault.dds";
    gv_controlButtonTooltip[lv_i][lv_r] = (StringExternal("Button/Name/AssaultMode") + StringExternal("Param/Value/25090466") + StringExternal("Unit/Name/VikingFighter") + StringExternal("Param/Value/E371C595"));
    gv_controlDisable[lv_i][lv_r] = "DisableVikingGround";
    lv_i += 1;
    lv_image[lv_i][lv_r] = "Assets\\Textures\\btn-ability-terran-decloak-color.dds";
    gv_controlButtonTooltip[lv_i][lv_r] = (StringExternal("Button/Name/CloakOnBanshee") + StringExternal("Param/Value/97193D09") + StringExternal("Unit/Name/Banshee") + StringExternal("Param/Value/76F5CD44"));
    gv_controlDisable[lv_i][lv_r] = "DisableCloakBanshee";
    lv_i += 1;
    lv_image[lv_i][lv_r] = "Assets\\Textures\\btn-building-terran-autoturret.dds";
    gv_controlButtonTooltip[lv_i][lv_r] = (StringExternal("Button/Name/AutoTurret") + StringExternal("Param/Value/C57B9DEE") + StringExternal("Unit/Name/Raven") + StringExternal("Param/Value/7CA158BA"));
    gv_controlDisable[lv_i][lv_r] = "DisableAutoTurret";
    lv_i += 1;
    lv_image[lv_i][lv_r] = "Assets\\Textures\\btn-unit-terran-targetingdrone.dds";
    gv_controlButtonTooltip[lv_i][lv_r] = (StringExternal("Button/Name/PointDefenseDrone") + StringExternal("Param/Value/0D56AC43") + StringExternal("Unit/Name/Raven") + StringExternal("Param/Value/AE8A1B25"));
    gv_controlDisable[lv_i][lv_r] = "DisablePointDefenseDrone";
    lv_i += 1;
    lv_image[lv_i][lv_r] = "Assets\\Textures\\btn-ability-terran-huntermissile-color.dds";
    gv_controlButtonTooltip[lv_i][lv_r] = (StringExternal("Button/Name/HunterSeekerMissile") + StringExternal("Param/Value/E271C340") + StringExternal("Unit/Name/Raven") + StringExternal("Param/Value/A2BBF6B6"));
    gv_controlDisable[lv_i][lv_r] = "DisableHunterMissile";
    lv_i += 1;
    lv_image[lv_i][lv_r] = "Assets\\Textures\\btn-unit-terran-siegetanksiegemode.dds";
    gv_controlButtonTooltip[lv_i][lv_r] = (StringExternal("Button/Name/SiegeMode") + StringExternal("Param/Value/B0EE8C63") + StringExternal("Unit/Name/SiegeTank") + StringExternal("Param/Value/26FCB145"));
    gv_controlDisable[lv_i][lv_r] = "DisableSiege";
    lv_i += 1;
    lv_image[lv_i][lv_r] = "Assets\\Textures\\btn-ability-terran-yamatogun-color.dds";
    gv_controlButtonTooltip[lv_i][lv_r] = (StringExternal("Button/Name/YamatoGun") + StringExternal("Param/Value/F6AEEE2A") + StringExternal("Unit/Name/Battlecruiser") + StringExternal("Param/Value/F1AAE3BA"));
    gv_controlDisable[lv_i][lv_r] = "DisableYamatoCannon";
    gv_controlRaceButtonLimit[lv_r] = lv_i;
    lv_i = 0;
    lv_r = 0;
    lv_image[lv_i][lv_r] = "Assets\\Textures\\btn-ability-protoss-charge-color.dds";
    gv_controlButtonTooltip[lv_i][lv_r] = (StringExternal("Button/Name/Charge") + StringExternal("Param/Value/A809DDD0") + StringExternal("Unit/Name/Zealot") + StringExternal("Param/Value/2019A201"));
    gv_controlDisable[lv_i][lv_r] = "DisableCharge";
    lv_i += 1;
    lv_image[lv_i][lv_r] = "Assets\\Textures\\btn-ability-protoss-blink-color.dds";
    gv_controlButtonTooltip[lv_i][lv_r] = (StringExternal("Button/Name/Blink") + StringExternal("Param/Value/B5503455") + StringExternal("Unit/Name/Stalker") + StringExternal("Param/Value/19A1981C"));
    gv_controlDisable[lv_i][lv_r] = "DisableBlink";
    lv_i += 1;
    lv_image[lv_i][lv_r] = "Assets\\Textures\\btn-ability-protoss-shieldbattery-color.dds";
    gv_controlButtonTooltip[lv_i][lv_r] = (StringExternal("Button/Name/GuardianShield") + StringExternal("Param/Value/639FD18C") + StringExternal("Unit/Name/Sentry") + StringExternal("Param/Value/30CA6E55"));
    gv_controlDisable[lv_i][lv_r] = "DisableGuardianShield";
    lv_i += 1;
    lv_image[lv_i][lv_r] = "Assets\\Textures\\btn-ability-protoss-hallucination-color.dds";
    gv_controlButtonTooltip[lv_i][lv_r] = (StringExternal("Button/Name/Hallucination") + StringExternal("Param/Value/C91BDAF5") + StringExternal("Unit/Name/Sentry") + StringExternal("Param/Value/2D7F10EB"));
    gv_controlDisable[lv_i][lv_r] = "DisableHallucination";
    lv_i += 1;
    lv_image[lv_i][lv_r] = "Assets\\Textures\\btn-ability-protoss-timewarp.dds";
    gv_controlButtonTooltip[lv_i][lv_r] = (StringExternal("Button/Name/TemporalField") + StringExternal("Param/Value/B641643D") + StringExternal("Unit/Name/Mothership") + StringExternal("Param/Value/80F89EBF"));
    gv_controlDisable[lv_i][lv_r] = "DisableTimeWarp";
    lv_i += 1;
    lv_image[lv_i][lv_r] = "Assets\\Textures\\btn-ability-protoss-feedback-color.dds";
    gv_controlButtonTooltip[lv_i][lv_r] = (StringExternal("Button/Name/Feedback") + StringExternal("Param/Value/67122F78") + StringExternal("Unit/Name/HighTemplar") + StringExternal("Param/Value/B1CE8289"));
    gv_controlDisable[lv_i][lv_r] = "DisableFeedback";
    lv_i += 1;
    lv_image[lv_i][lv_r] = "Assets\\Textures\\btn-ability-protoss-psistorm-color.dds";
    gv_controlButtonTooltip[lv_i][lv_r] = (StringExternal("Button/Name/PsiStorm") + StringExternal("Param/Value/0FB348D0") + StringExternal("Unit/Name/HighTemplar") + StringExternal("Param/Value/E02E8531"));
    gv_controlDisable[lv_i][lv_r] = "DisablePsionicStorm";
    lv_i += 1;
    lv_image[lv_i][lv_r] = "Assets\\Textures\\btn-ability-protoss-gravitonbeam-color.dds";
    gv_controlButtonTooltip[lv_i][lv_r] = (StringExternal("Button/Name/GravitonBeam") + StringExternal("Param/Value/306488FD") + StringExternal("Unit/Name/Phoenix") + StringExternal("Param/Value/556A3BB5"));
    gv_controlDisable[lv_i][lv_r] = "DisableGravitonBeam";
    lv_i += 1;
    lv_image[lv_i][lv_r] = "Assets\\Textures\\btn-ability-protoss-voidrayprismaticalignment.dds";
    gv_controlButtonTooltip[lv_i][lv_r] = (StringExternal("Button/Name/VoidRaySwarmDamageBoost") + StringExternal("Param/Value/FA83CC54") + StringExternal("Unit/Name/VoidRay") + StringExternal("Param/Value/3A6FC9FC"));
    gv_controlDisable[lv_i][lv_r] = "DisablePrismaticAlignment";
    gv_controlRaceButtonLimit[lv_r] = lv_i;
    lv_i = 0;
    lv_r = 2;
    lv_image[lv_i][lv_r] = "Assets\\Textures\\btn-ability-zerg-burrow-color.dds";
    gv_controlButtonTooltip[lv_i][lv_r] = (StringExternal("Button/Name/BurrowDown") + StringExternal("Param/Value/F85BA297") + StringExternal("Unit/Name/Roach") + StringExternal("Param/Value/FB6213E7"));
    gv_controlDisable[lv_i][lv_r] = "DisableBurrowRoach";
    lv_i += 1;
    lv_image[lv_i][lv_r] = "Assets\\Textures\\btn-ability-zerg-transfusion-color.dds";
    gv_controlButtonTooltip[lv_i][lv_r] = (StringExternal("Button/Name/Transfusion") + StringExternal("Param/Value/04F49D98") + StringExternal("Unit/Name/Queen") + StringExternal("Param/Value/F4E2971B"));
    gv_controlDisable[lv_i][lv_r] = "DisableTransfusion";
    lv_i += 1;
    lv_image[lv_i][lv_r] = "Assets\\Textures\\btn-ability-zerg-corruption-color.dds";
    gv_controlButtonTooltip[lv_i][lv_r] = (StringExternal("Button/Name/CorruptionAbility") + StringExternal("Param/Value/332BC609") + StringExternal("Unit/Name/Corruptor") + StringExternal("Param/Value/C34EED86"));
    gv_controlDisable[lv_i][lv_r] = "DisableCorruption";
    lv_i += 1;
    lv_image[lv_i][lv_r] = "Assets\\Textures\\btn-unit-zerg-infestedmarine.dds";
    gv_controlButtonTooltip[lv_i][lv_r] = (StringExternal("Button/Name/InfestedTerrans") + StringExternal("Param/Value/92C01521") + StringExternal("Unit/Name/Infestor") + StringExternal("Param/Value/7A747BA7"));
    gv_controlDisable[lv_i][lv_r] = "DisableInfestedTerran";
    lv_i += 1;
    lv_image[lv_i][lv_r] = "Assets\\Textures\\btn-ability-zerg-fungalgrowth-color.dds";
    gv_controlButtonTooltip[lv_i][lv_r] = (StringExternal("Button/Name/FungalGrowth") + StringExternal("Param/Value/F4738273") + StringExternal("Unit/Name/Infestor") + StringExternal("Param/Value/37ED7432"));
    gv_controlDisable[lv_i][lv_r] = "DisableFungalGrowth";
    lv_i += 1;
    lv_image[lv_i][lv_r] = "Assets\\Textures\\btn-ability-zerg-neuralparasite-color.dds";
    gv_controlButtonTooltip[lv_i][lv_r] = (StringExternal("Button/Name/NeuralParasite") + StringExternal("Param/Value/870C4366") + StringExternal("Unit/Name/Infestor") + StringExternal("Param/Value/6403BD98"));
    gv_controlDisable[lv_i][lv_r] = "DisableNeuralParasite";
    lv_i += 1;
    lv_image[lv_i][lv_r] = "Assets\\Textures\\btn-ability-zerg-abduct.dds";
    gv_controlButtonTooltip[lv_i][lv_r] = (StringExternal("Button/Name/FaceEmbrace") + StringExternal("Param/Value/1D153E71") + StringExternal("Unit/Name/Viper") + StringExternal("Param/Value/A3BD48EB"));
    gv_controlDisable[lv_i][lv_r] = "DisableAbduct";
    lv_i += 1;
    lv_image[lv_i][lv_r] = "Assets\\Textures\\btn-ability-zerg-blindingcloud.dds";
    gv_controlButtonTooltip[lv_i][lv_r] = (StringExternal("Button/Name/BlindingCloud") + StringExternal("Param/Value/D2E9AE98") + StringExternal("Unit/Name/Viper") + StringExternal("Param/Value/1BB5C805"));
    gv_controlDisable[lv_i][lv_r] = "DisableBlindingCloud";
    gv_controlRaceButtonLimit[lv_r] = lv_i;
    DialogCreate(50, 50, c_anchorBottomLeft, 25, 325, true);
    lv_dialogMainButton = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), DialogGetWidth(DialogLastCreated()), DialogGetHeight(DialogLastCreated()), c_anchorCenter, 0, 0, StringExternal("Param/Value/7E192A81"), StringExternal("Param/Value/F14F00AD"), "");
    gv_controlShow[0] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
    PlayerGroupLoopBegin(PlayerGroupActive());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((gv_playerRace[PlayerGroupLoopCurrent()] == 0)) {
            libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "ui_abilitycontrol_protossnormal.dds", PlayerGroupSingle(PlayerGroupLoopCurrent()));
            libNtve_gf_SetDialogItemImage2(DialogControlLastCreated(), "ui_abilitycontrol_protossnormal.dds", PlayerGroupSingle(PlayerGroupLoopCurrent()));
        }
        else {
        }
        if ((gv_playerRace[PlayerGroupLoopCurrent()] == 1)) {
            libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "ui_abilitycontrol_terrannormal.dds", PlayerGroupSingle(PlayerGroupLoopCurrent()));
            libNtve_gf_SetDialogItemImage2(DialogControlLastCreated(), "ui_abilitycontrol_terrannormal.dds", PlayerGroupSingle(PlayerGroupLoopCurrent()));
        }
        else {
        }
        if ((gv_playerRace[PlayerGroupLoopCurrent()] == 2)) {
            libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "ui_abilitycontrol_zergnormal.dds", PlayerGroupSingle(PlayerGroupLoopCurrent()));
            libNtve_gf_SetDialogItemImage2(DialogControlLastCreated(), "ui_abilitycontrol_zergnormal.dds", PlayerGroupSingle(PlayerGroupLoopCurrent()));
        }
        else {
        }
    }
    PlayerGroupLoopEnd();
    libNtve_gf_SetDialogItemHotkey(DialogControlLastCreated(), c_hotkeyIdleWorker, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 46, 46, c_anchorCenter, 0, 0, StringExternal("Param/Value/93FBEE01"), "btn-menu-research.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_controlShow[1] = DialogControlLastCreated();
    lv_r = 0;
    DialogCreate(((lv_x2 * 3) + 30), ((lv_x2 * 3) + 30), c_anchorBottomLeft, 5, 390, true);
    gv_controlDialog[lv_r] = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), DialogGetWidth(DialogLastCreated()), DialogGetHeight(DialogLastCreated()), c_anchorCenter, 0, 0, StringExternal("Param/Value/24166D6F"), "Assets\\Textures\\ui_tooltip_frame_protoss.dds", c_triggerImageTypeBorder, true, Color(100,100,100), c_triggerBlendModeNormal);
    autoBCE1B080_ae = gv_controlRaceButtonLimit[lv_r];
    autoBCE1B080_ai = 1;
    lv_i = 0;
    for ( ; ( (autoBCE1B080_ai >= 0 && lv_i <= autoBCE1B080_ae) || (autoBCE1B080_ai <= 0 && lv_i >= autoBCE1B080_ae) ) ; lv_i += autoBCE1B080_ai ) {
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), lv_x2, lv_x2, c_anchorTopLeft, 15, 15, StringExternal("Param/Value/6B7B5975"), StringExternal("Param/Value/4DC8F767"), "");
        gv_controlButton[lv_i][lv_r] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), Color(50.20, 50.20, 50.20), PlayerGroupAll());
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), (StringExternal("Param/Value/BD65101A") + gv_controlButtonTooltip[lv_i][lv_r] + StringExternal("Param/Value/4AA97BB7")), PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "ui_abilitycontrol_protossnormal.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage2(DialogControlLastCreated(), "ui_abilitycontrol_protossnormal.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_x3, lv_x3, c_anchorTopLeft, 50, 50, StringExternal("Param/Value/5B2115F3"), lv_image[lv_i][lv_r], c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
        gv_controlButtonImage[lv_i][lv_r] = DialogControlLastCreated();
        DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), true);
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_controlButton[lv_i][lv_r], c_anchorCenter, 0, 0);
        if ((lv_i != 0)) {
            DialogControlSetPositionRelative(gv_controlButton[lv_i][lv_r], PlayerGroupAll(), c_anchorLeft, gv_controlButton[(lv_i - 1)][lv_r], c_anchorRight, 0, 0);
        }
        else {
        }
    }
    DialogControlSetPositionRelative(gv_controlButton[3][lv_r], PlayerGroupAll(), c_anchorTop, gv_controlButton[0][lv_r], c_anchorBottom, 0, 0);
    DialogControlSetPositionRelative(gv_controlButton[6][lv_r], PlayerGroupAll(), c_anchorTop, gv_controlButton[3][lv_r], c_anchorBottom, 0, 0);
    lv_r = 1;
    DialogCreate(((lv_x2 * 3) + 30), ((lv_x2 * 4) + 30), c_anchorBottomLeft, 5, 390, true);
    gv_controlDialog[lv_r] = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), DialogGetWidth(DialogLastCreated()), DialogGetHeight(DialogLastCreated()), c_anchorCenter, 0, 0, StringExternal("Param/Value/5C9CEA08"), "Assets\\Textures\\ui_tooltip_frame_zerg.dds", c_triggerImageTypeBorder, true, Color(100,100,100), c_triggerBlendModeNormal);
    autoA47B7007_ae = gv_controlRaceButtonLimit[lv_r];
    autoA47B7007_ai = 1;
    lv_i = 0;
    for ( ; ( (autoA47B7007_ai >= 0 && lv_i <= autoA47B7007_ae) || (autoA47B7007_ai <= 0 && lv_i >= autoA47B7007_ae) ) ; lv_i += autoA47B7007_ai ) {
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), lv_x2, lv_x2, c_anchorTopLeft, 15, 15, StringExternal("Param/Value/2F237992"), StringExternal("Param/Value/C98FCF79"), "");
        gv_controlButton[lv_i][lv_r] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), Color(50.20, 50.20, 50.20), PlayerGroupAll());
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), (StringExternal("Param/Value/28DF3844") + gv_controlButtonTooltip[lv_i][lv_r] + StringExternal("Param/Value/366B1C40")), PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "ui_abilitycontrol_terrannormal.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage2(DialogControlLastCreated(), "ui_abilitycontrol_terrannormal.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_x3, lv_x3, c_anchorTopLeft, 50, 50, StringExternal("Param/Value/B7FFA4DC"), lv_image[lv_i][lv_r], c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
        gv_controlButtonImage[lv_i][lv_r] = DialogControlLastCreated();
        DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), true);
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_controlButton[lv_i][lv_r], c_anchorCenter, 0, 0);
        if ((lv_i != 0)) {
            DialogControlSetPositionRelative(gv_controlButton[lv_i][lv_r], PlayerGroupAll(), c_anchorLeft, gv_controlButton[(lv_i - 1)][lv_r], c_anchorRight, 0, 0);
        }
        else {
        }
    }
    DialogControlSetPositionRelative(gv_controlButton[3][lv_r], PlayerGroupAll(), c_anchorTop, gv_controlButton[0][lv_r], c_anchorBottom, 0, 0);
    DialogControlSetPositionRelative(gv_controlButton[6][lv_r], PlayerGroupAll(), c_anchorTop, gv_controlButton[3][lv_r], c_anchorBottom, 0, 0);
    DialogControlSetPositionRelative(gv_controlButton[9][lv_r], PlayerGroupAll(), c_anchorTop, gv_controlButton[6][lv_r], c_anchorBottom, 0, 0);
    lv_r = 2;
    DialogCreate(((lv_x2 * 3) + 30), ((lv_x2 * 3) + 30), c_anchorBottomLeft, 5, 390, true);
    gv_controlDialog[lv_r] = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), DialogGetWidth(DialogLastCreated()), DialogGetHeight(DialogLastCreated()), c_anchorCenter, 0, 0, StringExternal("Param/Value/4EFE8C28"), "Assets\\Textures\\ui_tooltip_frame_zerg.dds", c_triggerImageTypeBorder, true, Color(100,100,100), c_triggerBlendModeNormal);
    autoD0CCBB34_ae = gv_controlRaceButtonLimit[lv_r];
    autoD0CCBB34_ai = 1;
    lv_i = 0;
    for ( ; ( (autoD0CCBB34_ai >= 0 && lv_i <= autoD0CCBB34_ae) || (autoD0CCBB34_ai <= 0 && lv_i >= autoD0CCBB34_ae) ) ; lv_i += autoD0CCBB34_ai ) {
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), lv_x2, lv_x2, c_anchorTopLeft, 15, 15, StringExternal("Param/Value/14AE20D6"), StringExternal("Param/Value/70F38A82"), "");
        gv_controlButton[lv_i][lv_r] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), Color(50.20, 50.20, 50.20), PlayerGroupAll());
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), (StringExternal("Param/Value/15381FCF") + gv_controlButtonTooltip[lv_i][lv_r] + StringExternal("Param/Value/0A1C4858")), PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "ui_abilitycontrol_zergnormal.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage2(DialogControlLastCreated(), "ui_abilitycontrol_zergnormal.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_x3, lv_x3, c_anchorTopLeft, 50, 50, StringExternal("Param/Value/BF004EDA"), lv_image[lv_i][lv_r], c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
        DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), true);
        gv_controlButtonImage[lv_i][lv_r] = DialogControlLastCreated();
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_controlButton[lv_i][lv_r], c_anchorCenter, 0, 0);
        if ((lv_i != 0)) {
            DialogControlSetPositionRelative(gv_controlButton[lv_i][lv_r], PlayerGroupAll(), c_anchorLeft, gv_controlButton[(lv_i - 1)][lv_r], c_anchorRight, 0, 0);
        }
        else {
        }
    }
    DialogControlSetPositionRelative(gv_controlButton[3][lv_r], PlayerGroupAll(), c_anchorTop, gv_controlButton[0][lv_r], c_anchorBottom, 0, 0);
    DialogControlSetPositionRelative(gv_controlButton[6][lv_r], PlayerGroupAll(), c_anchorTop, gv_controlButton[3][lv_r], c_anchorBottom, 0, 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ControlCreate_Init () {
    gt_ControlCreate = TriggerCreate("gt_ControlCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Control Show
//--------------------------------------------------------------------------------------------------
bool gt_ControlShow_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_controlShow[0]))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DialogIsVisible(gv_controlDialog[gv_playerRace[EventPlayer()]], EventPlayer()) == false)) {
        DialogSetVisible(gv_controlDialog[gv_playerRace[EventPlayer()]], PlayerGroupSingle(EventPlayer()), true);
        libNtve_gf_SetDialogItemDesaturated(gv_controlShow[0], true, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemDesaturated(gv_controlShow[1], true, PlayerGroupSingle(EventPlayer()));
        DialogSetVisible(gv_talentsDialog, PlayerGroupSingle(EventPlayer()), false);
        libNtve_gf_SetDialogItemDesaturated(gv_talentsShow[0], false, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemDesaturated(gv_talentsShow[1], false, PlayerGroupSingle(EventPlayer()));
    }
    else {
        DialogSetVisible(gv_controlDialog[gv_playerRace[EventPlayer()]], PlayerGroupSingle(EventPlayer()), false);
        libNtve_gf_SetDialogItemDesaturated(gv_controlShow[0], false, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemDesaturated(gv_controlShow[1], false, PlayerGroupSingle(EventPlayer()));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ControlShow_Init () {
    gt_ControlShow = TriggerCreate("gt_ControlShow_Func");
    TriggerAddEventDialogControl(gt_ControlShow, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ControlShow, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeHotkeyPressed);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Control Select
//--------------------------------------------------------------------------------------------------
bool gt_ControlSelect_Func (bool testConds, bool runActions) {
    int autoF634AFC1_ae;
    int autoF634AFC1_ai;

    // Variable Declarations
    int lv_r;
    int lv_i;

    // Variable Initialization
    lv_r = gv_playerRace[EventPlayer()];

    // Conditions
    if (testConds) {
        if (!((DialogControlGetDialog(EventDialogControl()) == gv_controlDialog[lv_r]))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoF634AFC1_ae = gv_controlRaceButtonLimit[lv_r];
    autoF634AFC1_ai = 1;
    lv_i = 0;
    for ( ; ( (autoF634AFC1_ai >= 0 && lv_i <= autoF634AFC1_ae) || (autoF634AFC1_ai <= 0 && lv_i >= autoF634AFC1_ae) ) ; lv_i += autoF634AFC1_ai ) {
        if ((EventDialogControl() == gv_controlButton[lv_i][lv_r])) {
            break;
        }
        else {
        }
    }
    if ((DialogControlIsEnabled(gv_controlButtonImage[lv_i][lv_r], EventPlayer()) == true)) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), gv_controlDisable[lv_i][lv_r], 1);
        libNtve_gf_SetDialogItemTooltip(gv_controlButton[lv_i][lv_r], (StringExternal("Param/Value/5320DC09") + gv_controlButtonTooltip[lv_i][lv_r] + StringExternal("Param/Value/D89D8111")), PlayerGroupSingle(EventPlayer()));
        DialogControlSetEnabled(gv_controlButtonImage[lv_i][lv_r], PlayerGroupSingle(EventPlayer()), false);
        libNtve_gf_SetDialogItemDesaturated(EventDialogControl(), true, PlayerGroupSingle(EventPlayer()));
    }
    else {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), gv_controlDisable[lv_i][lv_r], 0);
        libNtve_gf_SetDialogItemTooltip(gv_controlButton[lv_i][lv_r], (StringExternal("Param/Value/D403BA28") + gv_controlButtonTooltip[lv_i][lv_r] + StringExternal("Param/Value/39A25BCB")), PlayerGroupSingle(EventPlayer()));
        DialogControlSetEnabled(gv_controlButtonImage[lv_i][lv_r], PlayerGroupSingle(EventPlayer()), true);
        libNtve_gf_SetDialogItemDesaturated(EventDialogControl(), false, PlayerGroupSingle(EventPlayer()));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ControlSelect_Init () {
    gt_ControlSelect = TriggerCreate("gt_ControlSelect_Func");
    TriggerAddEventDialogControl(gt_ControlSelect, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Order Morph
//--------------------------------------------------------------------------------------------------
bool gt_OrderMorph_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), Point(UnitGetCustomValue(EventUnit(), 0), UnitGetCustomValue(EventUnit(), 1))), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OrderMorph_Init () {
    gt_OrderMorph = TriggerCreate("gt_OrderMorph_Func");
    TriggerAddEventUnitAbility(gt_OrderMorph, null, AbilityCommand("Unsiege", 0), c_abilMorphStageMoverEnd, false);
    TriggerAddEventUnitAbility(gt_OrderMorph, null, AbilityCommand("BurrowRoachDown", 0), c_abilMorphStageMoverEnd, false);
    TriggerAddEventUnitAbility(gt_OrderMorph, null, AbilityCommand("BurrowRoachUp", 0), c_abilMorphStageMoverEnd, false);
    TriggerAddEventUnitAbility(gt_OrderMorph, null, AbilityCommand("WidowMineBurrow", 0), c_abilMorphStageMoverEnd, false);
    TriggerAddEventUnitAbility(gt_OrderMorph, null, AbilityCommand("WidowMineUnburrow", 0), c_abilMorphStageMoverEnd, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Order Idle
//--------------------------------------------------------------------------------------------------
bool gt_OrderIdle_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), 0, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile) | (1 << c_targetFilterUncommandable), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)))) == true))) {
            return false;
        }

        if (!((UnitGetCustomValue(EventUnit(), 0) != 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), Point(UnitGetCustomValue(EventUnit(), 0), UnitGetCustomValue(EventUnit(), 1))), c_orderQueueReplace);
    if ((UnitGetOwner(EventUnit()) != 14)) {
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1407)), c_orderQueueAddToEnd);
    }
    else {
    }
    if ((UnitHasBehavior(EventUnit(), "DefenderDeath") == false) && (UnitGetOwner(EventUnit()) == 14)) {
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(380)), c_orderQueueAddToEnd);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OrderIdle_Init () {
    gt_OrderIdle = TriggerCreate("gt_OrderIdle_Func");
    TriggerAddEventUnitBecomesIdle(gt_OrderIdle, null, true);
    TriggerAddEventUnitBehaviorChange(gt_OrderIdle, null, "GravitonBeam", c_unitBehaviorChangeDestroy);
    TriggerAddEventUnitBehaviorChange(gt_OrderIdle, null, "FungalGrowthMovement", c_unitBehaviorChangeDestroy);
    TriggerAddEventUnitBehaviorChange(gt_OrderIdle, null, "StasisHeroic", c_unitBehaviorChangeDestroy);
    TriggerAddEventUnitBehaviorChange(gt_OrderIdle, null, "ContaminateHeroic", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Order Neural Parasite On
//--------------------------------------------------------------------------------------------------
bool gt_OrderNeuralParasiteOn_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetCustomValue(EventUnit(), 0, UnitGetCustomValue(UnitBehaviorEffectUnit(EventUnit(), "NeuralParasite", c_effectUnitCaster, 0), 0));
    UnitSetCustomValue(EventUnit(), 1, UnitGetCustomValue(UnitBehaviorEffectUnit(EventUnit(), "NeuralParasite", c_effectUnitCaster, 0), 1));
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), Point(UnitGetCustomValue(EventUnit(), 0), UnitGetCustomValue(EventUnit(), 1))), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OrderNeuralParasiteOn_Init () {
    gt_OrderNeuralParasiteOn = TriggerCreate("gt_OrderNeuralParasiteOn_Func");
    TriggerAddEventUnitBehaviorChange(gt_OrderNeuralParasiteOn, null, "NeuralParasite", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Order Neural Parasite Off
//--------------------------------------------------------------------------------------------------
bool gt_OrderNeuralParasiteOff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_target;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitHasBehavior(EventUnit(), "WaveUnit") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_target = PointWithOffsetPolar(gv_playerTarget[EventPlayer()], DistanceBetweenPoints(UnitGetPosition(UnitBehaviorEffectUnit(EventUnit(), "WaveUnit", c_effectUnitCaster, 0)), gv_playerPoint[EventPlayer()]), (AngleBetweenPoints(UnitGetPosition(UnitBehaviorEffectUnit(EventUnit(), "WaveUnit", c_effectUnitCaster, 0)), gv_playerPoint[EventPlayer()]) + 180.0));
    UnitSetCustomValue(EventUnit(), 0, PointGetX(lv_target));
    UnitSetCustomValue(EventUnit(), 1, PointGetY(lv_target));
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), lv_target), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OrderNeuralParasiteOff_Init () {
    gt_OrderNeuralParasiteOff = TriggerCreate("gt_OrderNeuralParasiteOff_Func");
    TriggerAddEventUnitBehaviorChange(gt_OrderNeuralParasiteOff, null, "NeuralParasite", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Order Unit Created Behavior
//--------------------------------------------------------------------------------------------------
bool gt_OrderUnitCreatedBehavior_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetCustomValue(EventUnitCreatedUnit(), 0, UnitGetCustomValue(EventUnit(), 0));
    UnitSetCustomValue(EventUnitCreatedUnit(), 1, UnitGetCustomValue(EventUnit(), 1));
    UnitIssueOrder(EventUnitCreatedUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), Point(UnitGetCustomValue(EventUnitCreatedUnit(), 0), UnitGetCustomValue(EventUnitCreatedUnit(), 1))), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OrderUnitCreatedBehavior_Init () {
    gt_OrderUnitCreatedBehavior = TriggerCreate("gt_OrderUnitCreatedBehavior_Func");
    TriggerAddEventUnitCreated(gt_OrderUnitCreatedBehavior, null, "HallucinationArchon", null);
    TriggerAddEventUnitCreated(gt_OrderUnitCreatedBehavior, null, "HallucinationColossus", null);
    TriggerAddEventUnitCreated(gt_OrderUnitCreatedBehavior, null, "HallucinationHighTemplar", null);
    TriggerAddEventUnitCreated(gt_OrderUnitCreatedBehavior, null, "HallucinationImmortal", null);
    TriggerAddEventUnitCreated(gt_OrderUnitCreatedBehavior, null, "HallucinationPhoenix", null);
    TriggerAddEventUnitCreated(gt_OrderUnitCreatedBehavior, null, "HallucinationProbe", null);
    TriggerAddEventUnitCreated(gt_OrderUnitCreatedBehavior, null, "HallucinationStalker", null);
    TriggerAddEventUnitCreated(gt_OrderUnitCreatedBehavior, null, "HallucinationVoidRay", null);
    TriggerAddEventUnitCreated(gt_OrderUnitCreatedBehavior, null, "HallucinationWarpPrism", null);
    TriggerAddEventUnitCreated(gt_OrderUnitCreatedBehavior, null, "HallucinationZealot", null);
    TriggerAddEventUnitCreated(gt_OrderUnitCreatedBehavior, null, "HallucinationOracle", null);
    TriggerAddEventUnitCreated(gt_OrderUnitCreatedBehavior, null, "InfestedTerrans", null);
    TriggerAddEventUnitCreated(gt_OrderUnitCreatedBehavior, null, "SwarmHostSpawnLocusts", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Order Unit Created Effect
//--------------------------------------------------------------------------------------------------
bool gt_OrderUnitCreatedEffect_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitTarget), 0, UnitGetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitCaster), 0));
    UnitSetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitTarget), 1, UnitGetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitCaster), 1));
    UnitIssueOrder(EventPlayerEffectUsedUnit(c_effectUnitTarget), OrderTargetingPoint(AbilityCommand("attack", 0), Point(UnitGetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitTarget), 0), UnitGetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitTarget), 1))), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OrderUnitCreatedEffect_Init () {
    gt_OrderUnitCreatedEffect = TriggerCreate("gt_OrderUnitCreatedEffect_Func");
    TriggerAddEventPlayerEffectUsed(gt_OrderUnitCreatedEffect, c_playerAny, "WaveUnit");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sell
//--------------------------------------------------------------------------------------------------
bool gt_Sell_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_x;
    bool lv_switch;

    // Variable Initialization
    lv_x = UnitTypeGetCost(UnitGetType(EventUnitTargetUnit()), c_unitCostMinerals);

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitSetPosition(UnitGroupLoopCurrent(), UnitGetPosition(EventUnit()), false);
    }
    UnitGroupLoopEnd();
    if ((lv_switch == false) && (EventUnitAbility() == AbilityCommand("Sell100", 0))) {
        lv_switch = true;
    }
    else {
    }
    if ((lv_switch == false) && (EventUnitAbility() == AbilityCommand("Sell70", 0))) {
        lv_switch = true;
        lv_x = FixedToInt((lv_x * 0.7));
    }
    else {
    }
    if ((lv_switch == false) && (EventUnitAbility() == AbilityCommand("Sell60", 0))) {
        lv_switch = true;
        lv_x = FixedToInt((lv_x * 0.6));
    }
    else {
    }
    if ((lv_switch == false) && (EventUnitAbility() == AbilityCommand("Sell50", 0))) {
        lv_switch = true;
        lv_x = FixedToInt((lv_x * 0.5));
    }
    else {
    }
    TextTagCreate((StringExternal("Param/Value/0733C5E2") + IntToText(lv_x)), 24, UnitGetPosition(EventUnitTargetUnit()), 1.0, true, false, PlayerGroupSingle(EventPlayer()));
    TextTagSetVelocity(TextTagLastCreated(), 1.0, 90.0);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 5.0);
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperAdd, lv_x);
    SoundPlay(SoundLink("UI_TerranNewUnitAcquired", -1), PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Sell_Init () {
    gt_Sell = TriggerCreate("gt_Sell_Func");
    TriggerAddEventUnitAbility(gt_Sell, null, AbilityCommand("Sell100", 0), c_abilEffectStageCast, false);
    TriggerAddEventUnitAbility(gt_Sell, null, AbilityCommand("Sell70", 0), c_abilEffectStageCast, false);
    TriggerAddEventUnitAbility(gt_Sell, null, AbilityCommand("Sell60", 0), c_abilEffectStageCast, false);
    TriggerAddEventUnitAbility(gt_Sell, null, AbilityCommand("Sell50", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Upgrade
//--------------------------------------------------------------------------------------------------
bool gt_Upgrade_Func (bool testConds, bool runActions) {
    string autoCBF2B4B2_val;
    int auto029B27B7_val;
    string autoD27A9930_val;
    string autoC7E7495D_val;
    string auto0E4AD1DE_val;

    // Variable Declarations
    int lv_r;
    string lv_u;

    // Variable Initialization
    lv_r = gv_playerRace[EventPlayer()];
    lv_u = libNtve_gf_TriggeringProgressUpgrade();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(gv_playerWorker[EventPlayer()], "AFKTimer", gv_playerWorker[EventPlayer()], 1);
    autoCBF2B4B2_val = libNtve_gf_TriggeringProgressUpgrade();
    if (autoCBF2B4B2_val == "Income1") {
        UnitCreateEffectUnit(EventUnit(), "Tier2Effect", EventUnit());
    }
    else if (autoCBF2B4B2_val == "Income2") {
        UnitCreateEffectUnit(EventUnit(), "Tier2Effect", EventUnit());
    }
    else if (autoCBF2B4B2_val == "Income3") {
        UnitCreateEffectUnit(EventUnit(), "Tier2Effect", EventUnit());
    }
    else if (autoCBF2B4B2_val == "Tier2") {
        UnitCreateEffectUnit(EventUnit(), "Tier2Effect", EventUnit());
    }
    else if (autoCBF2B4B2_val == "Tier3") {
        UnitCreateEffectUnit(EventUnit(), "Tier2Effect", EventUnit());
    }
    else {
        UnitCreateEffectUnit(EventUnit(), "UpgradeEffect", EventUnit());
    }
    auto029B27B7_val = lv_r;
    if (auto029B27B7_val == 0) {
        autoD27A9930_val = lv_u;
        if (autoD27A9930_val == "ProtossGroundWeaponsLevel1") {
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ProtossGroundWeaponsLevel1a", 1);
        }
        else if (autoD27A9930_val == "ProtossGroundWeaponsLevel2") {
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ProtossGroundWeaponsLevel2a", 1);
        }
        else if (autoD27A9930_val == "ProtossGroundWeaponsLevel3") {
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ProtossGroundWeaponsLevel3a", 1);
        }
        else if (autoD27A9930_val == "ProtossGroundArmorsLevel1") {
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ProtossGroundArmorLevel1a", 1);
        }
        else if (autoD27A9930_val == "ProtossGroundArmorsLevel2") {
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ProtossGroundArmorLevel2a", 1);
        }
        else if (autoD27A9930_val == "ProtossGroundArmorsLevel3") {
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ProtossGroundArmorLevel3a", 1);
        }
        else if (autoD27A9930_val == "ProtossAirArmorsLevel1") {
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ProtossAirArmorLevel1a", 1);
        }
        else if (autoD27A9930_val == "ProtossAirArmorsLevel2") {
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ProtossAirArmorLevel2a", 1);
        }
        else if (autoD27A9930_val == "ProtossAirArmorsLevel3") {
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ProtossAirArmorLevel3a", 1);
        }
        else if (autoD27A9930_val == "ProtossShieldsLevel1") {
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ProtossShieldsLevel1a", 1);
        }
        else if (autoD27A9930_val == "ProtossShieldsLevel2") {
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ProtossShieldsLevel2a", 1);
        }
        else if (autoD27A9930_val == "ProtossShieldsLevel3") {
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ProtossShieldsLevel3a", 1);
        }
        else {
        }
    }
    else if (auto029B27B7_val == 1) {
        autoC7E7495D_val = lv_u;
        if (autoC7E7495D_val == "TerranInfantryWeaponsLevel1") {
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TerranInfantryWeaponsLevel1a", 1);
        }
        else if (autoC7E7495D_val == "TerranInfantryWeaponsLevel2") {
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TerranInfantryWeaponsLevel2a", 1);
        }
        else if (autoC7E7495D_val == "TerranInfantryWeaponsLevel3") {
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TerranInfantryWeaponsLevel3a", 1);
        }
        else if (autoC7E7495D_val == "TerranInfantryArmorsLevel1") {
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TerranInfantryArmorLevel1a", 1);
        }
        else if (autoC7E7495D_val == "TerranInfantryArmorsLevel2") {
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TerranInfantryArmorLevel2a", 1);
        }
        else if (autoC7E7495D_val == "TerranInfantryArmorsLevel3") {
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TerranInfantryArmorLevel3a", 1);
        }
        else if (autoC7E7495D_val == "TerranVehicleWeaponsLevel1") {
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TerranVehicleWeaponsLevel1a", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TerranShipWeaponsLevel1", 1);
        }
        else if (autoC7E7495D_val == "TerranVehicleWeaponsLevel2") {
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TerranVehicleWeaponsLevel2a", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TerranShipWeaponsLevel2", 1);
        }
        else if (autoC7E7495D_val == "TerranVehicleWeaponsLevel3") {
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TerranVehicleWeaponsLevel3a", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TerranShipWeaponsLevel3", 1);
        }
        else if (autoC7E7495D_val == "TerranVehicleArmorsLevel1") {
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TerranVehiclePlatingLevel1a", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TerranShipArmorsLevel1", 1);
        }
        else if (autoC7E7495D_val == "TerranVehicleArmorsLevel2") {
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TerranVehiclePlatingLevel2a", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TerranShipArmorsLevel2", 1);
        }
        else if (autoC7E7495D_val == "TerranVehicleArmorsLevel3") {
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TerranVehiclePlatingLevel3a", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TerranShipArmorsLevel3", 1);
        }
        else if (autoC7E7495D_val == "DurableMaterials") {
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "DurableMaterialsAdd", 1);
        }
        else if (autoC7E7495D_val == "ShieldWall") {
            if ((TechTreeUpgradeCount(EventPlayer(), "MarineAdd", c_techCountCompleteOnly) == 0)) {
                libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "CombatShieldAdd", 1);
            }
            else {
                libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "CombatShieldAddXPReward", 1);
            }
        }
        else if (autoC7E7495D_val == "BattlecruiserEnableSpecializations") {
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "WeaponRefitAdd", 1);
        }
        else if (autoC7E7495D_val == "GhostMoebiusReactor") {
            CatalogFieldValueSet(c_gameCatalogUnit, "GhostSpawner", "EnergyStart", EventPlayer(), "75");
            UnitGroupLoopBegin(UnitGroup("GhostSpawner", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergy, 75.0);
            }
            UnitGroupLoopEnd();
        }
        else if (autoC7E7495D_val == "MedivacCaduceusReactor") {
            CatalogFieldValueSet(c_gameCatalogUnit, "MedivacSpawner", "EnergyStart", EventPlayer(), "75");
            UnitGroupLoopBegin(UnitGroup("MedivacSpawner", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergy, 75.0);
            }
            UnitGroupLoopEnd();
        }
        else if (autoC7E7495D_val == "RavenCorvidReactor") {
            CatalogFieldValueSet(c_gameCatalogUnit, "RavenSpawner", "EnergyStart", EventPlayer(), "75");
            UnitGroupLoopBegin(UnitGroup("RavenSpawner", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergy, 75.0);
            }
            UnitGroupLoopEnd();
        }
        else if (autoC7E7495D_val == "BattlecruiserBehemothReactor") {
            CatalogFieldValueSet(c_gameCatalogUnit, "BattlecruiserSpawner", "EnergyStart", EventPlayer(), "75");
            UnitGroupLoopBegin(UnitGroup("BattlecruiserSpawner", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergy, 75.0);
            }
            UnitGroupLoopEnd();
        }
        else {
        }
    }
    else if (auto029B27B7_val == 2) {
        auto0E4AD1DE_val = lv_u;
        if (auto0E4AD1DE_val == "ZergMeleeWeaponsLevel1") {
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ZergMeleeAttacksLevel1a", 1);
        }
        else if (auto0E4AD1DE_val == "ZergMeleeWeaponsLevel2") {
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ZergMeleeAttacksLevel2a", 1);
        }
        else if (auto0E4AD1DE_val == "ZergMeleeWeaponsLevel3") {
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ZergMeleeAttacksLevel3a", 1);
        }
        else if (auto0E4AD1DE_val == "ZergMissileWeaponsLevel1") {
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ZergMissileAttacksLevel1a", 1);
        }
        else if (auto0E4AD1DE_val == "ZergMissileWeaponsLevel2") {
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ZergMissileAttacksLevel2a", 1);
        }
        else if (auto0E4AD1DE_val == "ZergMissileWeaponsLevel3") {
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ZergMissileAttacksLevel3a", 1);
        }
        else if (auto0E4AD1DE_val == "ZergGroundArmorsLevel1") {
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ZergGroundCarapaceLevel1a", 1);
        }
        else if (auto0E4AD1DE_val == "ZergGroundArmorsLevel2") {
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ZergGroundCarapaceLevel2a", 1);
        }
        else if (auto0E4AD1DE_val == "ZergGroundArmorsLevel3") {
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ZergGroundCarapaceLevel3a", 1);
        }
        else if (auto0E4AD1DE_val == "ZergFlyerArmorsLevel1") {
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ZergFlyerCarapaceLevel1a", 1);
        }
        else if (auto0E4AD1DE_val == "ZergFlyerArmorsLevel2") {
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ZergFlyerCarapaceLevel2a", 1);
        }
        else if (auto0E4AD1DE_val == "ZergFlyerArmorsLevel3") {
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ZergFlyerCarapaceLevel3a", 1);
        }
        else if (auto0E4AD1DE_val == "zerglingmovementspeed") {
            if ((TechTreeUpgradeCount(EventPlayer(), "ZerglingAdd", c_techCountCompleteOnly) == 0)) {
                libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MetabolicBoostAdd", 1);
            }
            else {
                libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MetabolicBoostAddXP", 1);
            }
        }
        else if (auto0E4AD1DE_val == "ChitinousPlating") {
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ChitinousPlatingAdd", 1);
        }
        else if (auto0E4AD1DE_val == "TunnelingClaws") {
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TunnelingClawsAdd", 1);
        }
        else if (auto0E4AD1DE_val == "InfestorEnergyUpgrade") {
            CatalogFieldValueSet(c_gameCatalogUnit, "InfestorSpawner", "EnergyStart", EventPlayer(), "75");
            UnitGroupLoopBegin(UnitGroup("InfestorSpawner", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergy, 75.0);
            }
            UnitGroupLoopEnd();
        }
        else {
        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Upgrade_Init () {
    gt_Upgrade = TriggerCreate("gt_Upgrade_Func");
    TriggerAddEventUnitResearchProgress(gt_Upgrade, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reposition
//--------------------------------------------------------------------------------------------------
bool gt_Reposition_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSelect(EventUnit(), UnitGetOwner(EventUnitCreatedUnit()), false);
    UnitSetPosition(EventUnit(), UnitGetPosition(EventUnitCreatedUnit()), false);
    libNtve_gf_SendActorMessageToUnit(EventUnit(), "Signal Birth");
    UnitRemove(EventUnitCreatedUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Reposition_Init () {
    gt_Reposition = TriggerCreate("gt_Reposition_Func");
    TriggerAddEventUnitCreated(gt_Reposition, null, "TerranUnitsReposition", null);
    TriggerAddEventUnitCreated(gt_Reposition, null, "ProtossUnitsReposition", null);
    TriggerAddEventUnitCreated(gt_Reposition, null, "ZergUnitsReposition", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Unit
//--------------------------------------------------------------------------------------------------
bool gt_CreateUnit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_switch;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(gv_playerWorker[UnitGetOwner(EventUnitCreatedUnit())], "AFKTimer", gv_playerWorker[UnitGetOwner(EventUnitCreatedUnit())], 1);
    UnitGroupAdd(gv_playerSpawners[UnitGetOwner(EventUnitCreatedUnit())], EventUnitCreatedUnit());
    UnitSetFacing(EventUnitCreatedUnit(), gv_playerFacing[UnitGetOwner(EventUnitCreatedUnit())], 0.0);
    UnitSetPropertyFixed(EventUnitCreatedUnit(), c_unitPropLifeRegen, 1000.0);
    if ((UnitFilterMatch(EventUnitCreatedUnit(), UnitGetOwner(EventUnitCreatedUnit()), UnitFilter(0, (1 << (c_targetFilterHasShields - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true)) {
        UnitSetPropertyFixed(EventUnitCreatedUnit(), c_unitPropShieldsRegen, 1000.0);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateUnit_Init () {
    gt_CreateUnit = TriggerCreate("gt_CreateUnit_Func");
    TriggerAddEventUnitCreated(gt_CreateUnit, null, "ProtossUnits", null);
    TriggerAddEventUnitCreated(gt_CreateUnit, null, "TerranUnits", null);
    TriggerAddEventUnitCreated(gt_CreateUnit, null, "TerranUnitsHellbat", null);
    TriggerAddEventUnitCreated(gt_CreateUnit, null, "TerranUnitsHellion", null);
    TriggerAddEventUnitCreated(gt_CreateUnit, null, "TerranUnitsVikingAssault", null);
    TriggerAddEventUnitCreated(gt_CreateUnit, null, "TerranUnitsVikingFighter", null);
    TriggerAddEventUnitCreated(gt_CreateUnit, null, "TerranUnitsThorNormal", null);
    TriggerAddEventUnitCreated(gt_CreateUnit, null, "TerranUnitsThorSpecial", null);
    TriggerAddEventUnitCreated(gt_CreateUnit, null, "ZergUnits", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Morph Target
//--------------------------------------------------------------------------------------------------
bool gt_MorphTarget_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(gv_playerWorker[EventPlayer()], "AFKTimer", gv_playerWorker[EventPlayer()], 1);
    UnitSetPosition(EventUnit(), EventUnitTargetPoint(), false);
    UnitSetFacing(EventUnit(), gv_playerFacing[EventPlayer()], 0.0);
    libNtve_gf_SendActorMessageToUnit(EventUnit(), "Signal Birth");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MorphTarget_Init () {
    gt_MorphTarget = TriggerCreate("gt_MorphTarget_Func");
    TriggerAddEventUnitAbility(gt_MorphTarget, null, AbilityCommand("MorphtoVikingGround", 0), c_abilMorphStageMoverEnd, false);
    TriggerAddEventUnitAbility(gt_MorphTarget, null, AbilityCommand("MorphtoVikingAir", 0), c_abilMorphStageMoverEnd, false);
    TriggerAddEventUnitAbility(gt_MorphTarget, null, AbilityCommand("MorphtoArchon", 0), c_abilMorphStageMoverEnd, false);
    TriggerAddEventUnitAbility(gt_MorphTarget, null, AbilityCommand("MorphtoBroodLord", 0), c_abilMorphStageMoverEnd, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Morph Instant
//--------------------------------------------------------------------------------------------------
bool gt_MorphInstant_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(gv_playerWorker[EventPlayer()], "AFKTimer", gv_playerWorker[EventPlayer()], 1);
    UnitSetFacing(EventUnit(), gv_playerFacing[EventPlayer()], 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MorphInstant_Init () {
    gt_MorphInstant = TriggerCreate("gt_MorphInstant_Func");
    TriggerAddEventUnitAbility(gt_MorphInstant, null, AbilityCommand("MorphtoBaneling", 0), c_abilMorphStageMoverEnd, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Switch Hellbat
//--------------------------------------------------------------------------------------------------
bool gt_SwitchHellbat_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventUnit(), OrderSetAutoCast(EventUnitAbility(), false), c_orderQueueReplace);
    TechTreeAbilityAllow(EventPlayer(), AbilityCommand("TerranUnitsHellbat", 0), true);
    TechTreeAbilityAllow(EventPlayer(), AbilityCommand("TerranUnitsHellion", 0), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SwitchHellbat_Init () {
    gt_SwitchHellbat = TriggerCreate("gt_SwitchHellbat_Func");
    TriggerAddEventUnitAbilityAutoCastChange(gt_SwitchHellbat, null, AbilityCommand("TerranUnitsHellion", 0), c_unitAbilAutoCastChangeOn, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Switch Hellion
//--------------------------------------------------------------------------------------------------
bool gt_SwitchHellion_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventUnit(), OrderSetAutoCast(EventUnitAbility(), false), c_orderQueueReplace);
    TechTreeAbilityAllow(EventPlayer(), AbilityCommand("TerranUnitsHellion", 0), true);
    TechTreeAbilityAllow(EventPlayer(), AbilityCommand("TerranUnitsHellbat", 0), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SwitchHellion_Init () {
    gt_SwitchHellion = TriggerCreate("gt_SwitchHellion_Func");
    TriggerAddEventUnitAbilityAutoCastChange(gt_SwitchHellion, null, AbilityCommand("TerranUnitsHellbat", 0), c_unitAbilAutoCastChangeOn, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Switch Viking Assault
//--------------------------------------------------------------------------------------------------
bool gt_SwitchVikingAssault_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventUnit(), OrderSetAutoCast(EventUnitAbility(), false), c_orderQueueReplace);
    TechTreeAbilityAllow(EventPlayer(), AbilityCommand("TerranUnitsVikingAssault", 0), true);
    TechTreeAbilityAllow(EventPlayer(), AbilityCommand("TerranUnitsVikingFighter", 0), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SwitchVikingAssault_Init () {
    gt_SwitchVikingAssault = TriggerCreate("gt_SwitchVikingAssault_Func");
    TriggerAddEventUnitAbilityAutoCastChange(gt_SwitchVikingAssault, null, AbilityCommand("TerranUnitsVikingFighter", 0), c_unitAbilAutoCastChangeOn, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Switch Viking Fighter
//--------------------------------------------------------------------------------------------------
bool gt_SwitchVikingFighter_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventUnit(), OrderSetAutoCast(EventUnitAbility(), false), c_orderQueueReplace);
    TechTreeAbilityAllow(EventPlayer(), AbilityCommand("TerranUnitsVikingFighter", 0), true);
    TechTreeAbilityAllow(EventPlayer(), AbilityCommand("TerranUnitsVikingAssault", 0), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SwitchVikingFighter_Init () {
    gt_SwitchVikingFighter = TriggerCreate("gt_SwitchVikingFighter_Func");
    TriggerAddEventUnitAbilityAutoCastChange(gt_SwitchVikingFighter, null, AbilityCommand("TerranUnitsVikingAssault", 0), c_unitAbilAutoCastChangeOn, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Switch Thor Normal
//--------------------------------------------------------------------------------------------------
bool gt_SwitchThorNormal_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventUnit(), OrderSetAutoCast(EventUnitAbility(), false), c_orderQueueReplace);
    TechTreeAbilityAllow(EventPlayer(), AbilityCommand("TerranUnitsThorNormal", 0), true);
    TechTreeAbilityAllow(EventPlayer(), AbilityCommand("TerranUnitsThorSpecial", 0), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SwitchThorNormal_Init () {
    gt_SwitchThorNormal = TriggerCreate("gt_SwitchThorNormal_Func");
    TriggerAddEventUnitAbilityAutoCastChange(gt_SwitchThorNormal, null, AbilityCommand("TerranUnitsThorSpecial", 0), c_unitAbilAutoCastChangeOn, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Switch Thor Special
//--------------------------------------------------------------------------------------------------
bool gt_SwitchThorSpecial_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventUnit(), OrderSetAutoCast(EventUnitAbility(), false), c_orderQueueReplace);
    TechTreeAbilityAllow(EventPlayer(), AbilityCommand("TerranUnitsThorSpecial", 0), true);
    TechTreeAbilityAllow(EventPlayer(), AbilityCommand("TerranUnitsThorNormal", 0), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SwitchThorSpecial_Init () {
    gt_SwitchThorSpecial = TriggerCreate("gt_SwitchThorSpecial_Func");
    TriggerAddEventUnitAbilityAutoCastChange(gt_SwitchThorSpecial, null, AbilityCommand("TerranUnitsThorNormal", 0), c_unitAbilAutoCastChangeOn, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Avatar
//--------------------------------------------------------------------------------------------------
bool gt_PlayerAvatar_Func (bool testConds, bool runActions) {
    int auto12C0A5DC_ae;
    int auto12C0A5DC_ai;
    int autoA61B1E84_ae;
    int autoA61B1E84_ai;
    int auto5577868B_val;
    int autoCBDDBE6E_val;

    // Variable Declarations
    int lv_avatarOuter;
    int lv_avatarInner;
    int lv_barX;
    int lv_barY;
    int lv_i;
    int lv_x;

    // Variable Initialization
    lv_avatarOuter = 136;
    lv_avatarInner = 100;
    lv_barX = 300;
    lv_barY = 40;
    lv_x = 1000;

    // Actions
    if (!runActions) {
        return true;
    }

    auto12C0A5DC_ae = gv_levelCap;
    auto12C0A5DC_ai = 1;
    lv_i = 2;
    for ( ; ( (auto12C0A5DC_ai >= 0 && lv_i <= auto12C0A5DC_ae) || (auto12C0A5DC_ai <= 0 && lv_i >= auto12C0A5DC_ae) ) ; lv_i += auto12C0A5DC_ai ) {
        gv_databaseExperienceNeeded[lv_i] = (gv_databaseExperienceNeeded[(lv_i - 1)] + lv_x);
        lv_x += 500;
    }
    autoA61B1E84_ae = gv_levelCap;
    autoA61B1E84_ai = 1;
    lv_i = 1;
    for ( ; ( (autoA61B1E84_ai >= 0 && lv_i <= autoA61B1E84_ae) || (autoA61B1E84_ai <= 0 && lv_i >= autoA61B1E84_ae) ) ; lv_i += autoA61B1E84_ai ) {
        gv_experienceCap += gv_databaseExperienceNeeded[lv_i];
    }
    DialogCreate(lv_barX, lv_barY, c_anchorTopLeft, 5, 5, true);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_barX - 10), lv_barY, c_anchorLeft, 5, 1, StringExternal("Param/Value/353BC708"), "Assets\\Textures\\ui_loadingbar_metalframe_protoss.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    PlayerGroupLoopBegin(PlayerGroupActive());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        auto5577868B_val = gv_playerRace[PlayerGroupLoopCurrent()];
        if (auto5577868B_val == 0) {
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_barX - 10), lv_barY, c_anchorLeft, 5, 1, StringExternal("Param/Value/C6E50B76"), "Assets\\Textures\\ui_loadingbar_metalframe_protoss.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 1, (lv_barY - 12), c_anchorLeft, 12, 1, StringExternal("Param/Value/B6F35DDE"), "Assets\\Textures\\ui_streaming_movie_progressbar.dds", c_triggerImageTypeBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
        }
        else if (auto5577868B_val == 1) {
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_barX - 10), lv_barY, c_anchorLeft, 5, 1, StringExternal("Param/Value/C3D5E217"), "Assets\\Textures\\ui_loadingbar_metalframe_teran.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 1, (lv_barY - 12), c_anchorLeft, 12, 1, StringExternal("Param/Value/DBC4F12B"), "ui_streaming_movie_progressbar_terran.dds", c_triggerImageTypeBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
        }
        else if (auto5577868B_val == 2) {
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_barX - 10), lv_barY, c_anchorLeft, 5, 1, StringExternal("Param/Value/EFAA3657"), "Assets\\Textures\\ui_loadingbar_metalframe_zerg.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 1, (lv_barY - 12), c_anchorLeft, 12, 1, StringExternal("Param/Value/21C3148B"), "ui_streaming_movie_progressbar_zerg.dds", c_triggerImageTypeBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
        }
        else {
        }
    }
    PlayerGroupLoopEnd();
    gv_avatarBar = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 290, 25, c_anchorCenter, 0, 1, StringExternal("Param/Value/78ACF21A"), (StringExternal("Param/Value/1455FAB8") + IntToText(gv_databaseExperienceNeeded[0])), "");
    gv_avatarExperienceText = DialogControlLastCreated();
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\black.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImage2(DialogControlLastCreated(), "Assets\\Textures\\black.dds", PlayerGroupAll());
    DialogCreate(44, 30, c_anchorTopLeft, 0, 30, true);
    gv_avatarLevelDialog = DialogLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    PlayerGroupLoopBegin(PlayerGroupActive());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        autoCBDDBE6E_val = gv_playerRace[PlayerGroupLoopCurrent()];
        if (autoCBDDBE6E_val == 0) {
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 44, 30, c_anchorCenter, 0, 0, StringExternal("Param/Value/82427182"), "Assets\\Textures\\ui_multiplayerload_avatarborder_levelbg.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        }
        else if (autoCBDDBE6E_val == 1) {
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 44, 30, c_anchorCenter, 0, 0, StringExternal("Param/Value/A2D97149"), "ui_multiplayerload_avatarborder_levelbg_terran.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        }
        else if (autoCBDDBE6E_val == 2) {
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 44, 30, c_anchorCenter, 0, 0, StringExternal("Param/Value/A161996A"), "ui_multiplayerload_avatarborder_levelbg_zerg.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        }
        else {
        }
    }
    PlayerGroupLoopEnd();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 44, 30, c_anchorCenter, 0, -2, StringExternal("Param/Value/C5BE4C40"), StringExternal("Param/Value/4E175AFC"), "");
    gv_avatarExperienceLevel = DialogControlLastCreated();
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\black.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImage2(DialogControlLastCreated(), "Assets\\Textures\\black.dds", PlayerGroupAll());
    Wait(0.0625, c_timeGame);
    PlayerGroupLoopBegin(PlayerGroupActive());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        BankLoad("llIlIIlIlIllIllI", PlayerGroupLoopCurrent());
        BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
        gv_sTATBank[PlayerGroupLoopCurrent()] = BankLastCreated();
    }
    PlayerGroupLoopEnd();
    PlayerGroupLoopBegin(PlayerGroupActive());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((PlayerType(PlayerGroupLoopCurrent()) == c_playerTypeUser) && (PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusActive) && (BankVerify(gv_sTATBank[PlayerGroupLoopCurrent()]) == true)) {
            gv_sTATExperience[PlayerGroupLoopCurrent()] = BankValueGetAsInt(gv_sTATBank[PlayerGroupLoopCurrent()], "IIlIlIIlllIIII", "IllIIIIIlIIIII");
            gv_talentsCurrent[PlayerGroupLoopCurrent()] = BankValueGetAsInt(gv_sTATBank[PlayerGroupLoopCurrent()], "lllllIIlIllIIllI", "lllllllIlIllIIII");
            if ((gv_talentsCurrent[PlayerGroupLoopCurrent()] != 0)) {
                DialogControlSetPositionRelative(gv_talentsHighlight, PlayerGroupSingle(PlayerGroupLoopCurrent()), c_anchorCenter, gv_talentsButton[gv_talentsCurrent[PlayerGroupLoopCurrent()]], c_anchorCenter, 0, 0);
                DialogControlSetVisible(gv_talentsHighlight, PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
            }
            else {
            }
        }
        else {
        }
        gv_avatarExperienceCurrent[PlayerGroupLoopCurrent()] = gv_sTATExperience[PlayerGroupLoopCurrent()];
        gf_UpdateStatUI(PlayerGroupLoopCurrent());
        gf_UpdateTalents(PlayerGroupLoopCurrent());
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerAvatar_Init () {
    gt_PlayerAvatar = TriggerCreate("gt_PlayerAvatar_Func");
    TriggerAddEventMapInit(gt_PlayerAvatar);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Level-up Animation
//--------------------------------------------------------------------------------------------------
bool gt_LevelupAnimation_Func (bool testConds, bool runActions) {
    int init_i;

    int auto5EE434C7_val;
    int auto72070536_val;
    int auto1CDF7554_val;
    int auto86D6C278_val;
    int autoD61A6C61_ae;
    int autoD61A6C61_ai;
    int autoEC1B3CD7_ae;
    int autoEC1B3CD7_ai;
    int autoB0764A0B_ae;
    int autoB0764A0B_ai;

    // Variable Declarations
    int[3] lv_dialogs;
    int[5] lv_dialogItemSet1;
    int[2] lv_dialogItemSet2;
    int[2] lv_dialogItemSet3;
    int lv_i;

    // Variable Initialization
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lv_dialogs[init_i] = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        lv_dialogItemSet1[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 1; init_i += 1) {
        lv_dialogItemSet2[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 1; init_i += 1) {
        lv_dialogItemSet3[init_i] = c_invalidDialogControlId;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlay(SoundLink("UI_ObjectiveComplete", -1), PlayerGroupSingle(gv_levelupAnimation), 100.0, 0.0);
    DialogCreate(360, 60, c_anchorTopLeft, 10, 70, true);
    lv_dialogs[0] = DialogLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(gv_levelupAnimation), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    auto5EE434C7_val = gv_playerRace[gv_levelupAnimation];
    if (auto5EE434C7_val == 0) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), DialogGetWidth(DialogLastCreated()), DialogGetHeight(DialogLastCreated()), c_anchorCenter, 0, 0, StringExternal("Param/Value/9782EBD7"), "Assets\\Textures\\ui_tooltip_frame_protoss.dds", c_triggerImageTypeBorder, true, Color(100,100,100), c_triggerBlendModeNormal);
    }
    else if (auto5EE434C7_val == 1) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), DialogGetWidth(DialogLastCreated()), DialogGetHeight(DialogLastCreated()), c_anchorCenter, 0, 0, StringExternal("Param/Value/1CB172E3"), "Assets\\Textures\\ui_tooltip_frame_terran.dds", c_triggerImageTypeBorder, true, Color(100,100,100), c_triggerBlendModeNormal);
    }
    else if (auto5EE434C7_val == 2) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), DialogGetWidth(DialogLastCreated()), DialogGetHeight(DialogLastCreated()), c_anchorCenter, 0, 0, StringExternal("Param/Value/58EFFF06"), "Assets\\Textures\\ui_tooltip_frame_zerg.dds", c_triggerImageTypeBorder, true, Color(100,100,100), c_triggerBlendModeNormal);
    }
    else {
    }
    lv_dialogItemSet2[0] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.5, 0.0);
    auto72070536_val = gv_playerRace[gv_levelupAnimation];
    if (auto72070536_val == 0) {
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), DialogGetWidth(DialogLastCreated()), DialogGetHeight(DialogLastCreated()), c_anchorCenter, 0, 0, (StringExternal("Param/Value/B0CE39FC") + IntToText(gv_avatarExperienceCurrentLevel[gv_levelupAnimation]) + StringExternal("Param/Value/FB4F40CE")), ColorWithAlpha(0,0,0,0), true, 0.5);
    }
    else if (auto72070536_val == 1) {
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), DialogGetWidth(DialogLastCreated()), DialogGetHeight(DialogLastCreated()), c_anchorCenter, 0, 0, (StringExternal("Param/Value/56071324") + IntToText(gv_avatarExperienceCurrentLevel[gv_levelupAnimation]) + StringExternal("Param/Value/66CC0122")), ColorWithAlpha(0,0,0,0), true, 0.5);
    }
    else if (auto72070536_val == 2) {
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), DialogGetWidth(DialogLastCreated()), DialogGetHeight(DialogLastCreated()), c_anchorCenter, 0, 0, (StringExternal("Param/Value/B88C56A7") + IntToText(gv_avatarExperienceCurrentLevel[gv_levelupAnimation]) + StringExternal("Param/Value/D516A8BA")), ColorWithAlpha(0,0,0,0), true, 0.5);
    }
    else {
    }
    lv_dialogItemSet2[1] = DialogControlLastCreated();
    DialogCreate(360, 60, c_anchorTop, 0, 100, true);
    DialogSetPositionRelative(DialogLastCreated(), c_anchorTop, lv_dialogs[0], c_anchorBottom, 0, 5);
    lv_dialogs[1] = DialogLastCreated();
    if (((gv_avatarExperienceCurrentLevel[gv_levelupAnimation] == 2) || (gv_avatarExperienceCurrentLevel[gv_levelupAnimation] == 3) || (gv_avatarExperienceCurrentLevel[gv_levelupAnimation] == 4) || (gv_avatarExperienceCurrentLevel[gv_levelupAnimation] == 6) || (gv_avatarExperienceCurrentLevel[gv_levelupAnimation] == 8) || (gv_avatarExperienceCurrentLevel[gv_levelupAnimation] == 10) || (gv_avatarExperienceCurrentLevel[gv_levelupAnimation] == 13) || (gv_avatarExperienceCurrentLevel[gv_levelupAnimation] == 16) || (gv_avatarExperienceCurrentLevel[gv_levelupAnimation] == 20))) {
        DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(gv_levelupAnimation), true);
    }
    else {
    }
    DialogSetImageVisible(DialogLastCreated(), false);
    auto1CDF7554_val = gv_playerRace[gv_levelupAnimation];
    if (auto1CDF7554_val == 0) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), DialogGetWidth(DialogLastCreated()), DialogGetHeight(DialogLastCreated()), c_anchorCenter, 0, 0, StringExternal("Param/Value/15EBFF81"), "Assets\\Textures\\ui_tooltip_frame_protoss.dds", c_triggerImageTypeBorder, true, Color(100,100,100), c_triggerBlendModeNormal);
    }
    else if (auto1CDF7554_val == 1) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), DialogGetWidth(DialogLastCreated()), DialogGetHeight(DialogLastCreated()), c_anchorCenter, 0, 0, StringExternal("Param/Value/A917B1EA"), "Assets\\Textures\\ui_tooltip_frame_terran.dds", c_triggerImageTypeBorder, true, Color(100,100,100), c_triggerBlendModeNormal);
    }
    else if (auto1CDF7554_val == 2) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), DialogGetWidth(DialogLastCreated()), DialogGetHeight(DialogLastCreated()), c_anchorCenter, 0, 0, StringExternal("Param/Value/D6D9AD05"), "Assets\\Textures\\ui_tooltip_frame_zerg.dds", c_triggerImageTypeBorder, true, Color(100,100,100), c_triggerBlendModeNormal);
    }
    else {
    }
    lv_dialogItemSet3[0] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.5, 0.0);
    auto86D6C278_val = gv_playerRace[gv_levelupAnimation];
    if (auto86D6C278_val == 0) {
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), DialogGetWidth(DialogLastCreated()), DialogGetHeight(DialogLastCreated()), c_anchorCenter, 0, 0, StringExternal("Param/Value/D1B96D02"), ColorWithAlpha(0,0,0,0), true, 0.5);
    }
    else if (auto86D6C278_val == 1) {
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), DialogGetWidth(DialogLastCreated()), DialogGetHeight(DialogLastCreated()), c_anchorCenter, 0, 0, StringExternal("Param/Value/A526E7EA"), ColorWithAlpha(0,0,0,0), true, 0.5);
    }
    else if (auto86D6C278_val == 2) {
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), DialogGetWidth(DialogLastCreated()), DialogGetHeight(DialogLastCreated()), c_anchorCenter, 0, 0, StringExternal("Param/Value/DA777348"), ColorWithAlpha(0,0,0,0), true, 0.5);
    }
    else {
    }
    lv_dialogItemSet3[1] = DialogControlLastCreated();
    DialogCreate(400, 400, c_anchorTopLeft, 0, 0, true);
    lv_dialogs[2] = DialogLastCreated();
    DialogSetPositionRelative(DialogLastCreated(), c_anchorCenter, gv_avatarLevelDialog, c_anchorCenter, 0, 5);
    DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(gv_levelupAnimation), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    autoD61A6C61_ae = 4;
    autoD61A6C61_ai = 1;
    lv_i = 0;
    for ( ; ( (autoD61A6C61_ai >= 0 && lv_i <= autoD61A6C61_ae) || (autoD61A6C61_ai <= 0 && lv_i >= autoD61A6C61_ae) ) ; lv_i += autoD61A6C61_ai ) {
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypePortrait);
        lv_dialogItemSet1[lv_i] = DialogControlLastCreated();
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 0);
        libNtve_gf_SetDialogItemRenderType(DialogControlLastCreated(), c_triggerRenderTypeLDR, PlayerGroupAll());
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 400, 400);
        libNtve_gf_SetDialogItemModel(DialogControlLastCreated(), "LevelupGraphic", PlayerGroupAll());
        libNtve_gf_SetDialogItemAnimation(DialogControlLastCreated(), "Birth", PlayerGroupAll());
        libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid03", PlayerGroupAll());
        libNtve_gf_SetDialogItemLight(DialogControlLastCreated(), "MarSara", PlayerGroupAll());
        libNtve_gf_SetDialogItemBorderVisible(DialogControlLastCreated(), false, PlayerGroupAll());
        libNtve_gf_SetDialogItemBackgroundVisible(DialogControlLastCreated(), false, PlayerGroupAll());
        libNtve_gf_SetDialogItemUseTransition(DialogControlLastCreated(), false, PlayerGroupAll());
    }
    Wait(1.0, c_timeGame);
    autoEC1B3CD7_ae = 4;
    autoEC1B3CD7_ai = 1;
    lv_i = 0;
    for ( ; ( (autoEC1B3CD7_ai >= 0 && lv_i <= autoEC1B3CD7_ae) || (autoEC1B3CD7_ai <= 0 && lv_i >= autoEC1B3CD7_ae) ) ; lv_i += autoEC1B3CD7_ai ) {
        libNtve_gf_SetDialogItemAnimation(lv_dialogItemSet1[lv_i], "Stand", PlayerGroupAll());
    }
    Wait(2.5, c_timeGame);
    autoB0764A0B_ae = 4;
    autoB0764A0B_ai = 1;
    lv_i = 0;
    for ( ; ( (autoB0764A0B_ai >= 0 && lv_i <= autoB0764A0B_ae) || (autoB0764A0B_ai <= 0 && lv_i >= autoB0764A0B_ae) ) ; lv_i += autoB0764A0B_ai ) {
        libNtve_gf_SetDialogItemAnimation(lv_dialogItemSet1[lv_i], "Death", PlayerGroupAll());
    }
    Wait(2.0, c_timeGame);
    DialogDestroy(lv_dialogs[2]);
    Wait(5.0, c_timeGame);
    DialogControlFadeTransparency(lv_dialogItemSet2[0], PlayerGroupAll(), 0.5, 100.0);
    DialogControlFadeTransparency(lv_dialogItemSet2[1], PlayerGroupAll(), 0.5, 100.0);
    DialogControlFadeTransparency(lv_dialogItemSet3[0], PlayerGroupAll(), 0.5, 100.0);
    DialogControlFadeTransparency(lv_dialogItemSet3[1], PlayerGroupAll(), 0.5, 100.0);
    Wait(0.5, c_timeGame);
    DialogDestroy(lv_dialogs[0]);
    DialogDestroy(lv_dialogs[1]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LevelupAnimation_Init () {
    gt_LevelupAnimation = TriggerCreate("gt_LevelupAnimation_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Talents Create
//--------------------------------------------------------------------------------------------------
bool gt_TalentsCreate_Func (bool testConds, bool runActions) {
    string auto1C3BE293_val;
    int auto5C08E084_ae;
    int auto5C08E084_ai;
    int auto7B816966_ae;
    int auto7B816966_ai;
    string autoEBB24CA1_val;
    string auto6D9B0DE3_val;

    // Variable Declarations
    int lv_x;
    int lv_y;
    int lv_i;
    int lv_width;
    int lv_height;
    int lv_buttonSize;
    text[30] lv_talentName;
    text[30] lv_talentTooltip;
    text[30] lv_talentRequirement;
    string[30] lv_talentIcon;

    // Variable Initialization
    lv_width = 3;
    lv_height = 3;
    lv_buttonSize = 76;

    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(50, 50, c_anchorBottomLeft, 75, 325, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), DialogGetWidth(DialogLastCreated()), DialogGetHeight(DialogLastCreated()), c_anchorCenter, 0, 0, StringExternal("Param/Value/06FBC7E0"), StringExternal("Param/Value/1B618D16"), "");
    gv_talentsShow[0] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
    PlayerGroupLoopBegin(PlayerGroupActive());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((gv_playerRace[PlayerGroupLoopCurrent()] == 0)) {
            libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "ui_abilitycontrol_protossnormal.dds", PlayerGroupSingle(PlayerGroupLoopCurrent()));
            libNtve_gf_SetDialogItemImage2(DialogControlLastCreated(), "ui_abilitycontrol_protossnormal.dds", PlayerGroupSingle(PlayerGroupLoopCurrent()));
        }
        else {
        }
        if ((gv_playerRace[PlayerGroupLoopCurrent()] == 1)) {
            libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "ui_abilitycontrol_terrannormal.dds", PlayerGroupSingle(PlayerGroupLoopCurrent()));
            libNtve_gf_SetDialogItemImage2(DialogControlLastCreated(), "ui_abilitycontrol_terrannormal.dds", PlayerGroupSingle(PlayerGroupLoopCurrent()));
        }
        else {
        }
        if ((gv_playerRace[PlayerGroupLoopCurrent()] == 2)) {
            libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "ui_abilitycontrol_zergnormal.dds", PlayerGroupSingle(PlayerGroupLoopCurrent()));
            libNtve_gf_SetDialogItemImage2(DialogControlLastCreated(), "ui_abilitycontrol_zergnormal.dds", PlayerGroupSingle(PlayerGroupLoopCurrent()));
        }
        else {
        }
    }
    PlayerGroupLoopEnd();
    libNtve_gf_SetDialogItemHotkey(DialogControlLastCreated(), c_hotkeyArmySelect, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 46, 46, c_anchorCenter, 0, 0, StringExternal("Param/Value/3B6CDCFC"), "Assets\\Textures\\btn-upgrade-terran-reapercombatdrugs.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_talentsShow[1] = DialogControlLastCreated();
    gv_talentsBehavior[lv_i] = "DeathOffCreep";
    lv_i = 1;
    lv_talentName[lv_i] = StringExternal("Param/Value/1E8607AF");
    lv_talentTooltip[lv_i] = StringExternal("Param/Value/C7F8D70C");
    lv_talentRequirement[lv_i] = StringExternal("Param/Value/D25E659B");
    lv_talentIcon[lv_i] = "Assets\\Textures\\btn-ability-kerrigan-heroicfortitude.dds";
    gv_talentsBehavior[lv_i] = "TalentRegeneration";
    gv_talentsRequirement[lv_i] = 2;
    lv_i += 1;
    lv_talentName[lv_i] = StringExternal("Param/Value/A32B7455");
    lv_talentTooltip[lv_i] = StringExternal("Param/Value/F2BF29D3");
    lv_talentIcon[lv_i] = "Assets\\Textures\\btn-ability-kerrigan-fury.dds";
    lv_talentRequirement[lv_i] = StringExternal("Param/Value/B72A2D13");
    gv_talentsBehavior[lv_i] = "TalentFury";
    gv_talentsRequirement[lv_i] = 3;
    lv_i += 1;
    lv_talentName[lv_i] = StringExternal("Param/Value/AEE02266");
    lv_talentTooltip[lv_i] = StringExternal("Param/Value/013AAA43");
    lv_talentIcon[lv_i] = "Assets\\Textures\\btn-ability-kerrigan-abilityefficiency.dds";
    lv_talentRequirement[lv_i] = StringExternal("Param/Value/81C6850D");
    gv_talentsBehavior[lv_i] = "TalentFocus";
    gv_talentsRequirement[lv_i] = 4;
    lv_i += 1;
    lv_talentName[lv_i] = StringExternal("Param/Value/6AA29981");
    lv_talentTooltip[lv_i] = StringExternal("Param/Value/5F2F94A0");
    lv_talentIcon[lv_i] = "Assets\\Textures\\btn-tips-armory.dds";
    lv_talentRequirement[lv_i] = StringExternal("Param/Value/77219F2C");
    gv_talentsBehavior[lv_i] = "TalentFortitude";
    gv_talentsRequirement[lv_i] = 6;
    lv_i += 1;
    lv_talentName[lv_i] = StringExternal("Param/Value/7EE21A0C");
    lv_talentTooltip[lv_i] = StringExternal("Param/Value/20CAFF92");
    lv_talentIcon[lv_i] = "Assets\\Textures\\icon-mineral-nobg.dds";
    lv_talentRequirement[lv_i] = StringExternal("Param/Value/7B200F5D");
    gv_talentsBehavior[lv_i] = "TalentEconomist";
    gv_talentsRequirement[lv_i] = 8;
    lv_i += 1;
    lv_talentName[lv_i] = StringExternal("Param/Value/384EC6E6");
    lv_talentTooltip[lv_i] = StringExternal("Param/Value/220EC326");
    lv_talentIcon[lv_i] = "Assets\\Textures\\btn-ability-kerrigan_revive.dds";
    lv_talentRequirement[lv_i] = StringExternal("Param/Value/59489529");
    gv_talentsBehavior[lv_i] = "TalentCommand";
    gv_talentsRequirement[lv_i] = 10;
    lv_i += 1;
    lv_talentName[lv_i] = StringExternal("Param/Value/5F0F24B6");
    lv_talentTooltip[lv_i] = StringExternal("Param/Value/164568F3");
    lv_talentIcon[lv_i] = "Assets\\Textures\\btn-ability-zerg-growth.dds";
    lv_talentRequirement[lv_i] = StringExternal("Param/Value/DE6651A3");
    gv_talentsBehavior[lv_i] = "TalentVitality";
    gv_talentsRequirement[lv_i] = 13;
    lv_i += 1;
    lv_talentName[lv_i] = StringExternal("Param/Value/2523E097");
    lv_talentTooltip[lv_i] = StringExternal("Param/Value/47A321AF");
    lv_talentIcon[lv_i] = "Assets\\Textures\\btn-ability-protoss-preordain.dds";
    lv_talentRequirement[lv_i] = StringExternal("Param/Value/D4F65589");
    gv_talentsBehavior[lv_i] = "TalentHaste";
    gv_talentsRequirement[lv_i] = 16;
    lv_i += 1;
    lv_talentName[lv_i] = StringExternal("Param/Value/AA1528AA");
    lv_talentTooltip[lv_i] = StringExternal("Param/Value/3A4D865D");
    lv_talentIcon[lv_i] = "Assets\\Textures\\btn-ability-terran-battlefieldawareness.dds";
    lv_talentRequirement[lv_i] = StringExternal("Param/Value/10255A00");
    gv_talentsBehavior[lv_i] = "CommandAuraSource";
    gv_talentsRequirement[lv_i] = 20;
    DialogCreate(((lv_buttonSize * lv_width) + 30), ((lv_buttonSize * lv_height) + 30), c_anchorBottomLeft, 5, 390, true);
    gv_talentsDialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    PlayerGroupLoopBegin(PlayerGroupActive());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        auto1C3BE293_val = PlayerRace(PlayerGroupLoopCurrent());
        if (auto1C3BE293_val == "Prot") {
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), DialogGetWidth(DialogLastCreated()), DialogGetHeight(DialogLastCreated()), c_anchorCenter, 0, 0, StringExternal("Param/Value/5AEC1AD8"), "Assets\\Textures\\ui_tooltip_frame_protoss.dds", c_triggerImageTypeBorder, true, Color(100,100,100), c_triggerBlendModeNormal);
        }
        else if (auto1C3BE293_val == "Terr") {
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), DialogGetWidth(DialogLastCreated()), DialogGetHeight(DialogLastCreated()), c_anchorCenter, 0, 0, StringExternal("Param/Value/B4EF1E15"), "Assets\\Textures\\ui_tooltip_frame_terran.dds", c_triggerImageTypeBorder, true, Color(100,100,100), c_triggerBlendModeNormal);
        }
        else if (auto1C3BE293_val == "Zerg") {
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), DialogGetWidth(DialogLastCreated()), DialogGetHeight(DialogLastCreated()), c_anchorCenter, 0, 0, StringExternal("Param/Value/F55D219B"), "Assets\\Textures\\ui_tooltip_frame_zerg.dds", c_triggerImageTypeBorder, true, Color(100,100,100), c_triggerBlendModeNormal);
        }
        else {
        }
    }
    PlayerGroupLoopEnd();
    lv_i = 1;
    auto5C08E084_ae = (lv_height - 1);
    auto5C08E084_ai = 1;
    lv_y = 0;
    for ( ; ( (auto5C08E084_ai >= 0 && lv_y <= auto5C08E084_ae) || (auto5C08E084_ai <= 0 && lv_y >= auto5C08E084_ae) ) ; lv_y += auto5C08E084_ai ) {
        auto7B816966_ae = (lv_width - 1);
        auto7B816966_ai = 1;
        lv_x = 0;
        for ( ; ( (auto7B816966_ai >= 0 && lv_x <= auto7B816966_ae) || (auto7B816966_ai <= 0 && lv_x >= auto7B816966_ae) ) ; lv_x += auto7B816966_ai ) {
            libNtve_gf_CreateDialogItemButton(DialogLastCreated(), lv_buttonSize, lv_buttonSize, c_anchorTopLeft, ((lv_x * lv_buttonSize) + 15), ((lv_y * lv_buttonSize) + 15), (StringExternal("Param/Value/4D4E5E45") + lv_talentName[lv_i] + StringExternal("Param/Value/21C4AB61") + lv_talentTooltip[lv_i] + StringExternal("Param/Value/5252DF5F") + lv_talentRequirement[lv_i]), StringExternal("Param/Value/972634EE"), "");
            gv_talentsButton[lv_i] = DialogControlLastCreated();
            PlayerGroupLoopBegin(PlayerGroupActive());
            for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                autoEBB24CA1_val = PlayerRace(PlayerGroupLoopCurrent());
                if (autoEBB24CA1_val == "Prot") {
                    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "ui_abilitycontrol_protossnormal.dds", PlayerGroupAll());
                    libNtve_gf_SetDialogItemImage2(DialogControlLastCreated(), "ui_abilitycontrol_protossnormal.dds", PlayerGroupAll());
                }
                else if (autoEBB24CA1_val == "Terr") {
                    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "ui_abilitycontrol_terrannormal.dds", PlayerGroupAll());
                    libNtve_gf_SetDialogItemImage2(DialogControlLastCreated(), "ui_abilitycontrol_terrannormal.dds", PlayerGroupAll());
                }
                else if (autoEBB24CA1_val == "Zerg") {
                    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "ui_abilitycontrol_zergnormal.dds", PlayerGroupAll());
                    libNtve_gf_SetDialogItemImage2(DialogControlLastCreated(), "ui_abilitycontrol_zergnormal.dds", PlayerGroupAll());
                }
                else {
                }
            }
            PlayerGroupLoopEnd();
            libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 76, 76, c_anchorTopLeft, 50, 50, StringExternal("Param/Value/97CAEF0E"), lv_talentIcon[lv_i], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            gv_talentsIcon[lv_i] = DialogControlLastCreated();
            DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_talentsButton[lv_i], c_anchorCenter, 0, 0);
            lv_i += 1;
        }
    }
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 140, 140, c_anchorTopLeft, 50, 50, StringExternal("Param/Value/72D0C4AA"), "ui_abilitycontrol_highlight.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    PlayerGroupLoopBegin(PlayerGroupActive());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        auto6D9B0DE3_val = PlayerRace(PlayerGroupLoopCurrent());
        if (auto6D9B0DE3_val == "Prot") {
        }
        else if (auto6D9B0DE3_val == "Terr") {
            libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "ui_abilitycontrol_highlight_terr.dds", PlayerGroupSingle(PlayerGroupLoopCurrent()));
        }
        else if (auto6D9B0DE3_val == "Zerg") {
            libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "ui_abilitycontrol_highlight_zerg.dds", PlayerGroupSingle(PlayerGroupLoopCurrent()));
        }
        else {
        }
    }
    PlayerGroupLoopEnd();
    gv_talentsHighlight = DialogControlLastCreated();
    DialogControlSetVisible(gv_talentsHighlight, PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TalentsCreate_Init () {
    gt_TalentsCreate = TriggerCreate("gt_TalentsCreate_Func");
    TriggerAddEventMapInit(gt_TalentsCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Talents Show
//--------------------------------------------------------------------------------------------------
bool gt_TalentsShow_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_talentsShow[0]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DialogIsVisible(gv_talentsDialog, EventPlayer()) == false)) {
        DialogSetVisible(gv_talentsDialog, PlayerGroupSingle(EventPlayer()), true);
        libNtve_gf_SetDialogItemDesaturated(gv_talentsShow[0], true, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemDesaturated(gv_talentsShow[1], true, PlayerGroupSingle(EventPlayer()));
        DialogSetVisible(gv_controlDialog[gv_playerRace[EventPlayer()]], PlayerGroupSingle(EventPlayer()), false);
        libNtve_gf_SetDialogItemDesaturated(gv_controlShow[0], false, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemDesaturated(gv_controlShow[1], false, PlayerGroupSingle(EventPlayer()));
    }
    else {
        DialogSetVisible(gv_talentsDialog, PlayerGroupSingle(EventPlayer()), false);
        libNtve_gf_SetDialogItemDesaturated(gv_talentsShow[0], false, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemDesaturated(gv_talentsShow[1], false, PlayerGroupSingle(EventPlayer()));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TalentsShow_Init () {
    gt_TalentsShow = TriggerCreate("gt_TalentsShow_Func");
    TriggerAddEventDialogControl(gt_TalentsShow, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_TalentsShow, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeHotkeyPressed);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Talents Use
//--------------------------------------------------------------------------------------------------
bool gt_TalentsUse_Func (bool testConds, bool runActions) {
    int auto0D76CE26_ae;
    int auto0D76CE26_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((DialogControlGetDialog(EventDialogControl()) == gv_talentsDialog))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((GameGetMissionTime() <= 60.0)) {
        auto0D76CE26_ae = 8;
        auto0D76CE26_ai = 1;
        lv_i = 0;
        for ( ; ( (auto0D76CE26_ai >= 0 && lv_i <= auto0D76CE26_ae) || (auto0D76CE26_ai <= 0 && lv_i >= auto0D76CE26_ae) ) ; lv_i += auto0D76CE26_ai ) {
            if ((EventDialogControl() == gv_talentsButton[lv_i])) {
                break;
            }
            else {
            }
        }
        DialogControlSetPositionRelative(gv_talentsHighlight, PlayerGroupSingle(EventPlayer()), c_anchorCenter, gv_talentsButton[lv_i], c_anchorCenter, 0, 0);
        DialogControlSetVisible(gv_talentsHighlight, PlayerGroupSingle(EventPlayer()), true);
        UnitBehaviorRemove(gv_playerWorker[EventPlayer()], gv_talentsBehavior[gv_talentsCurrent[EventPlayer()]], 1);
        gv_talentsCurrent[EventPlayer()] = lv_i;
        UnitBehaviorAdd(gv_playerWorker[EventPlayer()], gv_talentsBehavior[lv_i], gv_playerWorker[EventPlayer()], 1);
        BankValueSetFromInt(gv_sTATBank[EventPlayer()], "lllllIIlIllIIllI", "lllllllIlIllIIII", gv_talentsCurrent[EventPlayer()]);
        BankSave(gv_sTATBank[EventPlayer()]);
    }
    else {
        SoundPlay(SoundLink("UI_GenericError", -1), PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/E4F3A58B"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TalentsUse_Init () {
    gt_TalentsUse = TriggerCreate("gt_TalentsUse_Func");
    TriggerAddEventDialogControl(gt_TalentsUse, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Game Over Button
//--------------------------------------------------------------------------------------------------
bool gt_GameOverButton_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Variable Initialization
    lv_p = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_gameOverButton[0]) || (EventDialogControl() == gv_gameOverButton[1])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventDialogControl() == gv_gameOverButton[0])) {
        DialogSetVisible(gv_gameOverDialog[0], PlayerGroupSingle(lv_p), false);
        Wait(0.0625, c_timeGame);
        GameOver(lv_p, c_gameOverVictory, false, true);
    }
    else {
        DialogSetVisible(gv_gameOverDialog[1], PlayerGroupSingle(lv_p), false);
        Wait(0.0625, c_timeGame);
        GameOver(lv_p, c_gameOverDefeat, false, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GameOverButton_Init () {
    gt_GameOverButton = TriggerCreate("gt_GameOverButton_Func");
    TriggerAddEventDialogControl(gt_GameOverButton, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_GameOverButton, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeHotkeyPressed);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pickup Minerals
//--------------------------------------------------------------------------------------------------
bool gt_PickupMinerals_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_x;
    playergroup lv_group;

    // Variable Initialization
    lv_x = 50;
    lv_group = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupAdd(lv_group, EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget));
    libNtve_gf_AddPlayerGroupToPlayerGroup(PlayerGroupAlliance(c_playerGroupAlly, EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget)), lv_group);
    libNtve_gf_CreatePingFacingAngle(lv_group, "PingObjective", UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitSource)), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 8.0, 270.0);
    PlayerGroupLoopBegin(lv_group);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        UIAlertPoint("CustomAlert", PlayerGroupLoopCurrent(), (StringExternal("Param/Value/9238865E") + IntToText(lv_x) + StringExternal("Param/Value/C63888CF")), "Assets\\Textures\\icon-mineral-nobg.dds", UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitSource)));
        TextTagCreate((StringExternal("Param/Value/2B50F094") + IntToText(lv_x) + StringExternal("Param/Value/A77ACAB4")), 24, UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitSource)), 1.0, true, false, PlayerGroupSingle(PlayerGroupLoopCurrent()));
        TextTagSetVelocity(TextTagLastCreated(), 1.0, 90.0);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 5.0);
        PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropMinerals, c_playerPropOperAdd, lv_x);
        SoundPlay(SoundLink("UI_TerranNewUnitAcquired", -1), PlayerGroupSingle(PlayerGroupLoopCurrent()), 100.0, 0.0);
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PickupMinerals_Init () {
    gt_PickupMinerals = TriggerCreate("gt_PickupMinerals_Func");
    TriggerAddEventPlayerEffectUsed(gt_PickupMinerals, c_playerAny, "MineralsPickup");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Structure Death
//--------------------------------------------------------------------------------------------------
bool gt_StructureDeath_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_x;
    playergroup lv_group;
    string lv_image;

    // Variable Initialization
    lv_x = 50;
    lv_group = PlayerGroupEmpty();
    lv_image = (CatalogFieldValueGet(c_gameCatalogActor, StringSub(CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitSource)), "Name", c_playerAny), 11, 30), "UnitIcon", c_playerAny));

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreatePingFacingAngle(PlayerGroupAlliance(c_playerGroupEnemy, EventPlayerEffectUsedUnitOwner(c_effectPlayerSource)), "PingObjective", UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitSource)), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 8.0, 270.0);
    PlayerGroupLoopBegin(PlayerGroupAlliance(c_playerGroupEnemy, EventPlayerEffectUsedUnitOwner(c_effectPlayerSource)));
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        UIAlertPoint("CustomAlert", PlayerGroupLoopCurrent(), (StringExternal("Param/Value/6BC057D5") + UnitTypeGetName(UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitSource))) + StringExternal("Param/Value/9A7EA89D") + IntToText(lv_x) + StringExternal("Param/Value/CA0C9573")), lv_image, UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitSource)));
        TextTagCreate((StringExternal("Param/Value/36D270E6") + IntToText(lv_x) + StringExternal("Param/Value/D6172A87")), 24, UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitSource)), 1.0, true, false, PlayerGroupSingle(PlayerGroupLoopCurrent()));
        TextTagSetVelocity(TextTagLastCreated(), 1.0, 90.0);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 5.0);
        PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropMinerals, c_playerPropOperAdd, lv_x);
        SoundPlay(SoundLink("UI_TerranNewUnitAvailable", -1), PlayerGroupSingle(PlayerGroupLoopCurrent()), 100.0, 0.0);
    }
    PlayerGroupLoopEnd();
    PlayerGroupAdd(lv_group, EventPlayerEffectUsedUnitOwner(c_effectPlayerSource));
    libNtve_gf_AddPlayerGroupToPlayerGroup(PlayerGroupAlliance(c_playerGroupAlly, EventPlayerEffectUsedUnitOwner(c_effectPlayerSource)), lv_group);
    libNtve_gf_CreatePingFacingAngle(lv_group, "PingObjective", UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitSource)), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 8.0, 270.0);
    PlayerGroupLoopBegin(lv_group);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        UIAlertPoint("CustomAlert", PlayerGroupLoopCurrent(), (StringExternal("Param/Value/B9A397C6") + UnitTypeGetName(UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitSource))) + StringExternal("Param/Value/D58A789D")), lv_image, UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitSource)));
        SoundPlay(SoundLink("TUIWarning", -1), PlayerGroupSingle(PlayerGroupLoopCurrent()), 100.0, 0.0);
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StructureDeath_Init () {
    gt_StructureDeath = TriggerCreate("gt_StructureDeath_Func");
    TriggerAddEventPlayerEffectUsed(gt_StructureDeath, c_playerAny, "StructureDeath");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Set
//--------------------------------------------------------------------------------------------------
bool gt_HeroSet_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_playerWorker[UnitGetOwner(EventUnitCreatedUnit())] = EventUnitCreatedUnit();
    if ((gv_talentsCurrent[UnitGetOwner(EventUnitCreatedUnit())] != 0)) {
        UnitBehaviorAdd(EventUnitCreatedUnit(), gv_talentsBehavior[gv_talentsCurrent[UnitGetOwner(EventUnitCreatedUnit())]], EventUnitCreatedUnit(), 1);
    }
    else {
    }
    UnitBehaviorAdd(EventUnitCreatedUnit(), "AFKTimer", EventUnitCreatedUnit(), 1);
    UnitSetCustomValue(EventUnitCreatedUnit(), 0, PointGetX(PointFromId(1407)));
    UnitSetCustomValue(EventUnitCreatedUnit(), 1, PointGetY(PointFromId(1407)));
    UnitControlGroupAddUnit(UnitGetOwner(EventUnitCreatedUnit()), 1, EventUnitCreatedUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HeroSet_Init () {
    gt_HeroSet = TriggerCreate("gt_HeroSet_Func");
    TriggerAddEventUnitCreated(gt_HeroSet, null, "HeroSelectionProtoss", null);
    TriggerAddEventUnitCreated(gt_HeroSet, null, "HeroSelectionTerran", null);
    TriggerAddEventUnitCreated(gt_HeroSet, null, "HeroSelectionZerg", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn
//--------------------------------------------------------------------------------------------------
bool gt_Spawn_Func (bool testConds, bool runActions) {
    int autoAE2F479D_val;
    int auto8714B948_ae;
    int auto8714B948_ai;

    // Variable Declarations
    int lv_cost;
    int lv_aI;
    point[3] lv_spawn;
    point[3] lv_points;
    point[3] lv_targets;
    int lv_i;

    // Variable Initialization
    lv_aI = 14;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_OrderUnitCreatedBehavior, false);
    TriggerEnable(gt_OrderNeuralParasiteOn, false);
    TriggerEnable(gt_OrderNeuralParasiteOff, false);
    TriggerEnable(gt_OrderMorph, false);
    TriggerEnable(gt_OrderIdle, false);
    lv_spawn[0] = PointFromId(1407);
    lv_spawn[1] = PointFromId(728);
    lv_spawn[2] = PointFromId(727);
    lv_points[0] = PointFromId(276);
    lv_points[1] = PointFromId(376);
    lv_points[2] = PointFromId(377);
    lv_targets[0] = PointFromId(375);
    lv_targets[1] = PointFromId(378);
    lv_targets[2] = PointFromId(379);
    gv_wave += 1;
    lv_cost = FixedToInt((100.0 + (IntToFixed(gv_wave) * 30.0)));
    UnitGroupLoopBegin(gv_reinforcementGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitBehaviorAdd(UnitGroupLoopCurrent(), "WaveTimer", UnitGroupLoopCurrent(), 1);
    }
    UnitGroupLoopEnd();
    PlayerGroupLoopBegin(PlayerGroupActive());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        autoAE2F479D_val = gv_playerRace[PlayerGroupLoopCurrent()];
        if (autoAE2F479D_val == 0) {
            gf_SpawnProtoss(PlayerGroupLoopCurrent());
        }
        else if (autoAE2F479D_val == 1) {
            gf_SpawnTerran(PlayerGroupLoopCurrent());
        }
        else if (autoAE2F479D_val == 2) {
            gf_SpawnZerg(PlayerGroupLoopCurrent());
        }
        else {
        }
    }
    PlayerGroupLoopEnd();
    Wait(0.125, c_timeGame);
    auto8714B948_ae = 2;
    auto8714B948_ai = 1;
    lv_i = 0;
    for ( ; ( (auto8714B948_ai >= 0 && lv_i <= auto8714B948_ae) || (auto8714B948_ai <= 0 && lv_i >= auto8714B948_ae) ) ; lv_i += auto8714B948_ai ) {
        gf_SpawnZergOverseer(lv_spawn[lv_i], lv_points[lv_i], lv_targets[lv_i], 14, 45.0, lv_i);
        PlayerGroupLoopBegin(PlayerGroupActive());
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            gf_SpawnZergBasic(lv_spawn[lv_i], (lv_cost * gv_difficulty), lv_points[lv_i], lv_targets[lv_i], PointFromId(380), 14, 6.0, 45.0);
            Wait(0.125, c_timeGame);
        }
        PlayerGroupLoopEnd();
    }
    Wait(0.125, c_timeGame);
    gf_WaveUpgrades(14);
    TriggerEnable(gt_OrderUnitCreatedBehavior, true);
    TriggerEnable(gt_OrderNeuralParasiteOn, true);
    TriggerEnable(gt_OrderNeuralParasiteOff, true);
    TriggerEnable(gt_OrderMorph, true);
    TriggerEnable(gt_OrderIdle, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Spawn_Init () {
    gt_Spawn = TriggerCreate("gt_Spawn_Func");
    TriggerAddEventTimePeriodic(gt_Spawn, 30.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start
//--------------------------------------------------------------------------------------------------
bool gt_Start_Func (bool testConds, bool runActions) {
    int autoC99272E8_val;

    // Variable Declarations
    point[3] lv_p;
    int lv_i;
    int lv_x;
    playergroup lv_aI;

    // Variable Initialization
    lv_x = 13;
    lv_aI = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerSetColorIndex(13, 1, true);
    PlayerSetColorIndex(14, 4, true);
    PlayerSetColorIndex(14, 4, true);
    PlayerGroupAdd(lv_aI, 14);
    TechTreeAbilityAllow(13, AbilityCommand("CommandCenterTransport", 4), false);
    TechTreeAbilityAllow(13, AbilityCommand("CommandCenterTransport", 1), false);
    libNtve_gf_SetUpgradeLevelForPlayer(14, "Burrow", 1);
    if ((PlayerStatus(PlayerGroupPlayer(PlayerGroupActive(), 1)) == c_playerStatusActive)) {
        gv_playerPoint[PlayerGroupPlayer(PlayerGroupActive(), 1)] = PointFromId(2);
        gv_playerTarget[PlayerGroupPlayer(PlayerGroupActive(), 1)] = PointFromId(276);
    }
    else {
    }
    if ((PlayerStatus(PlayerGroupPlayer(PlayerGroupActive(), 2)) == c_playerStatusActive)) {
        gv_playerPoint[PlayerGroupPlayer(PlayerGroupActive(), 2)] = PointFromId(294);
        gv_playerTarget[PlayerGroupPlayer(PlayerGroupActive(), 2)] = PointFromId(376);
    }
    else {
    }
    if ((PlayerStatus(PlayerGroupPlayer(PlayerGroupActive(), 3)) == c_playerStatusActive)) {
        gv_playerPoint[PlayerGroupPlayer(PlayerGroupActive(), 3)] = PointFromId(295);
        gv_playerTarget[PlayerGroupPlayer(PlayerGroupActive(), 3)] = PointFromId(377);
    }
    else {
    }
    lv_p[0] = PointFromId(2);
    lv_p[1] = PointFromId(294);
    lv_p[2] = PointFromId(295);
    libNtve_gf_SetPlayerGroupAlliance(PlayerGroupActive(), 1);
    PlayerGroupLoopBegin(PlayerGroupActive());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        libNtve_gf_SetAlliance(PlayerGroupLoopCurrent(), 13, 1);
        autoC99272E8_val = gv_playerRace[PlayerGroupLoopCurrent()];
        if (autoC99272E8_val == 0) {
            UnitCreate(1, "ReinforcementsProtoss", c_unitCreateIgnorePlacement, PlayerGroupLoopCurrent(), PointFromId(2), gv_playerFacing[PlayerGroupLoopCurrent()]);
            UnitControlGroupAddUnit(PlayerGroupLoopCurrent(), 3, UnitLastCreated());
            UnitGroupAdd(gv_reinforcementGroup, UnitLastCreated());
            UnitCreate(1, "ReinforcementsProtoss", c_unitCreateIgnorePlacement, PlayerGroupLoopCurrent(), PointFromId(294), gv_playerFacing[PlayerGroupLoopCurrent()]);
            UnitControlGroupAddUnit(PlayerGroupLoopCurrent(), 4, UnitLastCreated());
            UnitGroupAdd(gv_reinforcementGroup, UnitLastCreated());
            UnitCreate(1, "ReinforcementsProtoss", c_unitCreateIgnorePlacement, PlayerGroupLoopCurrent(), PointFromId(295), gv_playerFacing[PlayerGroupLoopCurrent()]);
            UnitControlGroupAddUnit(PlayerGroupLoopCurrent(), 2, UnitLastCreated());
            UnitGroupAdd(gv_reinforcementGroup, UnitLastCreated());
        }
        else if (autoC99272E8_val == 1) {
            UnitCreate(1, "ReinforcementsTerran", c_unitCreateIgnorePlacement, PlayerGroupLoopCurrent(), PointFromId(2), gv_playerFacing[PlayerGroupLoopCurrent()]);
            UnitControlGroupAddUnit(PlayerGroupLoopCurrent(), 3, UnitLastCreated());
            UnitGroupAdd(gv_reinforcementGroup, UnitLastCreated());
            UnitCreate(1, "ReinforcementsTerran", c_unitCreateIgnorePlacement, PlayerGroupLoopCurrent(), PointFromId(294), gv_playerFacing[PlayerGroupLoopCurrent()]);
            UnitControlGroupAddUnit(PlayerGroupLoopCurrent(), 4, UnitLastCreated());
            UnitGroupAdd(gv_reinforcementGroup, UnitLastCreated());
            UnitCreate(1, "ReinforcementsTerran", c_unitCreateIgnorePlacement, PlayerGroupLoopCurrent(), PointFromId(295), gv_playerFacing[PlayerGroupLoopCurrent()]);
            UnitControlGroupAddUnit(PlayerGroupLoopCurrent(), 2, UnitLastCreated());
            UnitGroupAdd(gv_reinforcementGroup, UnitLastCreated());
        }
        else if (autoC99272E8_val == 2) {
            UnitCreate(1, "ReinforcementsZerg", c_unitCreateIgnorePlacement, PlayerGroupLoopCurrent(), PointFromId(2), gv_playerFacing[PlayerGroupLoopCurrent()]);
            UnitControlGroupAddUnit(PlayerGroupLoopCurrent(), 3, UnitLastCreated());
            UnitGroupAdd(gv_reinforcementGroup, UnitLastCreated());
            UnitCreate(1, "ReinforcementsZerg", c_unitCreateIgnorePlacement, PlayerGroupLoopCurrent(), PointFromId(294), gv_playerFacing[PlayerGroupLoopCurrent()]);
            UnitControlGroupAddUnit(PlayerGroupLoopCurrent(), 4, UnitLastCreated());
            UnitGroupAdd(gv_reinforcementGroup, UnitLastCreated());
            UnitCreate(1, "ReinforcementsZerg", c_unitCreateIgnorePlacement, PlayerGroupLoopCurrent(), PointFromId(295), gv_playerFacing[PlayerGroupLoopCurrent()]);
            UnitControlGroupAddUnit(PlayerGroupLoopCurrent(), 2, UnitLastCreated());
            UnitGroupAdd(gv_reinforcementGroup, UnitLastCreated());
        }
        else {
        }
        UnitBehaviorAdd(UnitLastCreated(), "PassiveIncome", UnitLastCreated(), 1);
        gf_CreateStartingUnits(PlayerGroupLoopCurrent(), gv_playerPoint[PlayerGroupLoopCurrent()]);
    }
    PlayerGroupLoopEnd();
    UnitGroupLoopBegin(gv_reinforcementGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitBehaviorAdd(UnitGroupLoopCurrent(), "WaveTimer", UnitGroupLoopCurrent(), 1);
    }
    UnitGroupLoopEnd();
    PlayerGroupLoopBegin(lv_aI);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        CatalogFieldValueSet(c_gameCatalogUnit, "Zergling", "TauntDuration[" + IntToString(0) + "]", PlayerGroupLoopCurrent(), "0");
        CatalogFieldValueSet(c_gameCatalogUnit, "Zergling", "TauntDuration[" + IntToString(1) + "]", PlayerGroupLoopCurrent(), "0");
        CatalogFieldValueSet(c_gameCatalogUnit, "Hydralisk", "TauntDuration[" + IntToString(0) + "]", PlayerGroupLoopCurrent(), "0");
        CatalogFieldValueSet(c_gameCatalogUnit, "Hydralisk", "TauntDuration[" + IntToString(1) + "]", PlayerGroupLoopCurrent(), "0");
        CatalogFieldValueSet(c_gameCatalogUnit, "Ultralisk", "TauntDuration[" + IntToString(0) + "]", PlayerGroupLoopCurrent(), "0");
        CatalogFieldValueSet(c_gameCatalogUnit, "Ultralisk", "TauntDuration[" + IntToString(0) + "]", PlayerGroupLoopCurrent(), "1");
        CatalogFieldValueSet(c_gameCatalogUnit, "Roach", "TauntDuration[" + IntToString(1) + "]", PlayerGroupLoopCurrent(), "0");
        CatalogFieldValueSet(c_gameCatalogUnit, "Overlord", "TauntDuration[" + IntToString(1) + "]", PlayerGroupLoopCurrent(), "0");
        CatalogFieldValueSet(c_gameCatalogUnit, "Infestor", "TauntDuration[" + IntToString(1) + "]", PlayerGroupLoopCurrent(), "0");
        CatalogFieldValueSet(c_gameCatalogUnit, "Queen", "TauntDuration[" + IntToString(1) + "]", PlayerGroupLoopCurrent(), "0");
        CatalogFieldValueSet(c_gameCatalogAbil, "Corruption", "Cost[" + IntToString(0) + "].Cooldown.TimeStart", PlayerGroupLoopCurrent(), "0");
        CatalogFieldValueSet(c_gameCatalogAbil, "Corruption", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", PlayerGroupLoopCurrent(), "5");
        CatalogFieldValueSet(c_gameCatalogUnit, "Viper", "EnergyRegenRate", PlayerGroupLoopCurrent(), "2");
        CatalogFieldValueSet(c_gameCatalogAbil, "Yoink", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", PlayerGroupLoopCurrent(), "15");
        CatalogFieldValueSet(c_gameCatalogAbil, "Yoink", "Cost[" + IntToString(0) + "].Vital[" + IntToString(2) + "]", PlayerGroupLoopCurrent(), "0");
        CatalogFieldValueSet(c_gameCatalogUnit, "Infestor", "EnergyRegenRate", PlayerGroupLoopCurrent(), "2");
        CatalogFieldValueSet(c_gameCatalogAbil, "InfestedTerrans", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", PlayerGroupLoopCurrent(), "5");
        CatalogFieldValueSet(c_gameCatalogAbil, "FungalGrowth", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", PlayerGroupLoopCurrent(), "10");
        CatalogFieldValueSet(c_gameCatalogAbil, "FungalGrowth", "Cost[" + IntToString(0) + "].Vital[" + IntToString(2) + "]", PlayerGroupLoopCurrent(), "25");
        CatalogFieldValueSet(c_gameCatalogAbil, "NeuralParasite", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", PlayerGroupLoopCurrent(), "15");
        CatalogFieldValueSet(c_gameCatalogAbil, "NeuralParasite", "Cost[" + IntToString(0) + "].Vital[" + IntToString(2) + "]", PlayerGroupLoopCurrent(), "25");
        CatalogFieldValueSet(c_gameCatalogUnit, "Queen", "EnergyRegenRate", PlayerGroupLoopCurrent(), "2");
        CatalogFieldValueSet(c_gameCatalogAbil, "Transfusion", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", PlayerGroupLoopCurrent(), "5");
        CatalogFieldValueSet(c_gameCatalogUnit, "Overseer", "EnergyMax", PlayerGroupLoopCurrent(), "0");
        CatalogFieldValueSet(c_gameCatalogUnit, "Overseer", "EnergyRegenRate", PlayerGroupLoopCurrent(), "0");
        CatalogFieldValueSet(c_gameCatalogUnit, "Overseer", "EnergyStart", PlayerGroupLoopCurrent(), "0");
    }
    PlayerGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, 14, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitSetCustomValue(UnitGroupLoopCurrent(), 0, PointGetX(UnitGetPosition(UnitGroupLoopCurrent())));
        UnitSetCustomValue(UnitGroupLoopCurrent(), 1, PointGetY(UnitGetPosition(UnitGroupLoopCurrent())));
        UnitBehaviorAdd(UnitGroupLoopCurrent(), "DefenderDeath", UnitGroupLoopCurrent(), 1);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((!((UnitGetType(UnitGroupLoopCurrent()) == "CreepTumorBurrowed")))) {
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "StructureDeath", UnitGroupLoopCurrent(), 1);
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Start_Init () {
    gt_Start = TriggerCreate("gt_Start_Func");
    TriggerAddEventMapInit(gt_Start);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Magthera
//--------------------------------------------------------------------------------------------------
bool gt_Magthera_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetCustomValue(UnitFromId(1259), 0, PointGetX(PointFromId(380)));
    UnitSetCustomValue(UnitFromId(1259), 1, PointGetY(PointFromId(380)));
    UnitIssueOrder(UnitFromId(1259), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(380)), c_orderQueueReplace);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingCircleImportant", UnitGetPosition(UnitFromId(1259)), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    PingSetUnit(PingLastCreated(), UnitFromId(1259));
    PlayerGroupLoopBegin(PlayerGroupActive());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        libNtve_gf_ShareVisionofUnit(UnitFromId(1259), true, PlayerGroupLoopCurrent());
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Magthera_Init () {
    gt_Magthera = TriggerCreate("gt_Magthera_Func");
    TriggerAddEventTimeElapsed(gt_Magthera, 1800.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Leaver
//--------------------------------------------------------------------------------------------------
bool gt_Leaver_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(gv_playerWave[EventPlayer()]);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitSetOwner(UnitGroupLoopCurrent(), 13, false);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropMinerals, c_playerPropOperSetTo, 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Leaver_Init () {
    gt_Leaver = TriggerCreate("gt_Leaver_Func");
    TriggerAddEventPlayerLeft(gt_Leaver, c_playerAny, c_gameResultUndecided);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defender Revive Polymorph
//--------------------------------------------------------------------------------------------------
bool gt_DefenderRevivePolymorph_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior(EventPlayerEffectUsedUnit(c_effectUnitSource), "DefenderDeath") == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_UnitCreateFacingPoint(1, UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitSource)), 0, UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitSource)), PointFromId(1407), Point(UnitGetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitSource), 0), UnitGetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitSource), 1)));
    UnitSetCustomValue(UnitLastCreated(), 0, UnitGetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitSource), 0));
    UnitSetCustomValue(UnitLastCreated(), 1, UnitGetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitSource), 1));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), Point(UnitGetCustomValue(UnitLastCreated(), 0), UnitGetCustomValue(UnitLastCreated(), 1))), c_orderQueueReplace);
    UnitBehaviorAdd(UnitLastCreated(), "DefenderDeath", UnitLastCreated(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefenderRevivePolymorph_Init () {
    gt_DefenderRevivePolymorph = TriggerCreate("gt_DefenderRevivePolymorph_Func");
    TriggerAddEventPlayerEffectUsed(gt_DefenderRevivePolymorph, c_playerAny, "PolymorphHeroicCreate");
    TriggerAddEventPlayerEffectUsed(gt_DefenderRevivePolymorph, c_playerAny, "PolymorphHeroicAirCreate");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defender Revive Charm
//--------------------------------------------------------------------------------------------------
bool gt_DefenderReviveCharm_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior(EventPlayerEffectUsedUnit(c_effectUnitTarget), "DefenderDeath") == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(EventPlayerEffectUsedUnit(c_effectUnitTarget), "DefenderDeath", 1);
    libNtve_gf_UnitCreateFacingPoint(1, UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)), 0, 14, PointFromId(1407), Point(UnitGetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitSource), 0), UnitGetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitSource), 1)));
    UnitSetCustomValue(UnitLastCreated(), 0, UnitGetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitTarget), 0));
    UnitSetCustomValue(UnitLastCreated(), 1, UnitGetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitTarget), 1));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), Point(UnitGetCustomValue(UnitLastCreated(), 0), UnitGetCustomValue(UnitLastCreated(), 1))), c_orderQueueReplace);
    UnitBehaviorAdd(UnitLastCreated(), "DefenderDeath", UnitLastCreated(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefenderReviveCharm_Init () {
    gt_DefenderReviveCharm = TriggerCreate("gt_DefenderReviveCharm_Func");
    TriggerAddEventPlayerEffectUsed(gt_DefenderReviveCharm, c_playerAny, "CharmHeroicSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defender Revive
//--------------------------------------------------------------------------------------------------
bool gt_DefenderRevive_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_UnitCreateFacingPoint(1, UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitSource)), 0, UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitSource)), PointFromId(1407), Point(UnitGetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitSource), 0), UnitGetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitSource), 1)));
    UnitSetCustomValue(UnitLastCreated(), 0, UnitGetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitSource), 0));
    UnitSetCustomValue(UnitLastCreated(), 1, UnitGetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitSource), 1));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), Point(UnitGetCustomValue(UnitLastCreated(), 0), UnitGetCustomValue(UnitLastCreated(), 1))), c_orderQueueReplace);
    UnitBehaviorAdd(UnitLastCreated(), "DefenderDeath", UnitLastCreated(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefenderRevive_Init () {
    gt_DefenderRevive = TriggerCreate("gt_DefenderRevive_Func");
    TriggerAddEventPlayerEffectUsed(gt_DefenderRevive, c_playerAny, "DefenderDeath");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Revive Hero
//--------------------------------------------------------------------------------------------------
bool gt_ReviveHero_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPosition(EventPlayerEffectUsedUnit(c_effectUnitSource), gv_playerPoint[EventPlayerEffectUsedUnitOwner(c_effectPlayerSource)], false);
    UnitSetFacing(EventPlayerEffectUsedUnit(c_effectUnitSource), gv_playerFacing[EventPlayerEffectUsedUnitOwner(c_effectPlayerSource)], 0.0);
    UnitIssueOrder(EventPlayerEffectUsedUnit(c_effectUnitSource), Order(AbilityCommand("StopHero", 0)), c_orderQueueReplace);
    SoundPlay(SoundLink("UI_TransmissionStart", -1), PlayerGroupSingle(EventPlayerEffectUsedUnitOwner(c_effectPlayerSource)), 100.0, 0.0);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitSource)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 8.0, 270.0);
    PingSetUnit(PingLastCreated(), EventPlayerEffectUsedUnit(c_effectUnitSource));
    UIAlertPoint("CustomAlert", EventPlayerEffectUsedUnitOwner(c_effectPlayerSource), (StringExternal("Param/Value/FD54763D") + UnitTypeGetName(UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitSource))) + StringExternal("Param/Value/D2BA2503")), "Assets\\Textures\\btn-ability-kerrigan_revive.dds", UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitSource)));
    PlayerGroupLoopBegin(PlayerGroupActive());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((UnitIsSelected(EventPlayerEffectUsedUnit(c_effectUnitSource), PlayerGroupLoopCurrent()) == true)) {
            UnitSelect(EventPlayerEffectUsedUnit(c_effectUnitSource), PlayerGroupLoopCurrent(), false);
            UnitSelect(EventPlayerEffectUsedUnit(c_effectUnitSource), PlayerGroupLoopCurrent(), true);
        }
        else {
        }
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReviveHero_Init () {
    gt_ReviveHero = TriggerCreate("gt_ReviveHero_Func");
    TriggerAddEventPlayerEffectUsed(gt_ReviveHero, c_playerAny, "Reviving");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Game Over
//--------------------------------------------------------------------------------------------------
bool gt_GameOver_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_winners;
    playergroup lv_losers;

    // Variable Initialization
    lv_winners = PlayerGroupEmpty();
    lv_losers = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupAdd(lv_losers, EventPlayerEffectUsedUnitOwner(c_effectPlayerSource));
    libNtve_gf_AddPlayerGroupToPlayerGroup(PlayerGroupAlliance(c_playerGroupAlly, EventPlayerEffectUsedUnitOwner(c_effectPlayerSource)), lv_losers);
    libNtve_gf_AddPlayerGroupToPlayerGroup(PlayerGroupAlliance(c_playerGroupEnemy, EventPlayerEffectUsedUnitOwner(c_effectPlayerSource)), lv_winners);
    gf_GameOver(lv_winners, lv_losers);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GameOver_Init () {
    gt_GameOver = TriggerCreate("gt_GameOver_Func");
    TriggerAddEventPlayerEffectUsed(gt_GameOver, c_playerAny, "Objective");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Library_Init();
    gt_ControlCreate_Init();
    gt_ControlShow_Init();
    gt_ControlSelect_Init();
    gt_OrderMorph_Init();
    gt_OrderIdle_Init();
    gt_OrderNeuralParasiteOn_Init();
    gt_OrderNeuralParasiteOff_Init();
    gt_OrderUnitCreatedBehavior_Init();
    gt_OrderUnitCreatedEffect_Init();
    gt_Sell_Init();
    gt_Upgrade_Init();
    gt_Reposition_Init();
    gt_CreateUnit_Init();
    gt_MorphTarget_Init();
    gt_MorphInstant_Init();
    gt_SwitchHellbat_Init();
    gt_SwitchHellion_Init();
    gt_SwitchVikingAssault_Init();
    gt_SwitchVikingFighter_Init();
    gt_SwitchThorNormal_Init();
    gt_SwitchThorSpecial_Init();
    gt_PlayerAvatar_Init();
    gt_LevelupAnimation_Init();
    gt_TalentsCreate_Init();
    gt_TalentsShow_Init();
    gt_TalentsUse_Init();
    gt_GameOverButton_Init();
    gt_PickupMinerals_Init();
    gt_StructureDeath_Init();
    gt_HeroSet_Init();
    gt_Spawn_Init();
    gt_Start_Init();
    gt_Magthera_Init();
    gt_Leaver_Init();
    gt_DefenderRevivePolymorph_Init();
    gt_DefenderReviveCharm_Init();
    gt_DefenderRevive_Init();
    gt_ReviveHero_Init();
    gt_GameOver_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
